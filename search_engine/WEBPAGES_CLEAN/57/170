 Python: module equivalence<body>

           equivalence</strong>       index   c:\users\pattis\workspace\courselib\equivalence.py       
 
         Classes</strong>                  
     builtins.object 
   
    EquivalenceClass 
    
  
        class  EquivalenceClass</strong> ( builtins.object )           
  Implements an Equivalnce class data type: values are added as 
  singletons, equivalance classes are merged,  we can ask 
  whether two values are in the same equivalance class, and 
  we can get a set of equivalence classes (each a set).         
 Methods defined here:     __add__</strong> (self, x)   Overload syntax: e = e + x is the same as e. add_singleton (x)       __bool__</strong> (self)   Determine the truth of an equivalence class: non-unitary equivalence classes are True       __init__</strong> (self, inital_contents)   Equivalence class is constructed to store initial_contents 
 (it can be any iterable), each a a singleton       __iter__</strong> (self)   Implement the constructor for the iterator protocol       __str__</strong> (self)      add_singleton</strong> (self, v)   Add value v as its own singleton       all_classes</strong> (self)      clear</strong> (self)   Clear the equivalence class       in_same_class</strong> (self, a, b)   return whether a and b are in the same equivalence class, possibly 
  shortening some paths to the root       is_singleton</strong> (self)   Return whether there is just one class in the equivalence class       merge_classes_containing</strong> (self, a, b)   Merge the equivalence classes storing a and b, , possibly 
  shortening some paths to the root       size</strong> (self)   Return the number of different (unequivalent) classes    
Data descriptors defined here:    __dict__</strong> 
  dictionary for instance variables (if defined)  
    __weakref__</strong> 
  list of weak references to the object (if defined)  
       </body> 