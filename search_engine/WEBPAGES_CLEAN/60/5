 if Statements


Statements in Python are like complete imperative sentences in English: each
commands Python to perform some action. Just as we said that Python evaluates
expressions, we say that Python executes statements. We already have studied
the Python assignment_statement and import_statement: both bind names to objects
(and even introduce names into the name space of their module, if they is not
already there). A function_call and method_call are also statements: typically
the kinds of functions that we call as statements are commands that have an
effect but return None as a value: the canonical example is the print function.

We will classify many statements as control structures: such statements control
(conditionally/by repetition) the execution of other statements. They may even
control other control structures: statements can contain statements just as
expressions can contain other expressions.

The lecture covers how Python makes decisions: it uses boolean expressions to
decide whether to execute certain blocks of other statements. We will learn
about blocks and explore their use when discussing if statements, and then use
blocks in many other kinds of statements (including in the definitions of
functions). Blocks are all about indentation, so you will build knowledge about
blocks on your knowlege of the indent/dedent tokens. Python is unique among
the "popular" programming languages in its use of indentation to indicate
blocks.

In later lectures we will begin learning about about Python's for loop iterator
(definite iteration), while loops (indefinite iteration, including discussion
of the break_statement), and try/except statement (which allows us to handle
raised exceptions that we have started to learn about). When we get this far,
we will learn how to use Python's while and try/except statements to write the
equivalent of the for loop iterator, which will help us understand all these
language features better.

We can summarize our upcomming study with the following EBNF rule, showing the
alternatives for Python statements that we will learn.

  statement  y:
    min = y
    max = x
else:
    min = x
    max = y

Notice the : delimiter after both the expression after if and after the else
keyword. Anywhere you see a : delimiter, a block follows, and Eclipse will
automatically indent the next line after one ending in a colon (and it will
indent each other line at the same level of indentation as the previous one).
Notice that the else must be dedented from the block, telling Python the block
is done.

Semantically, Python executes an if/else statement as follows

  (1) Evaluate the expression (True or False)
  (2) If it is True, execute block-1, then skip block-2
  (3) If it is False, skip block-1, then execute block-2

So in if/else statements, Python always executes one of the two blocks of
statements that it controls. This is a bit different from the plain if
statement, which decides whether or not to execute the one block that it
controls.

How does Python know where the end of the block-1 is? The else: line has a
dedent token; how does Python know where the end of the block-2 is? The next
line will have a dedent token.

Here is another example of using an if/else. Suppose we bind the name cookies
to the number of cookies we want to ask for: it could be 0, 1, 2, .... Here is
an if/else to ask for that number of cookies gramatically

if cookies == 1:
    print('May I have 1 cookie?')
else:
    print('May I have',cookies,'cookies?')

If we defined number as the following function (we are getting a bit ahead of
ourselves here because we have not studied how to write functions).

def number_match(number : int, singular : str, plural : str) -&gt; str:
    if number == 1:
        return singular
    else:
        return plural

We could simplify the code above (the if/decision is now in the function) to

print('May I have',cookies,number_match(cookies, 'cookie','cookies')+'?')

------------------------------

Now lets look at the most complicated cascaded if statement, which according to
the EBNF use more than 0 repetitions and may include the option. A cascaded if
(or cascaded if/else) decides which one (if any) of many  blocks to execute.
So, it looks like

if expression-1:
    block-1
elif expression-2:
    block-2
elif expression-3:
    block-3
elif ...
    ...
elif expression-N:
    block-N

without the final else:   or  (with the final else:)

if expression-1:
    block-1
elif expression-2:
    block-2
elif expression-3:
    block-3
elif ...
    ...
elif expression-N:
    block-N
else:
    block-N+1
  
A cascaded if is built from many matching expressions and blocks. An example
cascaded if statement is

if test_percent &gt;= 90:
    grade = 'A'
elif test_percent &gt;= 80:
    grade = 'B'
elif test_percent &gt;= 70:
    grade = 'C'
elif test_percent &gt;= 60:
    grade = 'D'
else:
    grade = 'F'

Semantically, Python executes a cascaded if statement as follows

  (1) Evaluate expression-1.
  (2) If it is True, execute the block-1 and the cascaded if is finished
      (don't check any more expressions or execute any more blocks in it)
  (3) If it is False, evaluate the expression-2.
  (4) If it is True, execute the block-2 and the cascaded if is finished
      (don't check any more expressions or execute any more blocks in it)
  Continue following rules of this form until some expression evaluates to True
  and its block is executed, or expression-N is evaluated
  (5) If expression-N evalutes to True, execute block-N and the cascaded if is
      finished
  (6) If expression-N evaluates to False and is not followed by else: then
      the cascaded if is finished without executing any block; if it is False
      and is followed by an else:, execute block-N+1 and then the cascaded if is
      finished

So in the cascaded if, exactly one block -the one after after the first 
expression to evaluate to True- is executed; if no expressions evaluates to
True, either no blocks are executed (no else:) or the block following the else:
is executed.

------------------------------------------------------------------------------

Trace tables for if statements

We can extend our use of trace tables to hand simulations of if statements. We
include a special Explanation column to indicate the result of evaluating the
boolean expression, and which block Python executes next. Let's write two trace
tables for hand simulating the first if statement shown above. 

In all these trace tables, we omit Console because no prompting or printing
occurs in these blocks, but technically these should be in the trace tables.

Statement	|  x  |  Explanation
----------------+-----+-------------
Initial State   | -5  |
if x  y:     |     |     |     |     | True: execute next block
min = y       |     |     |  3  |     | 1st block statement
max = x       |     |     |     |  5  | 2nd block statement; block/if finished


Statement     |  x  |  y  | min | max |  Explanation
--------------+-----+-----+-----+-----+---------------
Initial State |  3  |  5  |     |     |
if x &gt; y:     |     |     |     |     | False: execute block after else:
min = x       |     |     |  3  |     | 1st block statement
max = y       |     |     |     |  5  | 2nd block statement; block/if finished


What is the trace table for this example if the values stored in x and y are
equal? Does it produce the correct result? Can you change the relational
operators to &gt;= and still always get the same result? Can there be two
different ways of getting the same result? 

Finally, let's write a trace table for hand simulating the cascaded if
statement shown above.
                           test
Statement               | _percent | grade |  Explanation
------------------------+----------+-------+--------------
Initial State           |    73    |       |
if test_percent &gt;= 90   |          |       | False: check next elif expression
elif test_percent &gt;= 80 |          |       | False: check next elif expression
elif test_percent &gt;= 70	|          |       | True: execute next block
grade = 'C'             |          |  'C'  | only statement in block; block/if
                                           |  finished

------------------------------------------------------------------------------

A clock example

Let's take a quick look at an interesting task that combines all the statements
that we have studied. Assume that we have declared the following names for a
"military" style clock: e.g., 00:00 represents midnight, 9:03 represents 9:03am,
14:23 represents 2:23 pm, and 23:59 represents 11:59pm.

Assume that we have defined the names minute and hour to store values that
are appropriate: 0-59 for minute and 0-23 for hour. Finally, assume that the
following code is called once a minute by the operating system; when you study
Python threads in ICS-32 you will learn how to arrange for such an action to
occur repeatedly: such is very useful for animation.

if minute != 59:
    minute += 1
else:
    print((hour+1)*'Beep ') # simulate a sound by just printing something
    minute = 0
    if hour != 23:
        hour += 1
    else:
        hour = 0

Each time the code is called, it advances the clock by one minute (and hour, if
it is the last minute in the current hour) ensuring that minute and hour store
only legal values; on the hour, the code beeps that many times (once at 1 am,
twice at 2am, ... 12 times at noon, 13 times at 1pm, ..., and 24 times at
midnight). Let's write two trace tables for hand simulating this code in two
different initial situations: first at 10:15 (10:15am).


Statement          | hour | minute | Explanation
-------------------+------+--------+------------------
Initial State	   |  10  |   15   |	 	 
if minute != 59:   |      |        | True: execute next block
minute += 1        |      |   16   | block finished; if/else finished

Here, the minute is incremented by 1, and nothing else happens.

Now lets write a trace table for the initial situation 22:59 (10:59pm).

Statement          | hour | minute | Explanation
-------------------+------+--------+------------------
Initial State      |  22  |   59   |	 	 
if minute != 59:   |      |        | False: execute block after else: in if/else
print(...)         |      |        | 1st statement in block:print beep 23 times	
minute = 0         |      |    0   | 2nd statement in block
if hour != 23:     |      |        | True: execute next block
hour += 1          |  23  |        | block finished; inner if/else finished, and
                                   |   outer if/else finished

Here, much more happens: the clock beeps 23 times (for 11:00pm) and the minute
is reset to 0, while the hour advances to 23. 

------------------------------------------------------------------------------

Pragmatics

When writing decisions, we should first try to determine the correct form we
need: if, if/else, or cascaded if. If we are unsure about which one is correct,
try the simplest forms first. If one doesn't work, the knowledge we gain will
help us with subsequent decisions. Of course we must indent the blocks correctly
otherwise Python will not execute the code (it will raise a SyntaxError 
exception.

The key to understanding an if statement is understanding its boolean
expression(s). Ensure that for some bindings of its names, every test can
evaluate to True, and for other bindings False (otherwise -if the expression is
always True or always False, the expression is probably wrong). For example,
what is wrong with the following code?

Study it carefully and hand simulate it for a few different values of x.

if x &gt; 2 || x = 90:
        return 'A'
    elif test_percent &gt;= 80:
        return 'B'
    elif test_percent &gt;= 70:
        return 'C'
    elif test_percent &gt;= 60:
        return 'D'
    else:
        return 'F'

import prompt
score = prompt.for_int('Enter student score')
print('Student grade =', compute_grade(score))

------------------------------------------------------------------------------

Problems

(1) Assume that we define grade to bind to  a single letter string corresponding
to a UCI grade: 'A', 'B', 'C', 'D', or 'F'. Write an if statement that computes
the number of quality points for that grade and stores it in the name qp: an A
is worth 4, a B is worth 3, a C is worth 2, a D is worth 1, and an R is worth 0.

(2) Assume that we define hours bound to an int. Write an if statement that
computes the pay (in cents) due a worker according the following formulas:
625*hours if the hours worked is less than or equal to 40; 625*Hours + 
725*(hours-40) if the hours worked is greather than 40. Store the result in the
name cents_pay. Try a few examples under, at, and over 40 hours to verify your
if statement is correct.

(3) Assume that we defined two names x and y and bind them to int valuse. Write
a trace table for the hand simulation of the following Python statements: one
where x binds to 3 and y binds to 5; and another where x binds to 5 and y binds
to 3. State whether the results are the same or different in each case.

if x = 60:          if test_percent = 70:        if test_percent = 80:        if test_percent = 90:        if test_percent  