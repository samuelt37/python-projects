 ICS 143 

 

  CS 143B -- WQ 2017       

  

   

  

   

  General
Course Information    

  Office Hours:    

    Instructor   : Lubomir Bic,    bic@ics.uci.edu       
   Office
Hours: by appointment (email), DBH 3224     

    Teaching Assistant   : Tiago Muck,  tmuck@uci.edu        
   Office Hours:  TuTh 
11:30-12:30, DBH 3069        

   Prerequisites   :     

   CS 143A    
   Textbook:    

  L. Bic, A. Shaw,   Operating Systems Principles ,  Prentice-Hall,
     2003 (ISBN: 0130266116)   
   Course Objective:    

  The main
objective is to apply the principles of operating systems studied in CS 143A in
practice. We will design and implement several important components of
a simple operating system.     

  Course Structure:    

  There will be a set of projects
to complete, each dealing with a different part of the operating system. These
will be discussed in class. On the due date, you have to submit the code of
each project and have its functionality tested by running it with a given set
of test data.    

  All work must be done individually;
no team work is allowed.    

  Schedule and
Grading:    

  The
grade will be based entirely on the course projects;  no exams  will be given.  
Final grade is determined as follows:     

   85-100%: A+-   
   70-84%:  
      B+-   
   50-69%:  
      C+-   
     (Each +
or - corresponds to approximately 1/3 of a grade.)  
      

    
   
     Project     
   
   
     Start     
   
   
     Due date (midnight)     
   
   
     Testing date     
   
   
     Percent of final grade     
   
    
   1 
   
   
   Process and Resource  
  Management 
   
   
   Tue 1/10 
   
   
   Sun 2/5 
   
   
   Mon 2/6+ 
   
   
   40% 
   
    
   2 
   
   
   Scheduling  
   
   
   Tue 2/7 
   
   
   Sun 2/26 
   
   
   Mon 2/27+ 
   
   
   30% 
   
    
   3 
   
   
   Virtual Memory 
   
   
   Tue 2/28 
   
   
   Sun 3/19 
   
   
   Mon 3/20+ 
   
   
   30% 
   
            

   Testing:
         

  On or
before due date, submit your code to EEE ( how to
submit to EEE )    

  On the date of testing, there will be specific time
windows during which you need to see the TA to have your program tested (see
the specific protocols for each of the projects below.)    

  Late work:    

  Late work will be
accepted, however, a penalty of 10% per day will be imposed.    

  Plagiarism    

 

  You are not allowed to reuse in
your projects any portion of a design or code developed by another person or
group (during this quarter or any previous quarters). Any violation of this
rule will result in a   final grade of F   for this course.    

 

  Grades     

 

  Grades are posted periodically
via the Electronic Education Environment website:  https://eee.uci.edu/         

 

  

   

  Project-Specific
Information    

  1. Process and
Resource Management    

  Textbook, pages 482-491   
   If you do not have the
      book then this is a pdf copy of the  Project
      Description    
   and the relevant  Chapter
      4    
    Lecture
     Notes  (PowerPoint)   
   Lecture
     1    
   Lecture
     2    
   Lecture
     3    
   Lecture
     4    
   Lecture
     5    
   Shell
     Specification    
  Sample test case: If
     your program reads the following  input 
     file, it should produce a file that looks something like this:  output    
  On due date   
    o   
    Submit the code to
be tested to EEE    

   o   
    Demonstrate
functionality; see  protocol 
for details      

  2. Scheduling     

   Project
     Description    
   Lecture
     Notes  (PowerPoint)   
   Lecture    
  Sample test case: If
     your program reads the following  input 
     file, it should produce a file that looks something like this:  output    
  On due date   
   Submit the code to be
      tested to EEE   
   Demonstrate
      functionality; see  protocol 
      for details     
        

  3. Virtual Memory     

   Project
     Description    
   Lecture
     Notes  (PowerPoint)   
   Lecture
     1    
   Lecture
     2    
   Lecture
     3    
   Lecture
     4    
   Lecture
     5    
  Sample test case:    
    o         The following file initializes the VM:  input1 
    

   o         The following files contains VAs to be translated:  input2     

   o         When not using the TLB, your program should produce the
following file:  output1     

   o         With TLB the output should look like this:  output2     

  On due date, submit:   
    o         Submit the code to be tested to EEE    

   o         Demonstrate functionality; see  protocol 
for details    

       

 

       

 

        

 

</body> 