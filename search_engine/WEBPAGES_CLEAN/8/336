 OTCompiler<body>
  Operation Tables for Scheduling in the Presence of Partial Bypassing 
 
  
   

   

  
  Aviral Shrivastava , 
  Eugene Earlie ,
  Nikil Dutt  , and
  Alex Nicolau  
 


   CODES+ISSS 2005:   Proceedings of the 2005 International Conference on Compilers, 
Architectures and Synthesis for Embedded Systems on Hardware/Software 
Codesign and System Synthesis 


   Abstract:  
Register bypassing is a powerful and widely used feature
in modern processors to eliminate certain data hazards. Although
complete bypassing is ideal for performance, bypassing
has significant impact on cycle time, area, and power
consumption of the processor. Due to the strict constraints
on performance, cost and power consumption in embedded
processors, architects need to evaluate and implement incomplete
register bypassing mechanisms. However traditional
data hazard detection and/or avoidance techniques
used in retargetable schedulers break down in the presence of
incomplete bypassing. In this paper, we present the concept
of Operation Tables, which can be used to detect data hazards,
even in the presence of incomplete bypassing. Furthermore
our technique integrates the detection of both data, as
well as resource hazards, and can be easily employed in a
compiler to generate better schedules. Our experimental results
on the popular Intel XScale embedded processor platform
show that even with a simple intra-basic block scheduling
technique, we achieve upto 20% performance improvement
over fully optimized GCC generated code on embedded
applications from the MiBench suite.
  

      
      Center For Embedded Computer Systems,  
      Department of Information and Computer Science, 
      University of California, Irvine.
       
    
       
      Strategic CAD Labs, 
      Intel Corporation,  
      Hudson, Massachussets.
       
       </body> 