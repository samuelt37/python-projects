 INF 212 - Analysis of Programming Languages<body>
  INF 212 
 Analysis of Programming Languages  

      Synopsis   

          Purpose. 
	    The study of programming languages and their use in software
            systems engineering. See beyond hypes, know the past, grasp fundamental concepts. 

         Textbook:    Exercises in Programming Style   Code:   Github  

         Evaluation. 
        Projects (80%) + Readings (20%) 
        Up to 9 projects+papers:
           Each project is worth up to 80 points 
          Each paper is worth up to 20 points 
             Level 
	       Points 
	       &amp;nbsp 
	       Level 
	       Points 
	       &amp;nbsp 
	       Level 
	       Points 
	       &amp;nbsp 
	       Level 
	       Points 
	       A+  900     B+  765     C+  630     D   495    A   855     B   720     C   585             A-  810     B-  675     C-  540               Course policies:   Policies   
       
        Instructor:  Prof. Cristina Lopes , DBH 5076, lopes
  at   ics   dot   uci
  dot   edu 
Office hours: Mondays 1pm--2pm; Wednesdays 11am-12pm. DBH 5076.
 

 Teaching Assistant:  Matias Giorgio , DBH 5209, mgiorgio
  at   ics   dot   uci
  dot   edu 
Office hours: Thursdays 3pm-5pm, DBH 5209.
 

     Weekly Assignments    

 Submission:  Instructions  


   Project 
     Topic 
     Due date 
     1 
     Sign  Course policies .   Homework Project 1 . 
      Week 1 paper (*)
     
     1/10 
    2 
     Exercises from the book: 3.4, 4.1+4.4, 5.1+5.2, 6.1 (4 files)
      Week 2 paper (*) 
     
     1/17 
    3 
     Exercises from the book: 14.1, 14.2, 15.1, 15.2 (4 files)
      Week 3 paper (*) 
     
     1/24 
     4 
     Exercises from the book: 7.1, 8.1, 9.1 (3 files)
      Week 4 paper (*) 
     
     1/31 
     5 
     Exercises from the book: 20.1, 21.1, 23.1+23.2, 24.1+24.3 (4 files)
      Week 5 paper (*)
     
     2/7 
     6 
     Exercises from the book: 25.1+25.2, 26.1, 27.1+27.2 (3+1 files)
      Week 6 paper (*)
     
     2/14 
     7 
     Exercises from the book: 19.1+19.4, 19.3
      Week 7 paper (*)
     
     2/21 
     8 
     Exercises from the book: 28.1+28.2, 29.1+29.2, 31.1+31.3
      Week 8 paper (*)
     
     2/28 
     9 
     Exercises from the book: 32.1, 33.1
      Week 9 paper (*)
     
     3/7 
     10 
     Extra! 32.2 (5 points) or 32.3 (8 points)
     
     3/14 

     Syllabus:  

  

   
           Week 
       Date 
       Topic  
       Weekly materials 
       Notes 
       1 
       1/5 
       Historical Overview of PLs 
       1.  Turing's Machine  (*) 
	2.  von Neumann's architecture  
	3.  Forth   
        Intro 
       
       1/7 
       
	   Turing Machines   Forth  
       
       2 
       1/12 
       Basics of PLs: control flow, procedures, functions, expressions, statements, side effects, libraries 
       
	1.  Dijkstra's GOTO Considered Harmful  
	2.  McCabe's Complexity metric  
	3.  Dijkstra's Notes  
	4.  Global Variables considered harmful  
	5.  Church's Lambda Calculus  (*) 
	6.  LISP  
	7.  Stratchey's lectures -- semantics   
	8.  Backus' case for functional programming 
    
        Imperative  
       1/14 
        Procedures &amp; Functions 
	   Lambda Calculus 
       
       3 
       1/19* 
       Objects and Object Interactions 
       
	1.  Simula  (*) 
	2.  Smalltalk  
	3.  Self   
	4.  ADTs  
	5.  Inversion of Control in Smalltalk  
	6.  Fowler's Inversion of Control  
	7.  The information bus 
       
       *no class*  
       1/21 
        OOP Basics 
	   Smalltalk 
	   JavaScript 
	   ADTs 
	   Frameworks 
       
       4 
       1/26 
       Function Composition 
       1.  Dijkstra's Recursive Programming  
	2.  The discoveries of continuations  
	3.  Moggi's Monads  
	4.  Wadler's The essence of functional programming  (*)  
        Function Composition  
       1/28 
         
       5 
       2/2 
       Adversity: dealing with the outside world 
       
	1.  Proto-exceptions: error handling in PL/I (pages 105--114) 
	2.  Cardelli's Type Systems  (*)
	3.  Hanenberg's Static vs. Dynamic empirical study 
	4.  Imperative Functional Programming  
	5.  Wadler's How to declare an imperative 
       
        Adversity   
       2/4 
        Type Systems 
      
       6 
       2/9 
       Data-centric: relational model, spreadsheets, reactive, dataflow. Iterators and generators. 

       
	1.  Codd's Relational Model for data banks   (*)
	2.  A Brief History of Spreadsheets 
	3.  Coroutines  
	4.  CLU's "iterators" 
       
        SQL / Spreadsheets 
       
       2/11 
        Iterators, Generators, Coroutines 
       
       7 
       2/16* 
       Reflection and Metaprogramming 
       
	1.  Reflection and Semantics in LISP 
	2.  Concepts and Experiments in Computational Reflection (*) 
	3.  Reflection in logic, functional and OO programming 
	4.  Aspect-Oriented Programming 
	5.  Aspects as latent topics 
	6.  Conic 
	7.  Fowler's Dependency Injection 
       
       *no class* 
       2/18 
         Reflection  
	 Plugins  
       
       8 
       2/23 
       Concurrency 
       1.  Actors 
	2.  Linda   (*)
	3.  CLOS Map/reduce (Chapter 14.2)  
	4.  Google's MapReduce 
       
        Concurrency I  
       2/25 
        Concurrency II  
       9 
       3/2 
       Interactivity 
       
	1.  MVC in Smalltalk 
	2.  REST  and 
	 Fielding's blog post   (*).
       
        Interactivity  
       3/4 
       
           
       
       10 
       3/9 
       Recap 
        
       
       Wrap up    
       3/11 
         
         

  No exam  

   
     Academic Honesty    

 I trust all students are honest and do not cheat. Those who break my trust
at any point will get an F in the course - no excuses or apologies will be
accepted.   Additional penalties may also be imposed by the
department and the university. Very severe incidents of academic dishonesty can
result in suspension or expulsion from the university.   

     Students with Disability    

 Any student who feels he or she may need an accommodation based on the
impact of a disability should contact me privately to discuss his or her
specific needs. Also contact the Disability Services Center at (949) 824-7494
as soon as possible to better ensure that such accommodations are implemented
in a timely fashion. 
</body> 