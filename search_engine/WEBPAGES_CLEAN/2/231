 #ifndef DRIVER_MAP_HPP_
#define DRIVER_MAP_HPP_

#include 
#include 
#include 
#include 
#include "ics46goody.hpp"
#include "ics_exceptions.hpp"
#include "array_map.hpp"


namespace ics {

typedef ics::pair     MapEntry;
typedef ics::ArrayMap MapType;

class DriverMap {
  public:
    DriverMap(){process_commands("");}

  private:
    MapType m;

    MapType prompt_map(std::string preface, std::string message = "  Enter element for m2") {
      MapType m2;
      for (;;) {
        std::string k = ics::prompt_string(preface + message + "key (QUIT to quit)");
        if (k == "QUIT")
          break;
        std::string v = ics::prompt_string(preface + message + "value");
        m2.put(k,v);
      }
      return m2;
    }

    std::string menu_prompt (std::string preface) {
      std::cout " " " " "  line_2 = ics::split(line,";");
          std::string k = line_2[0];
          std::string v = line_2[1];
          m.put(k,v);
        }
        in_set.close();
      }

      else if (command == "l{") {
        m = MapType({MapEntry("a","1"), MapEntry("b","2"), MapEntry("c","3"), MapEntry("d","4"), MapEntry("e","5")});
      }

      else if (command == "it")
        process_iterator_commands(m, "it:  "+preface);

      else if (command == "q")
        break;

      else
        std::cout  