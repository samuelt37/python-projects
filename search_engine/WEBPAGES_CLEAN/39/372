 Python: module SCORE<body>

           SCORE</strong>       index   /home/dock/programs/MOL2/SCORE.py       
 
         Modules</strong>                  
     re     sys             
         Classes</strong>                  
     __builtin__.dict ( __builtin__.object )
   
    score 
     scorelist 
    
   __builtin__.list ( __builtin__.object )
   
    headerclass 
    
   scorelist_iter 
    
        class  headerclass</strong> ( __builtin__.list )              
   Method resolution order: 
  headerclass  
  __builtin__.list  
  __builtin__.object  
  
Methods defined here:     __init__</strong> (self, line ='' )      __str__</strong> (self)      abut</strong> (self, other)   
Data and other attributes defined here:    __dict__</strong> = &lt;dictproxy object&gt;   dictionary for instance variables (if defined)      __weakref__</strong> = &lt;attribute '__weakref__' of 'headerclass' objects&gt;    list  of weak references to the object (if defined)    
Methods inherited from  __builtin__.list :     __add__</strong> (...)   x. __add__ (y) &lt;==&gt; x+y       __contains__</strong> (...)   x. __contains__ (y) &lt;==&gt; y in x       __delitem__</strong> (...)   x. __delitem__ (y) &lt;==&gt; del x[y]       __delslice__</strong> (...)   x. __delslice__ (i, j) &lt;==&gt; del x[i:j] 
  
Use of negative indices is not supported.       __eq__</strong> (...)   x. __eq__ (y) &lt;==&gt; x==y       __ge__</strong> (...)   x. __ge__ (y) &lt;==&gt; x&gt;=y       __getattribute__</strong> (...)   x. __getattribute__ ('name') &lt;==&gt; x.name       __getitem__</strong> (...)   x. __getitem__ (y) &lt;==&gt; x[y]       __getslice__</strong> (...)   x. __getslice__ (i, j) &lt;==&gt; x[i:j] 
  
Use of negative indices is not supported.       __gt__</strong> (...)   x. __gt__ (y) &lt;==&gt; x&gt;y       __hash__</strong> (...)   x. __hash__ () &lt;==&gt; hash(x)       __iadd__</strong> (...)   x. __iadd__ (y) &lt;==&gt; x+=y       __imul__</strong> (...)   x. __imul__ (y) &lt;==&gt; x*=y       __iter__</strong> (...)   x. __iter__ () &lt;==&gt; iter(x)       __le__</strong> (...)   x. __le__ (y) &lt;==&gt; x&lt;=y       __len__</strong> (...)   x. __len__ () &lt;==&gt; len(x)       __lt__</strong> (...)   x. __lt__ (y) &lt;==&gt; x&lt;y       __mul__</strong> (...)   x. __mul__ (n) &lt;==&gt; x*n       __ne__</strong> (...)   x. __ne__ (y) &lt;==&gt; x!=y       __repr__</strong> (...)   x. __repr__ () &lt;==&gt; repr(x)       __rmul__</strong> (...)   x. __rmul__ (n) &lt;==&gt; n*x       __setitem__</strong> (...)   x. __setitem__ (i, y) &lt;==&gt; x[i]=y       __setslice__</strong> (...)   x. __setslice__ (i, j, y) &lt;==&gt; x[i:j]=y 
  
Use  of negative indices is not supported.       append</strong> (...)   L. append (object) -- append object to end       count</strong> (...)   L. count (value) -&gt; integer -- return number of occurrences of value       extend</strong> (...)   L. extend (iterable) -- extend  list  by appending elements from the iterable       index</strong> (...)   L. index (value, [start, [stop]]) -&gt; integer -- return first index of value       insert</strong> (...)   L. insert (index, object) -- insert object before index       pop</strong> (...)   L. pop ([index]) -&gt; item -- remove and return item at index (default last)       remove</strong> (...)   L. remove (value) -- remove first occurrence of value       reverse</strong> (...)   L. reverse () -- reverse *IN PLACE*       sort</strong> (...)   L. sort (cmpfunc=None) -- stable sort *IN PLACE*; cmpfunc(x, y) -&gt; -1, 0, 1    
Data and other attributes inherited from  __builtin__.list :    __new__</strong> = &lt;built-in method __new__ of type object&gt;   T. __new__ (S, ...) -&gt; a new object with type S, a subtype of T       
        class  score</strong> ( __builtin__.dict )              
   Method resolution order: 
  score  
  __builtin__.dict  
  __builtin__.object  
  
Methods defined here:     __init__</strong> (self, header =None , data =[] )      __str__</strong> (self, printunknown =True )      abut</strong> (self, other)      hasUnknown</strong> (self)      key</strong> (self)   
Data and other attributes defined here:    __dict__</strong> = &lt;dictproxy object&gt;   dictionary for instance variables (if defined)      __weakref__</strong> = &lt;attribute '__weakref__' of 'score' objects&gt;    list  of weak references to the object (if defined)    
Methods inherited from  __builtin__.dict :     __cmp__</strong> (...)   x. __cmp__ (y) &lt;==&gt; cmp(x,y)       __contains__</strong> (...)   x. __contains__ (y) &lt;==&gt; y in x       __delitem__</strong> (...)   x. __delitem__ (y) &lt;==&gt; del x[y]       __eq__</strong> (...)   x. __eq__ (y) &lt;==&gt; x==y       __ge__</strong> (...)   x. __ge__ (y) &lt;==&gt; x&gt;=y       __getattribute__</strong> (...)   x. __getattribute__ ('name') &lt;==&gt; x.name       __getitem__</strong> (...)   x. __getitem__ (y) &lt;==&gt; x[y]       __gt__</strong> (...)   x. __gt__ (y) &lt;==&gt; x&gt;y       __hash__</strong> (...)   x. __hash__ () &lt;==&gt; hash(x)       __iter__</strong> (...)   x. __iter__ () &lt;==&gt; iter(x)       __le__</strong> (...)   x. __le__ (y) &lt;==&gt; x&lt;=y       __len__</strong> (...)   x. __len__ () &lt;==&gt; len(x)       __lt__</strong> (...)   x. __lt__ (y) &lt;==&gt; x&lt;y       __ne__</strong> (...)   x. __ne__ (y) &lt;==&gt; x!=y       __repr__</strong> (...)   x. __repr__ () &lt;==&gt; repr(x)       __setitem__</strong> (...)   x. __setitem__ (i, y) &lt;==&gt; x[i]=y       clear</strong> (...)   D. clear () -&gt; None.  Remove all items from D.       copy</strong> (...)   D. copy () -&gt; a shallow copy of D       get</strong> (...)   D. get (k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None.       has_key</strong> (...)   D. has_key (k) -&gt; True if D has a key k, else False       items</strong> (...)   D. items () -&gt;  list  of D's (key, value) pairs, as 2-tuples       iteritems</strong> (...)   D. iteritems () -&gt; an iterator over the (key, value) items of D       iterkeys</strong> (...)   D. iterkeys () -&gt; an iterator over the keys of D       itervalues</strong> (...)   D. itervalues () -&gt; an iterator over the values of D       keys</strong> (...)   D. keys () -&gt;  list  of D's keys       pop</strong> (...)   D. pop (k[,d]) -&gt; v, remove specified key and return the corresponding value 
If key is not found, d is returned if given, otherwise KeyError is raised       popitem</strong> (...)   D. popitem () -&gt; (k, v), remove and return some (key, value) pair as a 
2-tuple; but raise KeyError if D is empty       setdefault</strong> (...)   D. setdefault (k[,d]) -&gt; D. get (k,d), also set D[k]=d if k not in D       update</strong> (...)   D. update (E) -&gt; None.  Update D from E: for k in E. keys (): D[k] = E[k]       values</strong> (...)   D. values () -&gt;  list  of D's values    
Data and other attributes inherited from  __builtin__.dict :    __new__</strong> = &lt;built-in method __new__ of type object&gt;   T. __new__ (S, ...) -&gt; a new object with type S, a subtype of T      fromkeys</strong> = &lt;built-in method fromkeys of type object&gt;    dict . fromkeys (S[,v]) -&gt; New  dict  with keys from S and values equal to v. 
v defaults to None.       
        class  scorelist</strong> ( __builtin__.dict )              
   Method resolution order: 
  scorelist  
  __builtin__.dict  
  __builtin__.object  
  
Methods defined here:     __init__</strong> (self)      __iter__</strong> (self)      __len__</strong> (self)      abut</strong> (self, other, keepunknowns =False )   Equivalent to an SQL join, this function abuts two scorelists  
using columns specified by  scorelist .header.key       add_column</strong> (self, name, col, description ='' )      append</strong> (self, score)      append_list</strong> (self, other)   Appends an interable of scores to this  scorelist . 
  
Does not add columns to the header. This must be done diretly through the header class.       delete_column</strong> (self, name)      ensure_column</strong> (self, key)      get_column</strong> (self, name)   Gets a column of data. Use this rather than  scorelist ['columnname'].       get_score</strong> (self, n)   Get's a  score  from the  list  by it's index.       idx_of</strong> (self, searchfor ='KNOWN' )   Return a  list  of tuples (index, match_object),  
containing comments that match the 'searchfor' regular expression. 
  
Match objects returnd can be use to extract row specific information from each index.  
E.g. searchfor="pKi (?P&lt;pki&gt;.*)$" would allow you query the match objects using the group method for  
'pki', parsing comments like '// pKi 5.83'.       len</strong> (self)      makedict</strong> (self, key ='NAME' )   Utility function that adds a attribute ' dict ' containing a mapping of names to indexes.       mark_list</strong> (self, comment ='' )   Simple function to annotate top of  scorelist  with comments applying to the whole  list . 
  
All comment lines begin with '//' which is automatically prepended by this function.  
All  list  modifying functions should produce annotation. Comments stored in self. comment</strong>.       mark_score</strong> (self, key, value, comment)   Simple function to annotate specific element of  scorelist  with a comment pinned to it. 
  
Regular expressions are permitted. 
All comment lines begin with '//' 
comments stored in self. comments</strong>.       print2file</strong> (self, file, printunknown =True )   Use this to print a  scorelist  to a file. 
  
We don't implement __str__ because this object can be quite large and it make sense to print directly to file.       read</strong> (self, file)      readmol2</strong> (self, molseq, getFingerprint =False , bits =512 )      set_column</strong> (self, name, col)      sort</strong> (self, key ='NAME' )   Sort based on a key. 
  
Automatically tries to convert data to float unless an exception is raised.       transform_column</strong> (self, name, transform_function, description =None )   Applies transform_function to every element of a particular column.    
Data and other attributes defined here:    __dict__</strong> = &lt;dictproxy object&gt;   dictionary for instance variables (if defined)      __weakref__</strong> = &lt;attribute '__weakref__' of 'scorelist' objects&gt;    list  of weak references to the object (if defined)    
Methods inherited from  __builtin__.dict :     __cmp__</strong> (...)   x. __cmp__ (y) &lt;==&gt; cmp(x,y)       __contains__</strong> (...)   x. __contains__ (y) &lt;==&gt; y in x       __delitem__</strong> (...)   x. __delitem__ (y) &lt;==&gt; del x[y]       __eq__</strong> (...)   x. __eq__ (y) &lt;==&gt; x==y       __ge__</strong> (...)   x. __ge__ (y) &lt;==&gt; x&gt;=y       __getattribute__</strong> (...)   x. __getattribute__ ('name') &lt;==&gt; x.name       __getitem__</strong> (...)   x. __getitem__ (y) &lt;==&gt; x[y]       __gt__</strong> (...)   x. __gt__ (y) &lt;==&gt; x&gt;y       __hash__</strong> (...)   x. __hash__ () &lt;==&gt; hash(x)       __le__</strong> (...)   x. __le__ (y) &lt;==&gt; x&lt;=y       __lt__</strong> (...)   x. __lt__ (y) &lt;==&gt; x&lt;y       __ne__</strong> (...)   x. __ne__ (y) &lt;==&gt; x!=y       __repr__</strong> (...)   x. __repr__ () &lt;==&gt; repr(x)       __setitem__</strong> (...)   x. __setitem__ (i, y) &lt;==&gt; x[i]=y       clear</strong> (...)   D. clear () -&gt; None.  Remove all items from D.       copy</strong> (...)   D. copy () -&gt; a shallow copy of D       get</strong> (...)   D. get (k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None.       has_key</strong> (...)   D. has_key (k) -&gt; True if D has a key k, else False       items</strong> (...)   D. items () -&gt;  list  of D's (key, value) pairs, as 2-tuples       iteritems</strong> (...)   D. iteritems () -&gt; an iterator over the (key, value) items of D       iterkeys</strong> (...)   D. iterkeys () -&gt; an iterator over the keys of D       itervalues</strong> (...)   D. itervalues () -&gt; an iterator over the values of D       keys</strong> (...)   D. keys () -&gt;  list  of D's keys       pop</strong> (...)   D. pop (k[,d]) -&gt; v, remove specified key and return the corresponding value 
If key is not found, d is returned if given, otherwise KeyError is raised       popitem</strong> (...)   D. popitem () -&gt; (k, v), remove and return some (key, value) pair as a 
2-tuple; but raise KeyError if D is empty       setdefault</strong> (...)   D. setdefault (k[,d]) -&gt; D. get (k,d), also set D[k]=d if k not in D       update</strong> (...)   D. update (E) -&gt; None.  Update D from E: for k in E. keys (): D[k] = E[k]       values</strong> (...)   D. values () -&gt;  list  of D's values    
Data and other attributes inherited from  __builtin__.dict :    __new__</strong> = &lt;built-in method __new__ of type object&gt;   T. __new__ (S, ...) -&gt; a new object with type S, a subtype of T      fromkeys</strong> = &lt;built-in method fromkeys of type object&gt;    dict . fromkeys (S[,v]) -&gt; New  dict  with keys from S and values equal to v. 
v defaults to None.       
        class  scorelist_iter</strong>            
  Iterator implemented as a seperate class from  scorelist   
so different position information can be held by seperate iterators.         
 Methods defined here:     __init__</strong> (self, scorelist)      next</strong> (self)         
         Functions</strong>                  
     isComment</strong> (line)      isData</strong> (line)      isHeader</strong> (line)      mol2scorereader</strong> (mol2seq, getFingerprint =False , bits =512 )      scorereader</strong> (file)     </body> 