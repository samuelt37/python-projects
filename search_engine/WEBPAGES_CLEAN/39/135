 Inheritance

This is the first of three lectures on inheritance. This lecture discusses the
general principles involved in defining classes in an inheritance hierarchy and
using the hierarchy to find attributes of objects (both methods and data). It
focuses on the rules needed to understand single inheritance, showing an
example using counters. The second lecture discusses multiple inheritance and
generalizes these rules; it actually includes code that illustrates how class
objects (not objects constructed from classes) reference each other in an
inheritance hierarchy, and how attributes are found by Python in complicated
inheritance hierarchies. The third lecture discusses various concrete uses of
inheritance and how we can use inheritance to simplify real programming.

Just an inheritance (of money) makes the life of descendants easier,
inheritance (of attributes: methods and data) makes writing derived classes
easier.

------------------------------------------------------------------------------

Class Inheritance in Python

At present we know about defining classes and constructing objects that are
instances of classes (and assigning them attributes). We have explored various
relationships between an object and the class from which it was constructed
(including adding attributes to objects after they are constructed and adding
attributes to classes after they are defined).

We have studed the Fundamental Equation of Object-Oriented Programming (FEOOP)
to determine how Python locates attributes for objects, mostly meaning how
methods are called on objects: by first trying to locate the attribute in the
object itself, and if that fails, locating the attribute in the class from
which the object was constructed. Objects mostly store their own state
attributes (data), while the classes they are constructed from mostly store
their behavior attributes (methods): shared by all objects of that class. So,
objects keep their own state but typically share the methods that operate on
them; sometimes, though, objects can store special methods that apply only to
them. Also, class objects can store state that is shared (as methods are
shared: recall the examples of a person class storing a fingers attribute of
10, while individual people objects store a fingers attribute if they have
fewer or more than 10 fingers).

To get to full object-oriented programming, we must also learn how to define
derived classes from base classes (aka create subclasses from superclasses)
and learn how objects constructed from these derived/sub classes behave in
regards to inherited state and behavior: specifically, we will learn that all
classes are defined in an inheritance hierarchy and learn how attibutes of
instance objects can found by searching the objects themselves first, and if
needed search the inheritance hierarchy.

Fundamentally, what inheritance is about is writing small derived classes that
reuse attributes from base classes in a natural way. The attribute location
process is captured by augmenting the meaning of The Fundamental Equation of
Object-Oriented Programming for class inheritance hierarchies (below we discuss
a simple extension for single-inheritance, which is the most common kind of
inheritance; in the next lecture we discuss the more complicated but complete
extension for multiple inheritance).

We can define a trivial class with no state/behavior (not even an __init__
method) in Python by just writing

  class C:
      pass

Note the lack of parentheses after the class name C (just a colon). This means
that the class C is implicitly a class derived from the "object" class (yes,
there is a class named "object" in Python: try x = object() and print(x)); the
object class acts as the root of Python's inheritance hierarchy. The object
class itself is defined in the builtins module and serves as the base class by
default of any classes defined with no explicitly specified base class.

In fact, this class defines very many methods (e.g.,  __repr__, __setattr__,
etc.). We can call the repr function (which calls the __repr__ method) on
objects constructed from classes that don't define __repr___ and Python will
still find a __repr__ method to call. Because, if we do not define such methods
in our classes, they are inherited; when we do define a method like __repr__ in
a derived class, it overrides (see this term defined and explained below) the
 __repr__ method inherited from the "object" class.

If we want to specify one or more different base classes when definining a
class, we must put their names between the parentheses, separated by commas.

So, the meaning of class C: -with no parentheses- is the same as

  class C(object):
      pass

In both cases we illustrate the base/derived inheritance relationship with the
simple hierarchy: the derived class refers upward to its direct base class.

    object
       ^
       |
       C

There actually is a reference in the derived class C to the base class
"object" which we will use in the next lecture: the arrow's direction is
meaningful: the derived class refers to the base class it was derived from
(not the other way around).

Note that many other classe that we know inherit only from the object class
(e.g., list, set, and dict), and we shall soon see that defaultdict inherits
from dict). Here is how we show the inheritance hierarchy of these classes.

                 object
              ^     ^     ^
             /      |      \
           list    set    dict
                           ^
                           |
                      defaultdict

If we use only single-inheritance the resulting inheritance hierarchy is an
N-ary tree with object at its root. Derived classes are children of their base
classes. Note that the derived classes can themselves be base classes of other
derived classes (e.g., dict is a derived class form object, but a base class for
defaultdict). Eventually (tracing upward from any class towards the root of the
inheritance hierarchy) -following arrows from a derived class to its base class-
will lead upward in the inheritance tree until the root (the object class) is
reached. The situation gets a bit more complicated when multiple-inheritance is
allowed (more details in the next lecture).

So in this lecture we will being seeing class definitions like

  class Derived_Class(Base_Class):			# single-inheritance

and in the next lecture like

  class Derived_Class(Base_Class1, Base_Class2, ...):	# multiple-inheritance

Many languages support just single-inheritance (a derived class can have only
one direct base class: Java and Smalltalk are examples of such languages) but
Python (like C++) supports multiple inheritance: a derived class can have many
direct base classes. Once we understand the general principal of locating
attributes in a single-inheritance hierarchy, we can generalize the look up
rules for multiple-inheritance hierarchies (where our knowledge of pre-order
traversal, from the lectures on trees, will be important to our understanding;
forgot what that was? go back and read about it).

Finally, note an asymmetry: a derived class specifically states the name of
(and refers to) its base classes, but a base class says nothing about (and
doesn't refer to or know anything about) its derived classes. There is no way
for a base class to know what derived classes will inherit from it: the
inheritance mechanism (for locating attributes) allows derived classes to
access attributes in their base classes, but base classes cannot access
attributes in their derived classes.

------------------------------------------------------------------------------

The Fundamental Equation of Object-Oriented Programming
(generalized for single-Inheritance)

At present we know that instance objects refer to the class objects they are 
constructed from, and we can use the type function on any instance to return a
reference to the class object that it was constructed from. When we look up an
attibute of an instance, Python first looks for the attribute in the namespace
of the instance object itself, but it if doesn't find the attribute there, it
looks for the attribute in the class the object was constructed from. We
captured this rule in the Fundamental Equation of Object-Oriented Programming
(shown again below) in its current form, but soon expanded for inheritance.

So, if m is a method (or "a" is any attribute), we have seen that if the
method/attribute is not stored directly in o's __dict__, accessing it is
equivalent to

  o.m(...)  -&gt; type(o).m(o,...) for method attributes
  o.a       -&gt; type(o).a        for data attributes

When locating a method attribute for instance o, if it is not found in o itself
(it typically isn't) Python uses the attribute in the type(o) class: the class
o was constructed from, calling that method with o as the first argument (which
is why methods defined in classes all have the first parameter named self). By
this mechanism, an object doesn't need to store in its own namespace all the
methods that operate on it. The methods are mostly stored (and shared) in the
class object for the instance object, and located there as needed.

This mechanism works for non-method attributes too: if any data attribute is not
found in the instance object's namespace (although state is typically found
there), Python will try to locate it by using the namespace of the class the
instance object was constructed from. So, it is possible for objects to share
data in its class's namespaces, just as methods are shared.

A useful example of data sharing might occur in a Person class. Suppose that
we need to store how many fingers every Person (object constructed from that
class) has. We could store this information by adding an attribute to every
Person object (e.g., person1.fingers = 10). But the vast majority of people
have 10 fingers, so we could store Person.fingers = 10 (an attribute in the
Person class). Now if we don't store the fingers attribute in the person1
object, it will be found in the Person class object, with value 10. If person1
has fewer than 10 fingers, we can store person1.fingers = 9; now, for person1,
the fingers attribute will be found in the object itself, not in its class.
Using this approach, we can save space by storing the fingers attribute only
for people not having 10 fingers (likely to be a small percentage of all the
people objects). If the fingers attribute is found in the person1 object, then
the Person class object is not searched. What would happend if we we somewhere
executed Person.fingers += 1.

We now generalize this look up mechanism for single-inheritance hierarchies:

 1) Python first tries to find the attribute in the instance object.

 2) If Python fails, it next tries to find the attribute in the class object
      from which the instance was constructed (the type function provides this
      information: we can compute the class from which any objects is
      constructed).

 3) If Python fails, it tries to find the attribute in the base class of the
      class from which the instance was constructed;

 4) If Python fails, it next tries to find it in the base class of that class,
      ... and continues until it reaches the object class.

 5) If Python fails to find the attribute in the object class, it raises an
      AttributeError exception.

Pictorally, where Python looks for an o.attribute

                                   object                        o    --&gt;     class		   = 0,\
            'Counter.__init__ init_value('+str(init_value)+') = 1,\
            'Modular_Counter.__init__ modulus('+str(init_value)+') = 0 representing the counter's value. It
verifies this property of init_value first, and then increments counter_base.

So, understand the following difference: the Counter class object stores the
attributes hierarchy_depth and counter_base attribute (as well as all the other
method attributes). Each object constructed from the Counter class stores its
own _value attribute (and shares the attributes in the Counter class through
use of the Fundamental Equation of Object-Oriented Programming).

(4) __str__ is a query that returns a string representing the Counter object's
_value attribute.

(5) reset is a command that resets the Counter object's _value attribute to 0

(6) inc is a command that increases the Counter object's _value attribute by 1

(7) value_of is a query that returns the _value attribute of the Counter object
The difference between (4) and (7) is that (4) returns a str while (7) returns
an int.

Using the code in main, we can construct and experiment with objects from the
Counter class: looking up state/calling methods on c (an object already
constructed in the code) or constructing more Counter objects and doing the
same on them. For example, try

c = Counter(0) 	    	 # OK

print(c.hiearchy_depth)	 # prints 1
print(c.counter_base)	 # prints 1 (because c = ...; FEOOP for data attribute)

c.inc()			 # OK; uses FEOOP for method attribute
c.inc()			 # OK; uses FEOOP for method attribute
c.inc()			 # OK; uses FEOOP for method attribute

print(c)		 # prints 3 via calling __str__ on c, using FEOOP
print(c.value_of())	 # prints 3 via calling str(c.value_of()), using FEOOP


----------

The Modular_Counter derived class

Now we will move on to discussing the Modular_Counter class, a speciialization
of the Counter class: a Modular_Counter IS-A special kind of Counter. We will
classify every attribute usable in this class as

(a)a new attribute defined in the class (not an inherited attribute)

(b)an inherited attribute (not defined/overridden)

(c)an inherited attribute (re)defined in the class (OVERRIDING an inherited one)

These last two options rely on an understanding of what it means for a derived
class to override an inherited attribute. A derived class overrides an inherited
attribute if it defines an attribute (using the same name) as an attribute it
inherits: one already defined in its base class, the base class of its base
class, etc. all the way back to the object class at the root of the inheritance
hierarchy, which defines lots of double-underscore methods.

When we describe the Modular_Counter class below, we will discuss all its
defined  attributes in these terms. Generally a modular counter is a special
kind of counter. In fact, derived classes are often specializations of base
classes: but for inheritance to be natural, all operations on the base class
must make sense on the derived class too, although the derived class may change
the meaning of (override) the inherited attributes and define new attributes.

So a base class and its derived class are in an IS-A relationship. The derived
class IS-A special kind of base class: The Modular_Counter is a special kind of
Counter, where all the operations on Counter objects also make sense on
Modular_Counter counter objects.

Modular counters can store values between 0 up to but not including the modulus
(so the biggest a value can get is modulus-1): think of a counter for strikes
in baseball as a modulus 3 counter. A batter goes from 0 strikes to 1 strike
to 2 strikes to being out, with the next batter starting again back at 0
strikes. Or the digits in a car odometer go from 0 to 9 and then back to 0 again
(with a carry to the next digit) so they are a modulus 10 counter.

The Modular_Counter class defines two class names storing state:
hierarchy_depth is (c), which doesn't change; counter_derived is (a) which is
incremented in __init__); the class method named __init__ is (c), __str__ 
is (c), inc is (c), and modulus_of is (a). It also inherits and does not
override (all are b) the attributes counter_base, reset, and value_of.

(1) hierarchy_depth is an int representing the depth of the Modular_Counter
class in the N-ary inheritance tree: it is 2, because it is derived from the
Counter class, whose depth is 1.

(2) counter_derived is an int that counts how many times __init__ in the
Modular_Counter class is called (in this two-class hirerarchy, it is called
only when we construct Modular_Counter objects).

(3) __init__ initalizes each Modular_Counter object to have two pieces of state:
first, an int that remains unchanged and must be &gt;= 1 representing the
counter's modulus; second, an int that is always (so it must start) &gt;= 0 and
 