 Documentation<body>
  
     
     
      
       Cloudberry 
     

     
        
            
            





 Home 

           
        
        
        
           
             Demo 
             
              
                
                  
            





 TwitterMap 

                
              
             
           
        
        
        
           
             Resources 
             
              
                
                  
            





 Documentation 

                
              
                
                  
            





 GitHub 

                
              
             
           
        
        
        
           
            
            





 News 

           
        
        
        
           
            
            





 About 

           
        
        
        

	
	 
	   
	     
	        
	   
	 
	

   
 
   
     
       
         
           Documentation 
		  
		  
		  
         
       
     
   
 
 
   
     
       Quick Start 

 Now letâs checkout the code and run a TwitterMap demo on your local machine!
You will need   sbt   to compile the project.
 This demo requires at least 4G memory . 

  Clone the code 
    git clone https://github.com/ISG-ICS/cloudberry.git
  
 

  Compile the project 
    cd cloudberry; sbt compile
  
 

  
     Prepare the AsterixDB cluster:
Cloudberry runs on an Apache AsterixDB cluster.
You can set up a small AsterixDB cluster locally by using the prebuilt AsterixDB  docker image . 

      Install  Docker  (&gt;1.10) on your local machine. 
       Simply run the following command in the  cloudberry  folder to create an AsterixDB cluster locally.
  
 ./script/dockerRunAsterixDB.sh
  
      
   
     Ingest 324,000 sample tweets to AsterixDB. 
   
    ./script/ingestTwitterToLocalCluster.sh
  
 

  Finally run 
    sbt "project neo" "run"
  
 

 You should see the TwitterMap webpage on your localhost:  http://localhost:9000 . 

  Please notice that the first time you open the page, it could take several minutes (depending on your machine) to load the front-end data.
If you see the following messages from the console, it means the loading process is done and you can play with the front-end now!  

   ...
[info] application - I'm initializing
[info] play.api.Play - Application started (Dev)
  
 

 Concepts 
 The Cloudberry system provides an optimization framework to speed up visualization-oriented OLAP queries on  AsterixDB . 

 The following document uses an already ingested AsterixDB Twitter dataset to illustrate how to set up the Cloudberry system on the dataset. 

   create type typeUser if not exists as open {
   id: int64,
   name: string,
   screen_name : string,
   lang : string
}

create type typeGeoTag if not exists as open {
   stateID: int32,
   countyID: int32,
   cityID: int32?
}

create type typeTweet if not exists as open{
   create_at : datetime,
   id: int64,
   coordinate: point?,
   "text": string,
   favorite_count : int64,
   retweet_count : int64,
   lang : string,
   hashtags : { {string } } ?,
   user_mentions : { { int64 } } ? ,
   user : typeUser,
   geo_tag: typeGeoTag
}
  
 

 Data Schema 
 Front-end developers need to tell Cloudberry which dataset to query and how the dataset looks like so that it can utilize the Cloudberry optimization techniques. 

 The data set schema declaration is composed of five distinct components. 

   Dataset name and its type</strong> : the data set name to access AsterixDB. 
    Dimensions</strong> : the columns to do âgroup byâ on. They are usually the x-axis in a visualization figure. 
    Measurements</strong> : the columns to apply the aggregation functions on, such as  count() ,  min() ,  max() . They can also be used to filter the data but they should not be used as âgroup byâ keys. 
    Primary key</strong> : the primary column name. 
    Time field</strong> : the time column name. 
  The following JSON request can be used to register the Twitter dataset inside AsterixDB to the middleware. 

    {  
    "name"  :  "twitter.ds_tweet"  ,  
    "schema"  :{  "typeName"  :  "twitter.typeTweet"  ,  
      "dimension"  :[  
        {  "name"  :  "create_at"  ,  "isOptional"  :  false  ,  "datatype"  :  "Time"  },  
        {  "name"  :  "id"  ,  "isOptional"  :  false  ,  "datatype"  :  "Number"  },  
        {  "name"  :  "coordinate"  ,  "isOptional"  :  false  ,  "datatype"  :  "Point"  },  
        {  "name"  :  "lang"  ,  "isOptional"  :  false  ,  "datatype"  :  "String"  },  
        {  "name"  :  "hashtags"  ,  "isOptional"  :  true  ,  "datatype"  :  "Bag"  ,  "innerType"  :  "String"  },  
        {  "name"  :  "geo_tag.stateID"  ,  "isOptional"  :  false  ,  "datatype"  :  "Number"  },  
        {  "name"  :  "geo_tag.countyID"  ,  "isOptional"  :  false  ,  "datatype"  :  "Number"  },  
        {  "name"  :  "geo_tag.cityID"  ,  "isOptional"  :  false  ,  "datatype"  :  "Number"  },  
        {  "name"  :  "geo"  ,  "isOptional"  :  false  ,  "datatype"  :  "Hierarchy"  ,  "innerType"  :  "Number"  ,  
          "levels"  :[  
            {  "level"  :  "state"  ,  "field"  :  "geo_tag.stateID"  },  
            {  "level"  :  "county"  ,  "field"  :  "geo_tag.countyID"  },  
            {  "level"  :  "city"  ,  "field"  :  "geo_tag.cityID"  }]}  
      ],  
      "measurement"  :[  
        {  "name"  :  "text"  ,  "isOptional"  :  false  ,  "datatype"  :  "Text"  },  
        {  "name"  :  "favorite_count"  ,  "isOptional"  :  false  ,  "datatype"  :  "Number"  },  
        {  "name"  :  "retweet_count"  ,  "isOptional"  :  false  ,  "datatype"  :  "Number"  }  
      ],  
      "primaryKey"  :[  "id"  ],  
      "timeField"  :  "create_at"  
    }  
  }  
   
 

  Note :
Fields that are not relevant to the visualization queries are not required to appear in the schema declaration. 

 Data Types 
 Cloudberry supports the following data types: 

   Boolean</strong> : the same  Boolean  type as in AsterixDB. 
    Number</strong> : a superset to include all  int8 ,  int32 ,  int64 ,  float ,  double  datatypes in AsterixDB. 
    Point</strong> : the same  point  type as in AsterixDB. Currently, we only support geo-location points. 
    Time</strong> : the same  datetime  type as in AsterixDB. 
    String</strong> : same as the  string  type in AsterixDB. It usually is an identity name which is used to do filtering and âgroup byâ. 
    Text</strong> : it is the  string  type as in AsterixDB. The attribute has to be a  measurement  and can only be used to do filtering by a full-text search. Usually, it implies there is an inverted-index built on the field. 
    Bag</strong> : the same  set  type as in AsterixDB. 
    Hierarchy</strong> : A synthetic field that defines hierarchical relationships between the existing fields. 
  Pre-defined functions 

    Datatype 
       Filter 
       Groupby 
       Aggregation 
         Boolean 
       isTrue, isFalse 
       self 
       distinct-count 
       Number 
       &lt;, &gt;, ==, in, inRange 
       bin(scale) 
       count, sum, min, max, avg 
       Point 
       inRange 
       cell(scale) 
       count 
       Time 
       &lt;, &gt;, ==, inRange 
       interval(x hour) 
       count 
       String 
       contains, matchs, ~= 
       self 
       distinct-count, topK 
       Text 
       contains 
       Â  
       distinct-count, topK (on word-token result) 
       Bag 
       contains 
       Â  
       distinct-count, topK (on internal data) 
       Hierarchy 
       Â  
       rollup 
       Â  
        Format of requests to the middleware 
 After defining the dataset, the front-end can send a JSON request to query it.
A request is composed of the following parameters: 

   Dataset</strong> : the dataset to query on. 
    Unnest</strong> : to flatten a record based on the nested  Bag  attribute to generate multiple records. 
    Filter</strong> : a set of selection predicates. 
    Group</strong> :
       by</strong> : to specify the âgroup byâ fields. 
        aggregate</strong>: to specify the aggregation functions to apply, such as  min  and  max . 
      
    Select</strong>: to provide  order  or  project  options. It should be mainly used for sampling purposes. A  limit  field should be given. A  offset  field enables pagination. 
  Examples 

  Get the per-state and per-hour count of tweets that contain âzikaâ and âvirusâ in 2016. 
     {  
    "dataset"  :     "twitter.ds_tweet"  ,  
    "filter"  :     [  
      {  
        "field"  :     "create_at"  ,  
        "relation"  :     "inRange"  ,  
        "values"  :     [     "2016-01-01T00:00:00.000Z"  ,     "2016-12-31T00:00:00.000Z"  ]  
      },  
      {  
        "field"  :     "text"  ,  
        "relation"  :     "contains"  ,  
        "values"  :     [     "zika"  ,     "virus"     ]  
      }  
    ],  
    "group"  :     {  
       "by"  :     [  
          {  
            "field"  :     "geo.state"  ,  
            "as"  :     "state"  
          },  
          {  
            "field"  :     "create_at"  ,  
            "apply"  :     {  
              "name"  :     "interval"  ,  
              "args"  :     {  
                "unit"  :     "hour"  
              }  
            },  
            "as"  :     "hour"  
          }  
        ],  
       "aggregate"  :     [  
         {  
           "field"  :     "*"  ,  
           "apply"  :     {  
             "name"  :     "count"  
           },  
           "as"  :     "count"  
         }  
        ]  
    }  
  }  
   
 

  Get the top-10 related hashtags for tweets that mention âzikaâ 
     {  
    "dataset"  :     "twitter.ds_tweet"  ,  
    "filter"  :     [  
    {  
      "field"  :     "text"  ,  
      "relation"  :     "contains"  ,  
      "values"  :     [     "zika"  ]  
    }  
    ],  
    "unnest"     :     [{     "hashtags"  :     "tag"  }],  
    "group"  :     {  
      "by"  :     [  
        {     "field"  :     "tag"     }  
      ],  
      "aggregate"  :     [  
        {  
          "field"     :     "*"  ,  
          "apply"     :     {  
            "name"  :     "count"  
          },  
          "as"     :     "count"  
        }  
      ]  
    },  
    "select"     :     {  
      "order"     :     [     "-count"  ],  
      "limit"  :     10  ,  
      "offset"     :     0  
    }  
  }  
   
 

  Get 100 latest sample tweets that mention âzikaâ. 
     {  
    "dataset"  :     "twitter.ds_tweet"  ,  
    "filter"  :     [{  
      "field"  :     "text"  ,  
      "relation"  :     "contains"  ,  
      "values"  :     [     "zika"  ]  
    }],  
    "select"     :     {  
      "order"     :     [     "-create_at"  ],  
      "limit"  :     100  ,  
      "offset"     :     0  ,  
      "field"  :     [  "create_at"  ,     "id"  ]  
    }  
  }  
   
 

 Request options 

 Cloudberry supports automatic query-slicing on the  timeField . The front-end can specify a response time limit for each âsmall queryâ to get the results progressively.
For example, the following option specifies that the front-end wants to slice a query and the expected response time for each sliced âsmall queryâ is 2000 ms. 

    {  
   ...  
   "option"  :{  
     "sliceMillis"  :     2000    
   }  
  }  
   
 

 Format of multiple requests 
 Sometimes the front-end wants to slice multiple queries simultaneously so that it can show multiple consistent results. In this case, it can wrap the queries inside the  batch  field and specify only one  option  field. 

    {  
    "batch"     :     [  
      {     request1     },  
      {     request2     }  
    ],  
    "option"     :     {  
      "sliceMillis"  :     2000    
    }  
  }  
   
 

 Advanced users 

 Some applications may require a multi-node AsterixDB cluster.
You can follow the official  documentation  to set it up. 

 After the cluster is set up, you should make the following changes 

  Change the AsterixDB NC name for feed connection 
  In the script  ./script/ingestTwitterToLocalCluster.sh , line 86: 

   ("sockets"="my_asterix_nc1:10001")
  
 

 where  my_asterix  is the name of your cluster instance, and  nc1  is the name of one NC node. 

  Modify the AsterixDB hostname 
  In configuration file  neo/conf/application.conf , chang the  asterixdb.url  value to the previously set AsterixDB CC RESTFul API address. 

   asterixdb.url = "http://localhost:19002/aql"
  
 


	    
     
   
 


     
     
       
          
             
               
                  
                  
               
             
           
          
		  
           
             
               
                  
                  
               
             
           
          
	  
      
		  
           
             
               
                  
                  
               
             
           
          
		  
		  
		  
      
      
      
      
		  
          
		  Cloudberry
		   • 
		  2017

		  
		   • 
		   cloudberry.ics.uci.edu 
		  
	     
	        
		 
		  Theme by
		   beautiful-jekyll 
		 
       
     
   
</body> 