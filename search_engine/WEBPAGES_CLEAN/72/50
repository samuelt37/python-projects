 Outline<body>

 
 Outline for ICS-21 Written Final Exam 
 
  
  

I have collected together in this one handout the list of topics that we have
  covered in the second half of ICS-21.
This list is quite extensive (not as long as for the first half of the course,
  but the topics are a bit more subtle and have many connections with each
  other and the material that we studied earlier), and there is no way that I
  can ask questions covering all of it; likewise, there is no way that you can
  learn all this material starting now (I'm assuming that you've been learning
  it during the entire quarter).
  
Therefore, you should concentrate on reviewing the most important analysis and
  synthesis skills that we have studied.
Use the quizzes (and to a lesser extent the programming assignments and daily
  homework assignments) as a guide for what material is of primary importance.
Understand the material on its own terms, and how to use this material when
  writing code.
  
My written exams are not designed to determine if you understand obscure
   material; instead, they are designed to determine if you understand
  important material, and can use your knowledge to understand and answer
  questions  quickly .
My exams are long (some students will not finish them): it you don't
  immediately know the answer to a question, skip it, and come back to it
  later, if you have time (sometimes working problems later in the exam will
  remind you of something relevant to the answer to earlier questions).
  
 Important: Recall  that the final exam can also cover topics from the
   first half of the course.
   I would suggest reviewing the the earlier quizzes and midterm exam.
   Fundamentally, the second "half" of the quarter dealt with writing classes,
     using arrays, and using interfaces.
   Here is a  Topics from the first half
     of the class  link.
  


  Outline of Lecture Topics 


  Static Methods  Definitions (including parameter/argument terminology)
    The  return  statement
    Hand simulation via call frames (primitive and reference variables)
    Constant/final parameters
      Writing Static Methods in Classes  The main method
    Writing methods in applications
    Writing methods in libraries (like  SUM )
    Throwing exceptions with  String  arguments indicating the problem:
         e.g.,  IllegalArgumentException ,  IllegalStateException 
    Eclipse tools (editor/debugger) and their connection to  static 
        methods
      Writing Classes  Defining constructors, methods, fields
    Name conflicts (between parameters/locals and instance variables) and
       the meaning and uses of  this .
    Writing constuctors (name conflicts, the special use of  this )
    Writing methods (illustrating  this , the implicit parameter, in
        call frames) 
    Defining fields: instance variables vs. static fields; initialization of
        both
    Eclipse tools (editor/debugger) and their connection to methods/instance
         variables
      Array Classes  Declaring arrays and constructing array objects
    Accessing arrays: members via subscripting ( [] ) and the
         length  instance variable
    Processing arrays:  for  loops and variants
    How Strings are like arrays (e.g.,  length  and  charAt 
        methods
    Methods processing arrays; arrays as arguments/parameters to methods
    Drawing array objects
    Eclipse tools (debugger) and its connection to arrays
      Generalizing Collections: The  Object  class  The  Object  class
    Wrapper classes and the  Object  class
    Reference casting
    The instanceof operator
    An RPN Calculator using Stack
    Priority Queues (from programming assignment #7)
    Drawing complicated objects (whose instance variables are reference to
        other objects).
      Arrays in Classes  non-filled arrays: the  top / rear / used  instance
        variable; the   doubleLength / trim ) methods
    Processing non-filled arrays in methods: scanning, rearranging members

      Implementing Collections via Arrays in Classes  Collections in general
    Stacks and LIFO processing (RPN calculators)
    Queues and FIFO processing
      Interfaces  Interfaces are types; how they are declared
    How classes implement interfaces
    Calling methods on variables whose types are interfaces
    Simple uses: filters in prompting, functions to integrate (and later,
        priority queues)
    Storing "interfaces" (really, objects constructed from classes
       implementing interfaces) in instance variables
       </body> 