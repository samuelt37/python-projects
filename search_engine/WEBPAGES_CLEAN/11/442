 Recursion


In this lecture we will discuss the concept of recursion and examine recursive
functions that operate on integers, strings, and lists, learning common idioms
for each. As with other topics discussed this quarter, I want to ensure that you
have a deliberate and deep understanding of recursion.

The concept of recursively defined (sometimes called inductively defined) data
types and recursion is fundamental in many areas of computer science, and this
concept should be discussed from many angles in many of your ICS classes; you
should become comfortable with seeing and applying recursion. In addition, some
programming languages (Lisp and Haskell are the foremost examples) use
recursion (and also decision: if) as their primary control structures: any
iterative code can be written recursively (and recursion is even more powerful
than iteration, as we glimpsed in the EBNF lecture). Even languages that are
not primarily recursive all support recursion (and have since the late 1960s),
because sometimes using recursion is the best way to write code to solve a
problem: best often means simplest, but sometimes it can mean most efficient
too.

Python (and C/C++/Java) are not primarily recursive languages. Each has strong
features for iterating through data (Python has the most powerful tools for such
iteration, including generators). But, it is important that we learn how to
write recursive code in Python too. Later in the quarter (next week) we will
recursively define the linked list and binary tree data structures and see how
to manipulate them, both iteratively (for some functions) and recursively (for
all functions). In ICS-46 we will revisit these data structures (and more) many
times using C++, and again see how we can manipulate them both iteratively and
recursively.

Douglas Hofstadter's Pulitzer-prize winning book, "Godel, Escher, Bach" is an
investigation of cognition, and commonly uses recursion and self-reference to
illustrate the concepts it is discussing. It is a fascinating book and because
it is old, can be purchased quite cheaply as a used book.
http://www.amazon.com/G%C3%B6del-Escher-Bach-Eternal-Golden/dp/0465026567
(at least read some small reviews of this book here).

------------------------------------------------------------------------------

Recursion vs Iteration

Recursion is a programming technique in which a call to a function results in
another call to that same function. In direct recursion, a call to a function
appears in the function's body; in indirect/mutual recursion, the pattern is
some function calls some other function ... which ultimately calls the first
function. Think of f calling g and g calling f: f and g are mutually recursive
with f calling f indirectly via g, and g calling g indirectly via f.

For some data structures (not many built-into Python) and problems, it is
simpler to write recursive code than its iterative equivalent. In modern
programming languages, recursive functions may run a bit slower (maybe 5%) than
equivalent iterative functions, but this is not always the case (and sometimes
there is no natural/simple iterative solution to a problem); in a typical
application, this  time is insignificant (most of the time will be taken up
elsewhere anyway).

We will begin by studying the form of general recursive functions; then apply
this form to functions operating on int values, and then apply this form to
functions operating on strings and lists. In all these cases, we will discuss
how values of these types are recursively defined and discuss the natual
"sizes" of the problem solved.

To start, suppose that we have the problem of collecting $1,000.00 for charity,
with the assumption that when asked, everyone is willing to chip in the
smallest amount of money: a penny.

Iterative solution : visit 100,000 people, and ask each for a penny

Recursive solution:  if you are asked for a penny, give a penny to this person
                     otherwise
                        visit 10 people and ask them each to collect 1/10 the
                          amount that you are asked to raise;
                        collect the money they give you into one bag;
                        give this bag to the person who asked you

In the iterative version each subproblem is the same; raising a penny. In the
recursive solution, subproblems get smaller and smaller until they reach the
problem of collecting a penny (they cannot get any smaller: this problem has the
smallest size because there is no smaller currency).

The general form of a directly recursive function is

def Solve(Problem):
  if (Problem is minimal/not decomposable into a smaller problem: a base case)
    Solve Problem directly and return solution; i.e., without recursion
  else:
    (1) Decompose Problem into one or more SIMILAR,
        STRICTLY SMALLER subproblems: SP1, SP2, ... , SPn

    (2) Recursively call Solve (this function) on each smaller subproblem
        (since they are similar): Solve(SP1), Solve(SP2),..., Solve(SPN)

    (3) Combine the returned solutions to these smaller subproblems into a
        solution that solves the original, larger Problem (the one this
        function call must solve)
  
    (4) Return the solution to the original Problem

------------------------------------------------------------------------------

Simple Recursion in Python:

We will start by examining a recursive definition for the factorial function
(e.g., 5! reads as "five factorial") and then a recursive function that
implements it. The definition is recursive because we define how to compute a
big factorial in terms of computing a smaller factorial. Note that the domain
of the factorial function is the non-negative integers (also called the natural
numbers), so 0 is the smallest number on which we can compute factorial.

   0! = 1
   N! = N*(N-1)!  for all N&gt;0, 

By this definition (and just substitution of equals for equals) we see that

  5! = 5*4! = 5*4*3! = 5*4*3*2! = 5*4*3*2*1! = 5*4*3*2*1*0! = 5*4*3*2*1*1

We have eliminated all occurrences of !, so we can use just * to compute
5! = 5*4*3*2*1*1 = 120.

The first definition below is a transliteration of the general code above,
decomposing it into just one similar (factorial) but simpler (n-1) subproblem.

def factorial (n):
    if n == 0:
        return 1
    else:
        sub_problem        = n-1 
        solved_sub_problem = factorial(sub_problem)
        solved_n           = n*solved_sub_problem
        return solved_n

The next definition is a simplification of how this function should really be
written in Python, without all the intermediate names, which are not needed and
don't really add clarity.

def factorial (n):
    if n == 0:
        return 1
    else:
        return n*factorial(n-1)

This definition looks clean and closely mirrors the recursive mathematical
description of  factorial. In fact, because of the simplicity of this
particular recursive function, we can write an even simpler solution using a
conditional expression; but I prefer the solution above, because it is more
representative of other recursive solutions (to more complicated problems).

def factorial (n):
    return 1 if n == 0 else n*factorial(n-1)

We can contrast the recursive code with the iterative code that implements the
factorial function

from goody import irange
def factorial (n):
    answer = 1;
    for i in irange(2,n)
        answer *= i
    return answer

Note that this function defines two local names (answer and i) and binds 1 to
answer and rebinds it to a new value during each execution of the for loop's
body. Likewise, i is rebound to a sequence of values produced when the function
iterates over the irange(2,n). The recursive function defines no local names and
doesn't rebind any names (although each recursive call binds an argument to the
parameter in the new recursive function call).

Rebinding the values of names make it hard for us to think about the meaning of
code (they make it tougher to prove that the code is correct too), and makes it
hard for multi-core processors to coordinate in solving a problem. "Functional
programming languages" (those that allow binding of a name to computed value,
but no rebinding to that names) are more amenable to be automatically
parallelizable (can run more quickly on multi-core computers). You'll see more
about this in later classes at UCI (e.g., Concepts of Programming Languages).

We can mimic factorial's recursive definition for a function that raises a
number to an integer power. Note that the domain of n for this power function
requires n to be a natural number (a non-negative integer).

  A**0 = 1             (yes, this is even true when A=0)
  A**N = A * A**(N-1)  for all N&gt;0

So A**4 = A * A**3 = A*A * A**2 = A*A*A * A**1 = A*A*A*A * A**0 = A*A*A*A*1

We can likewise translate this definition into a simple recursive Python
function

def power(a,n):
    if n == 0:
        return 1
    else:
        return a*power(a,n-1)

By this definition (and just substitution of equals for equals) we see that
calling power(a,n) requires n multiplications.

   power(a,3) = a*power(a,2) = a*a*power(a,1) = a*a*a*power(a,0) = a*a*a*1


Of course we could write this code iteratively as follows, which also requires
n multiplications

def power(a,n):
    answer = 1
    for i in irange(1,n):
        answer *= a
    return answer

But there is a another way to compute power(a,n) recursively, shown below. This
longer function requires between Log2 n and 2*Log2 n multiplications. Here Log2
means the log function using a base of 2. Note Log2 1000 is about 10 (2**10 =
1,024), so Log2 1,000,000 is about 20, Log2 1,000,000,000 is about 30): so, to
compute power(a,1000) requires between 10 and 20 multiplications (not the 1,000
multiplcations required by the earlier definitions of power).

def power(a,n):
    if n == 0:
        return 1
    else:
       if n%2 == 1:
           return a*power(a,n-1)
       else:
           temp = power(a,n//2)
           return temp*temp

Here we bind temp once and then use its value, which is fine for functional
programming. We could get rid of the local name temp completely by defining the
local function def square(n): n*n inside power and then calling it in the else
clause: return square( power(a,n//2) )

def power(a,n):
    def square(n): return n*n
    if n == 0:
        return 1
    else:
       if n%2 == 1:
           return a*power(a,n-1)
       else:
           return square( power(a,n//2) )


For one example
    power(a,16) computes power(a,8) and returns its result with 1 more
    multiplication; power(a,8) computes power(a,4) and returns its result with
    1 more multiplication; power(a,4) computes power(a,2) and returns its
    result with 1 more multiplication; power(a,2) computes power(a,1) and
    returns its result with 1 more multiplication; power(a,1) computes
    a*power(a,0), which requires 1 multiplication: computing power(a,0)
    requires 0 multiplications (it just retuns a value).

    In all, power(a,16) requires just 5 multiplications, not 16. Note that this
    function is NOT guaranteed to always use the minimum number of
    multiplications. Power(a,15) uses 6  multiplication, but by computing
    x3 = x*x*x then x3*(square(square(x3))) requires only 5: see the topic
    named "addition-chain exponentiation" if you are interested in what is
    known about the minimimal number of multiplications required for
    exponentiation. No simple algorithms solves this problem in the minmum
    number of multiplications. 

We will prove that this function computes the correct answer later in this
lecture. Truth be told, we can write a fast power function like this
iteratively too, but it looks much more complicated and is much more
complicated to analyze its behavior and prove that it is correct.

------------------------------------------------------------------------------

Hand Simulation

Next, we will learn how to hand-simulate a recursive functions using a "tower of
call frames" in which each resident in an apartment executes the same code
(acting as the function) to compute a factorial: he/she is called by the
resident above and calls the resident underneath, when a recursive call is
needed (calling back the resident above when their answer is computed). While
it is useful to be able to hand-simulate a recursive call, to better understand
recursion, hand-smulation is not a good way to understand or debug recursive
functions (the 3 proof rules discussed below are a better way). I will do this
hand simulation on the document camera, using the following form for computing
factorial(5).

      Factorial Towers
    +-----------------+
    | n =             |
    | return ...      |
    +-----------------+
    | n =             |
    | return ...      |
    +-----------------+
    | n =             |
    | return ...      |
    +-----------------+
    | n =             |
    | return ...      |
    +-----------------+
    | n =             |
    | return ...      |
    +-----------------+
    | n =             |
    | return ...      |
    +-----------------+
    | n =             |
    | return ...      |
    +-----------------+
     ...

------------------------------------------------------------------------------

Proof Rules for Recursive Functions

Now, we will learn how to verify that recursive functions are correct by three
proof rules. Even more important than proving that existing functions are
correct (to better understand them), we will use these same three proof rules
to guide us when we synthesize new recursive functions.

Note that in direct recursion, we say that the function "recurs", not that it
"recurses". Recurses describes what happens when you hit your thumb with a
hammerbang the second time. Programmers who use the word recurse are not
well-spoken.

The three proof rules should be simple to apply in most cases. These rules
mirror rules for proofs by induction in mathematics.

(1) Prove that the base case (smallest) problem is processed correctly.
    Should be easy, because base cases are tiny and their solutioins simple.

(2) Prove that each recursive call gets closer to the base case.
    Should be easy because there are "standard" ways to recur: ints decrease by
    1 or a factor of 10 (i.e., x//10 has one fewer digit; x%10 has one digit);
    Strings, tuples, and lists recur on a slices (fewer characters, fewer
    values).

(3) ASSUMING ALL RECURSIVE CALLS SOLVE THEIR SMALLER SUBPROBLEMS CORRECTLY,
    prove that the code combines these solved subproblems correctly, to solve
    Problem(the parameter of the function).
    Should be easy, because we get to assume something very important and
    powerful: all subproblems are solved correctly.

Here is a proof, using these 3 rules, that the factorial function is correct:

1) The base case is 0; and according to the recursive mathematical definition,
0! = 1. This function recognizes an argument of 0 and returns the correct value
1 as the result.

2) If n is a non-negative number that is not 0 (not the base case), then this
function makes one recursive call: n-1 is closer to 0 (the base case) than n is.
It is closer by 1: the distance between n-1 and 0 is 1 less than the distance
between n and 0.

3) ASSUMING factorial(n-1) COMPUTES (n-1)! CORRECTLY, this function returns
n*factorial(n-1), which is n*(n-1)! by our assumption, which according to the
mathematical definition is the correct answer for n!, the parameter to the
function call.

Notice that the focus of the proof is on ONE call of the function (not like the
hand simulation method above). We look at what happens if it is a base case (1)
or if it actually recurs (2-3). For the recursive case, we don't worry about
more recursive calls, because we get to assume that any further recursive calls
(on smaller problems, which might be the base case or at least closer to the
base cases) compute the correct answer WITHOUT HAVING TO THINK about what
happens during any recursive calls.

Proof that fast-power function is correct (the code is duplicated from above):

def power(a,n):
    def square(n): n*n
    if n == 0:
        return 1
    else:
       if n%2 == 1:
           return a*power(a,n-1)
       else:
           return square( power(a,n//2) )

1) The base case is 0; and according to the recursive mathematical definition,
a**0 = 1. This function recognizes an argument of 0 and returns the correct
value 1 for it.

2) If n is a non-negative number that is not 0 (not the base case), then if
n is odd, n-1 is closer to 0 (the base case) than n is; if n is even (it must
be &gt;= 2), n//2 is also closer to 0 (the base case) than n is.

3) ASSUMING power(a,n-1) COMPUTES a**(n-1) CORRECTLY AND power(a,n//2) COMPUTES
a**(n//2) CORRECTLY. We know that any n must be either odd or even: if n is odd,
this function returns a*a**(n-1), so it returns (by simplifying) a**n, which is
the correct answer for the parameters to this function; likewise, if n is even,
this function returns the value square(a**(n//2)), which returns (by
simplifying) a**n, which is the correct answer for the parameters to this
function. For all even numbers n, n//2 is half that value, with no truncation:
for example, for n the even number 10, square (a**(10//2)) = square (a**5) =
(a**5)**2 = a**10.

Again, the focus of the proof is on one call of the function: the parts concern
only the base case and the recursive case (now two cases, depending on whether
or not n is odd or even): and for the recursive cases, we don't worry about more
recursive calls, because we get to assume that any recursive calls (on smaller
problems, closer to the base cases) compute the correct answer  without having
to think about what happens during the recursion.

What happens if we write factorial incorrectly? Will the proof rules fail. Yes,
for any flawed definitions one will fail. Here are three examples (one failure
for each proof rule).

def factorial (n):
    if n == 0:
        return 0			# 0! is not 1
    else:
        return n*factorial(n-1)

This factorial function violates the first proof rule. It returns 0 for the
base case; since everything is multiplied by the base case, ultimately this
function always returns 0. Bar bet: you name the year and the baseball team,
and I will tell you the product of all the final scores (last inning) for all
the games they played that year. How do I do it and why don't I make this kind
of bet on basketball teams?

def factorial (n):
    if n == 0:
        return 1
    else:
        return factorial(n+1)//(n+1)    # n+1 not closer to base case: 0

This factorial function violates the second proof rule. It recurs on n+1, which
is farther away from -not closer to- the base case. Although mathematically
(n+1)!/(n+1) = (n+1)*n!//(n+1) = n! this function will continue calling
factorial with ever-larger arguments: a runaway (or infinite) recursion.
Actually, each recursive call can take up some space (to store its argument, see
the hand simulation, which requires binding an argument for each recursive
call), so eventually memory will be exhausted and Python will raise an 
exception.

Actually, Python limits the the number of times any recursive function can
call itself. We can examine/set the recursion limit by importing the sys module
and the calling sys.getrecursionlimit()/sys.setrecursionlimit(some number)
functions.

def factorial (n):
    if n == 0:
        return 1
    else:
        return n+factorial(n-1)         # n+(n-1)! is not n!

This factorial function violates the third proof rule. Even if we assume that
factorial(n-1) computes the correct answer, this function returns n added (not
multiplied) by that value, so it does not return the correct answer. In fact,
it returns one more than the sum of all the integer from 1 to n (because for 0
it returns 1) not the product of these numbers.

In summary, each of these functions violates a proof rule and therefore doesn't
always return the correct value. The first function always returns the wrong
value; the second function returns the correct value, but only for the the base
case; it never returns a value for any other argument; the third function
returns the correct value, but only for the the base case.

----------
Interlude: Proving the Proof Rules

We can actually prove that these proof rules are correct! Here is the proof.
This is not simple, but it is short so I will write the proof here and let you
think about it (and reread it a dozen times if you need to).

Assume that we have correctly proven that these three proof rules are correct
for some recursive funtion f. And assume that we assert that the function is
not correct. We will show that these two assertions lead to a contradiction.
First, if f is not correct, then there must be some problems that it does not
correctly solve. And, if there are any problems that f does not solve correctly,
there must be a SMALLEST problem that it does not solve correctly: call this
problem p.

Because of proof rule (1) we know that p cannot be the base case, because we
have proven f recognizes and solves base cases correctly. So, f must solve p by
recursion. Since f solves p by recursion, it first recursively solves a problem
smaller than p: we know by proof rule (2) that it always recurs on a smaller
problem size; and we know that f correctly solves this smaller problem, because
p, by definition, is the smallest problem that f solves incorrectly. But we
also know by proof (3) that assuming f solves all problems smaller than p (which
it does, because p is the smallest problem f does not solve correctly), then
f will use these solutions of smaller problems to solve the problem p correctly.

Therefore, it is impossible to find a smallest problem that f incorrectly
solves; so, f must solve all problems correctly.

Well, that is how the proof goes.
----------

------------------------------------------------------------------------------

Mathematics Recursively

We can construct all the mathematical and relational operators on natural
numbers (integers &gt;= 0) given just three functions and if/recursion. We can
recursively define the natural numbers as:

   0 is the smallest natural number
   for any natural number n, s(n) (the successor of n: n+1) is a natural number

Now we define three simple functions z(ero), p(redecessor), and s(uccessor).

def z(n):		# z(n) returns whether or not n is 0
    return n == 0

def s(n):		# s(n) returns the successor to n (n+1)
    return n+1

def p(n):		# p(n) returns the predecessor of n, if one exists
    if not z(n):	# 0 has no predecessor
        return n-1
    else:
        raise ValueError('z: cannot compute predecessor of 0')

Note we should be able to prove/argue/understand the following:

z(s(n)) is always False
p(s(n)) is always n
s(p(n)) is n if n != 0 (otherwise p(n) raises an exception)

Given these functions, we can define functions for all arithmetic (+ - * // **)
and relational ( == =2), then both n//10 and n%10 will have fewer
digits: n//10 has d-1 digits and n%10 has 1 digit. 

We get to assume that the recursive call correctly returns the string
representation of these numbers.

def to_str(n):
    if 0= 0 (see call with abs)
        if 0= 0 else '-')+to_str1(abs(n))
    # or
    #return (to_str1(n) if n &gt;= 0 else '-'+to_str1(-n))

In fact, the following function uses the same technique (but generalizes it by
converting to an arbitrary base) to compute the string representation of a
number in any base from binary up to hexadecimal: to_str(11,2) returns '1011'

def to_str(n,base=10):                          # bases 2 - 16
    if 0= to the value preceding it).

6. Define the function equals(s1,s2), which computes whether two strings are ==
without ever comparing more than 1-character strings.

7. Write less_than(s1,s2) which computes whether s1  