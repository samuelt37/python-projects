 ICS 52 Syllabus Fall 2004<body>    Information and Computer Science 52:   Introduction to Software Engineering Fall Quarter, 2004   Location:   Engineering Lecture Hall 100    (Need  a  map ?)   Monday, Wednesday, Friday, 10:00-10:50   Course code:    36290   Discussion location:  SSH 100    Monday, Wednesday 5:00 -- 5:50    Course code for discussion section:    36291    (Last modified Monday, November 29, 2004)      WHAT'S NEW?   [November29, 2004] This week's lecture notes are now available.     Overview  | Textbooks  | Schedule  | Assignments  | TAs  | Keeping in Touch  | Computing  | Disabilities  |   Academic Dishonesty  |     Instructor    Professor   Richard N. Taylor              Electronic Mail: taylor &lt;at-sign&gt; ics.uci.edu         Office:           ICS2-203            Office Phone: (949) 824-6429          Hours: Monday and Wednesday: 11:00-12:00 pm.  Please make appointments           by  email</strong>, however, in order to guarantee the meeting.           Fax: (949) 824-1715      Mailing Address:         Donald Bren School of Information    and Computer Sciences ,    University of California, Irvine        Irvine, California 92697-3425         Overview and Prerequisite Knowledge   From the UCI Catalog:      Introduction to the concepts, methods, and current practice of software engineering.     The study of large-scale software production; software lifecycle models as     an organizing structure; principles and techniques appropriate for each stage     of production. Laboratory work involves a project illustrating these elements.       Prerequisite : ICS 23 with a grade of C or better.    In addition to  the skills and concepts introduced in previous classes,   students should have these computing skills when they enter the class (or learn   them independently in the first week of the quarter):    The use of a text editor (Word, etc.) to create documents.     The use of a drawing package (Power Point, Visio, etc.) to create graphics     for these documents.    The instructional objectives for the course are as follows:     introduce you to the discipline of software engineering;      experientially acquaint you with one version of the software lifecycle;      provide working knowledge of at least one reasonable technique to be applied     in each phase of the lifecycle;      provide particular insight into software architecture, design by information     hiding, and the problems of software analysis and testing.       Minimum Knowledge and Skills Expected of Students Who Receive Passing Grades      Software Life Cycle    Mastery:       Knowing different life cycles and their appropriateness in different         situations         Knowing basic principles of software engineering (such as separation         of concerns, modularity, and abstraction) and knowing how they apply throughout         the software life cycle         Proficiency:       Understanding tradeoffs and relationships among the various activities         in the software life cycle         Understand the meaning and use of a set of basic software qualities          Requirements    Mastery:       Interviewing a customer to elicit requirements         Writing a textual (non-formal) requirements document         Proficiency:       Understand the structure of a requirements document and know the appropriate         kinds of information in such a document          Architectural Design    Mastery:       Know the differences among interaction patterns of a set of basic architectural         styles         Understand the difference between architecture and module design         Proficiency:       Choosing an appropriate architectural style for a particular problem                Module Design   Mastery:       Using provided/exported and required/imported interfaces to define module         boundaries         Identifying and defining modules in a design         Identifying and defining abstract data types in a design         Proficiency:       Applying coupling, cohesion, fan-in, and fan-out         Creating USES and COMPRISES diagrams         Exposure:       Creating a design for a nontrivial, sizable problem          Programming   Mastery:       General rules of programming style and clarity (short rehash from earlier         classes)         Proficiency:       Mapping a module design onto an implementation in source code         Exposure:       Using existing modules and libraries in an implementation         Coding under a heavy deadline (requiring tradeoffs between code quality         and code functionality)          Testing    Proficiency:       Testing a program for failures         Applying white-box testing on short pieces of code         Applying black-box testing on short pieces of code         Exposure:       Understanding the many dimensions of software quality assurance         Understanding the inspection and code walk-through process                 Textbooks  Required:    Software Engineering, Principles and Practice </strong>, by Hans    van Vliet. Second Edition. $75.00 new at the bookstore; $56.25 used. ISBN    0-471-97508-7    The class notes will (usually) be available on the WWW after the class    meeting in which they are used. Occasionally the notes will be available    ahead of    time,        but they might be from the previous year's offerings, and thus minor differences     may exist as compared to what's used in class this year.       Schedule (  Subject to change)            Week            Dates           Lecture topic           Schedule Notes           Assignments             Readings</strong> (all from van Vliet, unless         noted otherwise)        1  September 24, 27, 29            Introduction                           Chapters 1, 2, and 3                         Processes          Slides from 1st Discussion section                                 2  October 1, 4, 6                                     Principles &amp; Requirements Engineering                   and here's the slides I used for my  keynote           talk at STRAW '01                    Requirements assignment issued           Section 11.1           Chapter 9                                   Requirements Engineering            (URL here is to Sommerville's slides from his Chapter 7)           Slides from discussion section  (10/6)           Example      requirements document  (from FQ 02)                      3  October 8, 11, 13          Architectures          Slides from discussion (10/11)                  Chapter 10                Architectures          Slides from 10/13 discussion           Example requirements document  (Unical)                        4   October 15, 18, 20          Design                    Requirements assignment due          10/18, in discussion.            Design assignment issued     Chapter 11                 Design, continued            QuiltsRUs example            Flight control example            Eric Dashofy's slides on the C2-style           examples           of module descriptions             ICS 52 standard design notation  (though not for C2 designs)          5         October 22, 25, 27         Design                                     UI            Design   (these are Sommerville's slides,      which I'll be using)                                              Chapter 16               6        October 29, November 1, 3                Review on the 29th and 1st.                                            Mid-term Exam , on November          3                                  Here's the  midterm          exam  and solution notes from a couple of years ago.          Here's this quarter's  solution key .          7                                                                    November 5, 8, 10                No class on 11/5.            Integration testing and Implementation         issues                             Design (Arch and module interfaces)             due Nov. 8th.             Implementation assignment issued.            Testing assignment issued .                       8        November 12, 15, 17                Testing                             Chapter 13                                               9  November 19, 22, 24           Quality assurance                           Testing assignment (yes, that 's right, testing) due 11/24                                                                                   10   November 29, December 1, 3                 Maintenance and Configuration         Mgmt.                                  Chapter 4                Course Review                    Implementation assignment due.                        Exams         Monday, December 6th    FINAL EXAM           10:30 - 12:30</strong>                        The exam is comprehensive.Here's  a sample  from the past.            Assignments and Assessment   Aggregate grade for the project: 45%.    Midterm: 20%.   Final: 35%   The project consists of four assignments. Their relative weighting ( as   a percentage of your final grade ) is as follows:              Assignment        Weight </strong>            Requirements        10         Architecture and module         interfaces           Design Addendum           Required Notation          18          Implementation         7        Testing        10   </strong></strong>     Specific assignments will be placed on the web, giving the assignment, the   required format, and specific grading criteria.   Strictly speaking, we do not grade on a curve, meaning that we will not assert  in advance that half of the class will receive grades at or below a C+, and  half above that. Grading is done based on mastery of the material as exhibited  in the exams and the project. If everyone masters the material very well, then  everyone will get an A. On the other hand, if no one were to master the materialat all adequately, then everyone would receive an F. But grades are adjusted  to suit the difficulty of the exams and the assignments. If an exam turns out  to be a real bear, then the threshold for an A will be much lower than for  an exam that was piece of cake.   NO LATE ASSIGNMENTS WILL BE ACCEPTED, unless you have a legible excuse from aphysician, an extreme family emergency, or unless you are willing toaccept an extreme penalty with respect to your assignment's grade.        Teaching Assistant and Readers   TA:   Justin Erenkrantz         Office: ICS2-246. Note: this building is locked, so to gain entry you        need to either make an appointment ahead of time (by email) or phone        (824-2776)         Hours: MW 3:30 - 5:00        Reader:       TBD              Keeping in Touch   Check this web site regularly. This is the definitive location for course  information.  Announcements concerning assignments will be made here. The course  mailing list  will also be used to make announcements, provide instructions,  and so on. The  course mailing list will be "read only" from the  student's perspective.  I.e. the instructor, TA, and readers can post messages  to the list, but not students.  If you ask one of us a question whose answer  is relevant to the rest of the  class, we'll post the appropriate material  to the list.  An important note about email   Any email that you send in conjunction with this class   must be sent from a UCI account. That is, if you want any response or action   taken, then you must use your UCI account to send the email. Email from yahoo,   hotmail, juno, cox, or any other non-UCI site will be ignored.       Computing    All computing will be done on the department's lab machines.   You may use another computer to produce the documents you turn in. ( No    handwritten assignments allowed).   All implementation work will be done in Java.  Please use the computing equipment for instructional purposes only.Also watch out on the social subtleties of electronic mail.     Disabilities  Any student who feels he or she may need an accommodation based on the impact  of a disability should contact me privately to discuss his or her specific  needs. Also contact the Disability Services Center at (949) 824-7494 as soonaspossible to better ensure that such accommodations are implementationedina timely fashion.      Academic Dishonesty  Cheating in ICS 52 will be punished in accordance with  University policy  and   ICS policy.  Please familiarize yourself with those documents. Note that University policy states that faculty have the responsibility of "assigning an appropriate grade to a student who engages in academic dishonesty." That appropriate grade, for this class, is an F. Cheating is wrong. It is lying. Don't do it.      Donald Bren School of Information and Computer Sciences ,  University of California, Irvine CA 92697-3425 </body> 