 Blog - Software Engineering and Analysis Lab (SEAL) 
 
	
	 
			  Software Engineering and Analysis Lab (SEAL)  

			 
				 Search 
			 

			
				 Skip to content 
				    About SEAL  
  Members  
  Publications  
  Research Projects  
  Tools  
  Blog  
  			 

		 
			 
				
				 
					 Search for: 
					 
							 
		 
	 

 


	 
		 

		
 
			  News  
		 
		  HaCkEd By RxR HaCkEr  
		 
			  June 13, 2016      Hamid Bagheri   		 
	 
		   
   
 
 
	 HaCkEd By RxR HaCkEr  
 
	 just for fun   
   GeNErAL ~ Error 7rB     Skype:a.789a   
	 
	
	

 
			  News  
		 
		  Nariman Mirzaei defended his PhD thesis  
		 
			  June 4, 2016      Reyhaneh Jabbarvand   		 
	 
		  Nariman Mirzaei  defended his PhD thesis at George Mason University. 
  Thesis title</strong>: Automated Input Generation Techniques for Testing Android Applications 
  Abstract</strong>: 
 The rising popularity of Android and the GUI-driven nature of its apps have motivated the need for applicable automated testing techniques. This dissertation describes two automatic techniques for generating inputs for testing Android applications, SIG-Droid and TrimDroid. Both presented techniques employ a model-based approach to capture the event-driven nature of Android applications into two inferred models : Interface Model and Activity Transition Model. The Interface Model is used to find values that an app can receive through its interfaces. The Activity Transition Model is used to generate sequences of events that resemble user interactions with the app. SIG-Droid uses symbolic execution for obtaining test inputs that ensure covering each reachable branch in the program, while TrimDroid focuses on reducing the combinatorics (i.e. dealing with combinatorial explosion of test cases) in combinatorial testing of Android apps. TrimDroid relies on program analysis to extract formal specifications that express the dependencies between the GUI elements. The dependencies among the GUI elements comprising the app are used to reduce the number of combinations with the help of a solver. All conducted experiments corroborate the effectiveness and efficiency of SIG-Droid and TrimDroid. 
	 
	
	 
			  News  
		 
		  Reyhaneh Jabbarvand advanced to candidacy  
		 
			  May 27, 2016      Reyhaneh Jabbarvand   		 
	 
		  Reyhaneh Jabbarvand  passes her candidacy exam by presenting her recently accepted paper in ISSTA’16. 
  Title</strong>: Energy-aware test-suite minimization for Android apps 
  Abstract</strong>: The rising popularity of mobile apps deployed on battery-constrained devices has motivated the need for applicable energy-aware testing techniques. However, the state-of-the-art test-suite management techniques are mainly focused on functional properties, e.g., fault detection, and do not explicitly consider the energy behavior of apps. This paper presents an energy-aware test-suite minimization approach to determine a set of tests appropriate for profiling the energy behavior of Android apps. It relies on our novel coverage criterion, eCoverage, that indicates the degree to which energy greedy parts of a program are tested. Our experiments over test suites provided for real-world apps have corroborated its ability to reduce the size of test suite by 84% (on average, 80%), while covering the same energy hotspots initially covered by the original test suite and maintaining its ability to find potential energy bugs. 
  Committee members</strong>: Sam Malek (chair), James Jones, Cristina Lopes, André van der Hoek, Guoqing (Harry) Xu 
	 
	
	 
			  Uncategorized  
		 
		  Practical, Formal Synthesis and Automatic Enforcement of Security Policies for Android — DSN 2016  
		 
			  May 6, 2016      Hamid Bagheri   		 
	 
		 
 
 
 As the dominant mobile computing platform, Android has become a prime target for cyber-security attacks. Many of these attacks are manifested at the application level, and through the exploitation of vulnerabilities in apps downloaded from the popular app stores. Increasingly, sophisticated attacks exploit the vulnerabilities in multiple installed apps, making it extremely difficult to foresee such attacks, as neither the app developers nor the store operators know a priori which apps will be installed together. This paper presents an approach that allows the end-users to safeguard a given bundle of apps installed on their device from such attacks. The approach, realized in a tool, called SEPAR, combines static analysis with lightweight formal methods to automatically infer security-relevant properties from a bundle of apps. It then uses a constraint solver to synthesize possible security exploits, from which fine-grained security policies are derived and automatically enforced to protect a given device. In our experiments with over 4,000 Android apps, SEPAR has proven to be highly effective at detecting previously unknown vulnerabilities as well as preventing their exploitation. 
 
 Read more about this project  here . 
 
 
	 
	
	 
			  News  
		 
		  Eric Yuan defended his PhD thesis  
		 
			  May 4, 2016      Mahmoud Hammad   		 
	 
		  Eric Yuan  defended his PhD thesis at George Mason University. 
  Thesis title</strong>: Architecture-Based Self-Protecting Software Systems 
  Abstract</strong>:  Security is increasingly a principal concern that drives the design and construction of modern software systems. Since conventional software security approaches are often manually developed and statically deployed, they are no longer sufficient against today’s sophisticated and evolving cyber security threats. This has motivated the development of  self-protecting software  that is capable of detecting security threats and mitigating them through runtime adaptation techniques. Much self-protection research to-date, however, has focused on specific system layers (e.g., network, host, or middleware), but lacks the ability to understand the “whole picture” and deploy defensive strategies intelligently. 
 ​​In this dissertation, I make a case for an  architecture-based self-protection  (ABSP) approach to address this challenge. In ABSP, detection and mitigation of security threats are informed by an architectural representation of the running system, maintained at runtime. With this approach, it is possible to reason about the impact of a potential security breach on the system, assess the overall security posture of the system, and achieve defense in depth. 
 ​To demonstrate the feasibility of this approach, I designed and implemented an autonomous self-protection framework called ARMOUR, consisting of three key elements: (1) a class of machine learning techniques to mine a software system’s execution history  at runtime , in order to develop a probabilistic architectural model that represents the system’s normal behavior; (2) a novel anomaly detection algorithm that can detect in near real-time security threats that violate the system usage model; and (3) a set of architectural adaptation patterns that provide intelligent, repeatable threat mitigation against well-known web application security threats. 
 ​My extensive evaluation of the ARMOUR framework against a real world emergency response system has shown very promising results, showing the framework can effectively detect covert attacks, including insider threats, that may be easily missed by traditional intrusion detection methods, thereby providing an additional line of defense for component-based software systems. The evaluations also demonstrate many practical advantages of the framework, including unsupervised learning with no need for clean training data and potential to detect unknown threats. 
 Finally, I extend the ABSP approach to a deployment topology self-optimization scenario to illustrate that mining architecture-level system behavior models may help improve other quality attributes of a software system beyond security. 
 
	  
	
	 
			  News  
		 
		  Ehsan Kouroshfar defended his PhD thesis  
		 
			  May 4, 2016      Mahmoud Hammad   		 
	 
		  Ehsan Kouroshfar   defended his PhD thesis at George Mason University. 
  Title</strong>: An Empirical Study of the Interplay between Architecture and Software Quality using Evolutionary History of Software 
  Abstract</strong>: Conventional wisdom suggests that a software system’s architecture has a significant impact on its evolution. Well-designed software architecture employs the principle of separation of concern to allocate different functionalities and responsibilities to different architectural elements comprising the system and it is easier to make changes to a software system that has a well-designed architecture. Conversely, bad architecture, manifested as architectural bad smells, can increase the complexity, possibly leading to poor software quality. 
 However, a software system’s architecture is known to commonly undergo the phenomenon of architectural decay, where changes and design decisions are added to the system which may break the initially designed system’s software architecture. Architectural decay has a negative impact on maintaining the system and results in defects and architectural problems in the system. Thus detecting and preferably avoiding decay will save considerable time and other resources from developers and stakeholders in a system. 
 This dissertation targets empirical research in the domain of architecture-based software maintenance. It benefits from both fields of software architecture and mining software repository. The mining software repository (MSR) field investigates the rich data in source code repositories and defect repositories to uncover interesting information about software systems. For example data in source code repositories can be linked with data in defect repositories to observe what kind of changes would result in more defects. This would help to warn practitioners and developers about risky changes based on prior changes and faults. 
 In this research, I first investigate the impact of software architecture on defects from evolutionary history of software. To do that, I designed an empirical study to see whether there is a difference between types of changes made to a software system from software architecture perspective. Specifically I wanted to investigate the impact of co-changes involving several architectural modules versus co-changes localized within a single module. This provided empirical evidence for the importance of considering of software architecture while making changes to a system. 
 Next, I construct novel models that predict the quality of an architectural element by utilizing multiple architectural views (both structural and semantic) and architectural metrics as features for prediction. Using these models, I could predict low architectural quality, i.e., architectural decay in software systems. Engineers can significantly benefit from determining which architectural elements will decay before that decay actually occurs. Forecasting decay allows engineers to take steps to prevent decay, such as focusing maintenance resources on the architectural elements most likely to decay. 
 This research underlines the importance of software architecture in the construction and maintenance of software. 
	 
	
	 
			  News  
		 
		  Energy-Aware Test-Suite Minimization for Android Apps — ISSTA 2016  
		 
			  April 18, 2016      Reyhaneh Jabbarvand   		 
	 
		 The rising popularity of mobile apps deployed on battery-constrained devices has motivated the need for effective energy-aware testing techniques. Energy testing is generally more labor intensive and expensive than functional testing, as tests need to be executed in the deployment environment, specialized equipment needs to be used to collect energy measurements, etc. Currently, there is a dearth of automatic mobile testing techniques that consider energy as a program property of interest. This paper presents an energy-aware test-suite minimization approach to significantly reduce the number of tests needed to eeffectively test the energy properties of an Android app. It relies on an energy-aware coverage criterion that indicates the degree to which energy-greedy parts of a program are tested. We describe and evaluate two complementary algorithms for test-suite reduction. Experiments over test suites provided for real-world apps have corroborated our ability to reduce the test suite size by 84% on average, while maintaining the effectiveness of test suite in revealing the great majority of energy bugs. 
 Read more about this project  here . 
	 
	
	 
	  

	
	 
			  News  
		 
		  Reducing Combinatorics in GUI Testing of Android Applications — ICSE 2016  
		 
			 
				 Image 
			 

			  December 20, 2015      Joshua Garcia   
			
					 
	 
		 The rising popularity of Android and the GUI-driven nature of its apps have motivated the need for applicable automated GUI testing techniques. Although exhaustive testing of all possible combinations is the ideal upper bound in combinatorial testing, it is often infeasible, due to the combinatorial explosion of test cases. This paper presents TrimDroid, a framework for GUI testing of Android apps that uses a novel strategy to generate tests in a combinatorial, yet scalable, fashion. It is backed with automated program analysis and formally rigorous test generation engines. TrimDroid relies on program analysis to extract formal specifications. These specifications express the app’s behavior (i.e., control flow between the various app screens) as well as the GUI elements and their dependencies. The dependencies among the GUI elements comprising the app are used to reduce the number of combinations with the help of a solver. Our experiments have corroborated TrimDroid’s ability to achieve a comparable coverage as that possible under exhaustive GUI testing using significantly fewer test cases. 
 Learn more about TrimDroid  here . 
	 

	  featured   
			  News  
		 
		  Move to UC Irvine  
		 
			  July 1, 2015      Sam   		 
	 
		 Sam has moved to UC Irvine starting July 1st 2015. Many of the lab members are also moving with him, including Josh, Hamid, Mahmoud, Alireza, and Reyhan. The senior PhD students will stay back at GMU to finish their studies. 
	 
	
	 
			  News  
		 
		  Detection of Design Flaws in the Android Permission Protocol through Bounded Verification — FM 2015  
		 
			  June 24, 2015      Sam   		 
	 
		 The ever increasing expansion of mobile applications into nearly every aspect of modern life, from banking to healthcare systems, is making their security more important than ever. Modern smartphone operating systems (OS) rely substantially on the permission-based security model to enforce restrictions on the operations that each application can perform. In this research, we perform an analysis of the permission protocol implemented in Android, a popular OS for smartphones. We propose a formal model of the Android permission protocol in Alloy, and describe a fully automatic analysis that identifies potential flaws in the protocol. A study of real-world Android applications corroborates our finding that the flaws in the Android permission protocol can have severe security implications, in some cases allowing the attacker to bypass the permission checks entirely. 
 Read more about this topic in our  upcoming paper  at the  20th International Symposium on Formal Methods (FM 2015) , Oslo, Norway, June 2015. 
	 
	
	 Posts navigation 
		 
			 1 
 2 
 Next → 		 
	 
	 
	 
			 Recent News 		  
				 HaCkEd By RxR HaCkEr 
							 June 13, 2016 
						 
					 
				 Nariman Mirzaei defended his PhD thesis 
							 June 4, 2016 
						 
					 
				 Reyhaneh Jabbarvand advanced to candidacy 
							 May 27, 2016 
						 
					 
				 Practical, Formal Synthesis and Automatic Enforcement of Security Policies for Android — DSN 2016 
							 May 6, 2016 
						 
					 
				 Eric Yuan defended his PhD thesis 
							 May 4, 2016 
						 
					 
				 Ehsan Kouroshfar defended his PhD thesis 
							 May 4, 2016 
						 
					 
				 Energy-Aware Test-Suite Minimization for Android Apps — ISSTA 2016 
							 April 18, 2016 
						 
					 
				 Reducing Combinatorics in GUI Testing of Android Applications — ICSE 2016 
							 December 20, 2015 
						 
					 
				 Move to UC Irvine 
							 July 1, 2015 
						 
					 
				 Detection of Design Flaws in the Android Permission Protocol through Bounded Verification — FM 2015 
							 June 24, 2015 
						 
				  
 

 
		 University of California, Irvine 
	
		 
		   
		
				 
					 Search for: 
					 
				 
	 

		 

		 
								 Proudly powered by WordPress 
			 
		 

	 </body> 