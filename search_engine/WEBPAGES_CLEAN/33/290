 Lectures/Lab<body>

 
 Lecture/Lab Schedule 
 
  ICS-46: Data Structure Implementation and Analysis  
 

  Course Expectations 

 Lectures and Labs 
Programming is an intensive activity.
We will have class every day of the week: MWF lectures and TuTh (open) labs.
By staying on task 5-days per week, learning and practicing what we learn,
  we are more likely to master programming in C++ and using C++ to implement
  data structures.
One learns programming by practicing programming.


 Work Before, During, and After Lecture 
I expect students to read the assigned lecture materials, either before
  class (as a way to preview the lecture) or after class (where the lecture
  previews the reading), to get the most out of both: cover the material twice.
I will lecture during class, but I prefer discussing the material and
  answering questions; asking you questions about the material, and amplifying
  on those topics that need further discussion.
I expect most "lectures" to be interactive, with students participating.
Class mottos: "Those who are ashamed of asking are ashamed of learning."
  and "The only stupid question is the one left unasked."
 
Carefully read the lectures and examine the code they contain.
Test and explore this code in Clion to verify that you understand the
  material both theoretically and practically.
Here  understanding  means "be able to use the information operationally
  to write code that solves problems".
If you have difficultly with a concept, it indicates that you should probably
  go back over the related reading -or certainly ask a question about it
  on the Forum.
One of the few advantages of a big class like this is the potental for
  peer-teaching.
  


  Lecture Attendance and Decorum 
I expect students to attend class daily, arriving on time, and settling down
  when class starts.
The announcements made at the start of class are often very important.
I expect students to neither carry on private conversations, nor use
  their computers to answer e-mail, surf the web, day trade stocks, or
  perform any other activities unrelated to this course.
 
Someone once said, "Distance education begins in the 8th row of the classroom".
I recommend that student sit in the rows close to the front of the room.
I once had the following comment on my final teaching evaluation,
"Write bigger: I could never read what you wrote on the whiteboard from my seat
   in the back of the class."
I have many deficiencies as an instructor; students should help themselves get
 what they need out of this class -like by sitting near the front if necessary.
  
Ringing cell phones disrupt my lectures.
Unless you are responsible for someone's life, your cell phone should be
  turned off.
Otherwise, you should set it to operate in some silent mode (as mine will be
  set); if it rings silently and you decide you must answer the call, please
  leave the class, with a minimum of disruption to the rest of the students.
If your cell phone rings audibly in class, you will be asked to leave class for
  that day.
Finally, if you know that you must leave early, please sit by a door, so that
  you can exit quietly and without disturbing other students in the class.
  
Overall, please strive to be a considerate class member, both to me and to
  your fellow students.
  

   
  Schedule, Topics, Readings, and Problems 

    Week 
 Activity 
 Date 
 Topic 
 Materials 

     Pre-class  Lab 
 1/5 
   Start
       
      Program #0:  CLion/Clang C++, Course/GoogleTest Libraries, and Checkmate
   
   &amp;nbsp 

   &amp;nbsp  Lecture 
 1/6 
    
        Course Overview  (all)
   
   
     Notes 
   

 




   #1  Lecture 
 1/9 
   The ICS-46 Template Library:
      Stack, Queue, Priority Queue, Set, and Map
   
   
     Notes   test_itl   cross_reference 
   


      Lab 
 1/10 
   Work on
       
      Program #0: CLion/C++, Course/GoogleTest Libraries, and Checkmate
   
   
     
   


      Lecture 
 1/11 
   The ICS-46 Template Library:
      Stack, Queue, Priority Queue, Set, and Map (continued)
   
   
     Notes   test_itl   cross_reference 
   


      Lab 
 1/12 
   Start
       
      Program #1:  Using the ICS-46 Template Library
   
   
     
   


      Lecture 
 1/13 
   Array Implementations of ICS-46 Template Library Classes
   
   
    Notes   Iterator Worksheet 
   





   #2  Lecture 
 1/16 
    Holiday (No Classes): Martin Luther King Jr. Day ; but read 
  Linked Lists and Linked List Processing
   
   
    Notes   Pictures   Driver   


      Lab 
 1/17 
   Work on
       
      Program #1:  Using the ICS-46 Template Library
   
   
     
   


      Lecture 
 1/18 
   Special Linked Lists: Circular, Header, Trailer, Doubly-linked
   
   
    Notes   Pictures 
   


      Lab 
 1/19 
   Work on
       
      Program #1:  Using the ICS-46 Template Library
   
   
     
   


      Lecture 
 1/20 
   Recursion: General, Strings, Linked Lists
   
   
    Notes   Pictures   





   #3  Lecture 
 1/23 
   Analysis of Algorithms I: Complexity Classes and  big-O Notation
   
   
    Notes 
   
   


      Lab 
 1/24 
   Start
       
      Program #2 : Implementing Queue/Priority Queue/Set with Linked Lists
   
   
     
   


      Lecture 
 1/25 
   Analysis of Algorithms II: Composing Complexity Classes: examples;
         Ω (big-Omega) and Θ (big-Theta) Notations
   
   
    Notes 
  


      Lab 
 1/26 
   Work on
       
      Program #2 : Implementing Queue/Priority Queue/Set with Linked Lists
   
   
     
   


      Lecture 
 1/27 
   Introducing Binary Trees
   
   
    Notes   Pictures 
  





   #4  Lecture 
 1/30 
   Binary Search Tree: Processing and Traversals
   
   
     Notes   Pictures   Driver   Empirical Program 
     Empirical Text 
  


      Lab 
 1/31 
   Work on
       
      Program #2 : Implementing Queue/Priority Queue/Set with Linked Lists
   
   
     
   


      Lecture 
 2/1 
   Heap Trees and Special Trees
    
     Notes   Pictures 
 


      Lab 
 2/2 
   Work on
       
      Program #2 : Implementing Queue/Priority Queue/Set with Linked Lists
   
    
 


   &amp;nbsp  Lecture 
 2/3 
   AVL (and other self-balancing) Trees
    
   Notes 
 





   #5  Lecture 
 2/6 
   General Trees (set, etc. children), Binary embedding,
      Quad trees, Digital Trees, Structure Trees
    
    Notes   Pictures 
 


      Lab 
 2/7 
   Start
       
      Program #3 : Implementing Priority Queues and Maps with Binary Trees
   
   
     
 


      Lecture 
 2/8 
   Hash Tables: Hashing, Chaining, Probing, Iterators
    
     Notes   Empirical Program 
     Empirical Text 
 

        
      Lab 
 2/9 
   Work on
       
      Program #3 : Implementing Priority Queues and Maps with Binary Trees
   
     


      Lecture 
 2/10 
   Problem Solving and Search Trees: Backtracking   
    Notes   Backtracking Program 
    Graph 
   





   #6  Lecture 
 2/13 
    Problem Solving and Search Trees: State-Space Searching
    Notes 
    State-Space Program 
   
   
     
   


      Lab 
 2/14 
   Work on
       
      Program #3 : Implementing Priority Queues and Maps with Binary Trees
   
     

      Lecture 
 2/15 
     
      Midterm Exam (part 1)  
      Topics:
        ICS-46 Template Library and Iterators;
        Linked Lists (iterative and recursive);
        Analysis of Algorithms
        Trees: Binary/BST/Heap/AVL/N-ary/Digital/...,
        Hash Table concepts
   
   
     
   


      Lab 
 2/16 
   Work on
       
      Program #3 : Implementing Priority Queues and Maps with Binary Trees
   
   
     
   


      Lecture 
 2/17 
    
      Midterm Exam (part 2)  
      Topics:
        ICS-46 Template Library and Iterators;
        Linked Lists (iterative and recursive);
        Analysis of Algorithms
        Trees: Binary/BST/Heap/AVL/N-ary/Digital/...,
        Hash Table concepts
     




   #7  Lecture 
 2/20 
    Holiday (No Classes): Presidents' Day 
   



      Lab 
 2/21 
   Start
       
      Program #4 : Implementing Maps and Sets via Hash Tables
   
     


      Lecture 
 2/22 
   Sorting 1: Time/Space/Stability, O(N^2) Sorts
   
   
    Notes 
   


      Lab 
 2/23 
   Work on
       
      Program #4 : Implementing Maps and Sets via Hash Tables
   
     


      Lecture 
 2/24 
   Sorting 2: O(N Log N) Sorts, lower bounds for comparison sorts
   
   
    Notes 
   






   #8  Lecture 
 2/27 
   Sorting 3: Sorting without Comparisons: Bucket and Radix Sort
   
   
     Notes 
   


      Lab 
 2/28 
   Work on
       
      Program #4 : Implementing Maps and Sets via Hash Tables
      


      Lecture 
 3/1 
   Equivalences
   
   
     Notes 
   


      Lab 
 3/2 
   Work on
       
      Program #4 : Implementing Maps and Sets via Hash Tables
    
     
   


      Lecture 
 3/3 
   
     Graphs: Terminology and Representations
    
     Notes   Pictures   





   #9  Lecture 
 3/6 
   Graph Algorithms I: Topological Sorting, Connected Components, and
        Spanning Trees
   
   
     Notes   
      Graph for MST 
   


      Lab 
 3/7 
   Start
       
      Program #5 : Implementing Graphs and Dijkstra's Algorithm
   
    
   


      Lecture 
 3/8 
   Graph Algorithms II: Extended Dijkstra's Algorithm (Shortest Paths)
   
   
     Notes   Graph   Example 
   



      Lab 
 3/9 

   Work on
       
      Program #5 : Implementing Graphs and Dijkstra's Algorithm
   
       



      Lecture 
 3/10 
   Speeding-up code without changing its algorithm/complexity class
    
     Notes 

   





   #10  Lecture 
 3/13 
   Computer Memory: Introduction
   
   
     Notes 
 


      Lab 
 3/14 
   Work on
       
      Program #5 : Implementing Graphs and Dijkstra's Algorithm
   
    
   


      Lecture 
 3/15 
   Computer Memory: Data Structures and Algorithms for Searching
   
   
     Notes   Picture 
   


      Lab 
 3/16 
   Work on
       
      Program #5 : Implementing Graphs and Dijkstra's Algorithm
   
    
   


      Lecture 
 3/17   Computer Memory: Algorithms for Sorting
   
   
     Notes 
   




   Final Exams Week  3/24 
     We will have a comprehensive 2-hour written
      final exam on Friday, March 24th, 8:00am - 10:am
      (see the
         
      Final Exam Schedule ).
     Bring a photo ID with a  legible name and picture 
        (UCI, drivers license, passport, etc.)
      I will send email when I have computed/entered final grades,
        which are due to UCI by Thursday, March 30th at 5pm.
     
     



   </body> 