 HelpOnParsers - UAI '08 Workshop: Probabilistic Reasoning Systems  
     


 
 Search: 
 

   Login    


   HelpOnParsers  
  


   FrontPage    RecentChanges    FindPage    HelpContents    HelpOnParsers  
    

   Immutable Page    Comments    Info    Attachments   

 
     More Actions: 
     

    
   
                    HelpContents  &gt;  HelpForUsers  &gt;  HelpOnEditing  &gt; HelpOnParsers       
  Parsers 
     Besides the default  MoinMoin  wiki markup, different  parsers</strong> allow the user to enter content into a page or a page section which is interpreted differently. A  MoinMoin  wiki mostly will use the default wiki parser, which is described on  HelpOnFormatting .          Contents   
 Parsers   
 How formats are applied   
 ParserBase   
 creole   
 python   
 cplusplus   
 java   
 pascal     
 IRC   
 CSV   
 reStructuredText   
 XML/XSLT/DocBook   
 Additional Parsers              
  How formats are applied 
     Parsers go through the contents of a page to create a sequence of formatter calls which in sequence create some readable output.  MoinMoin  will choose the parser for a page using 2 different techniques:         FORMAT Processing Instruction </strong>        A  #FORMAT  processing instruction can be used to tell  MoinMoin  which parser to use for the whole page content. By default this is the  wiki  parser. Example:             #FORMAT cplusplus
  ... some C++ source ...         Code Display Regions</strong> - see  HelpOnFormatting         With the use of code display regions, a parser can be applied to only a part of a page (this was a processor region in earlier versions of  MoinMoin ). You specify which parser to call by using a bang path-like construct in the first line. A bang path is a concept known from Unix command line scripts, where they serve the exact same purpose: the first line tells the shell what program to start to process the remaining lines of the script. For example, the code                 {{{#!CSV ,
  a,b,c
  d,e,f
  }}}   produces the table:                a</strong> 
    b</strong> 
    c</strong> 
   d 
   e 
   f 
              Note that there are 2 ways to solve  nesting problems  related to  }}} :      Use more than 3 curly braces for beginning / ending of the parser section (what you use must not be contained in the section you are enclosing). E.g.:                  {{{{
  {{{
  ...
  }}}
  }}}}     Use 3 curly braces + some unique string:                  {{{asdfghj
  {{{
  ...
  }}}
  asdfghj}}}        For more information on the possible markup, see  HelpOnEditing .        
  ParserBase 
     ParserBase is a parser utility class used to produce colorized source displays. It is easily extended. The HTML Formatter will render such code displays with switchable linenumbers, if the browser supports DOM and JavaScript.       A ParserBase colorization parser understands the following arguments to a  #FORMAT  pi or a hashbang line. Just add those arguments after the name of the parser ( #FORMAT python start=10 step=10 numbers=on  or  #!python numbers=off ).        numbers  if line numbers should be added. defaults to 'on'. possible values: 'on', 'off' (no line numbers, but javascript to add them), 'disable' (no line numbers at all)     start  where to start with numbering. defaults to 1     step  increment to the linenumber. defaults to 1         MoinMoin  comes with a few examples from which you can go on:       
  creole 
     See  HelpOnCreoleSyntax .       
  python 
     Colorizes python code. It is not derived from Parser  Base, but it allows the same arguments as the ParserBase parsers.                  
       1        def   hello (): 
      2            print   "  Hello World!  "  
                   
     def   hello (): 
        print   "  Hello World!  "  
                        def   hello (): 
        print   "  Hello World!  "  
        
  cplusplus 
                  
       1        int   main ( int   argc ,  char  ** argv ) { 
      2          return   0 ; 
      3       } 
        
  java 
                                          
       1        import   java.util.Date ; 
      2        import   java.util.Calendar ; 
      3        
      4        public   class   IntDate  
      5       { 
      6          public   static   Date   getDate ( String   year ,  String   month ,  String   day ) 
      7           { 
      8              // Date(int, int, int) has been deprecated, so use Calendar to  
      9                // set the year, month, and day.  
     10                Calendar   c  =  Calendar . getInstance (); 
     11              // Convert each argument to int.  
     12                c . set ( Integer . parseInt ( year ), Integer . parseInt ( month ), Integer . parseInt ( day )); 
     13              return   c . getTime (); 
     14           } 
     15       } 
        
  pascal 
                        
       1        function   TRegEx . Match ( const   s : string ): boolean ; 
      2        var  
      3            l , i  :  integer ; 
      4        begin  
      5            result  :=  MatchPos ( s , l , i ); 
      6        end ; 
        
  IRC 
     Puts an IRC log into a table.                          
       1        (23:18)   &lt;     jroes&gt;  ah 
      2        (23:21)   -!-   gpciceri   [~gpciceri@host181-130.pool8248.interbusiness.it] has quit [Read error: 110 (Connection timed out)]  
      3          (23:36)   &lt; ThomasWal&gt;  you could also write a parser or processor 
      4        (23:38)   &lt;     jroes&gt;  i could? 
      5        (23:38)   &lt;     jroes&gt;  would that require modification on the moin end though? 
      6        (23:38)   &lt;     jroes&gt;  i cant change the wiki myself :x 
        The format parsed is the log format of IRSSI, a popular console IRC client, but it should also match the log format of quite some other IRC clients.            
  CSV 
     The CSV parser works on so-called  comma separated values , though the comma is now usually and by default a semicolon.    The first line is considered to contain column titles that are rendered in  bold</strong>, so when you don't want table headers, leave the first line empty.       The bang path can contain " -  index " arguments, each of which hides a certain column from the output; column indices are counted starting from 1.       Any non-whitespace argument that doesn't start with a  -  specifies the separator. This allows you to use e.g. commas ( , ) instead of semicolons ( ; ). If you do not supply a separator,  ;  will be used.           The currently included CSV parser code is  very  simple.         Example tables (please see the raw text of this page for the markup used):        MoinMoin 1.3 - clipping of the patch history:                                     patch-366</strong> 
    make _normalize_text public method</strong> 
    Nir Soffer</strong> 
   patch-367 
   fixed failing test wikiutil: good system page names 
   Nir Soffer 
   patch-368 
   Fixed DeprecationWarning in RandomPage.py and an unused import in twistedmoin.py 
   Alexander Schremmer 
   patch-369 
   remove duplicate code in formatter.base 
   Thomas Waldmann 
   patch-370 
   fixed long int in mig3 
   Thomas Waldmann 
   patch-371 
   fixed unicode error on eventlog 
   Nir Soffer 
   patch-372 
   fixed util.web.makeQueryString and Page.url 
   Nir Soffer 
   patch-373 
   fixed again non ascii http_referer 
   Nir Soffer 
   patch-374 
   CSV.py supports different separators now 
   Alexander Schremmer 
   patch-375 
   improved searchform behavior on Mozilla/Firefox 
   Nir Soffer 
   patch-376 
   More correct script for actions menu init 
   Nir Soffer 
           MoinMoin  Version History:                                     Version</strong> 
    Date</strong> 
   0.11 
   2002-03-11 
   0.10 
   2001-10-28 
   0.9 
   2001-05-07 
   0.8 
   2001-01-23 
   0.7 
   2000-12-06 
   0.6 
   2000-12-04 
   0.5 
   2000-11-17 
   0.4 
   2000-11-01 
   0.3 
   2000-10-25 
   0.2 
   2000-08-26 
   0.1 
   2000-07-29 
          
  reStructuredText 
     See  /ReStructuredText        
  XML/XSLT/DocBook 
     See  HelpOnXmlPages .       
  Additional Parsers 
     For many more parsers and installation instructions, see  ParserMarket        
  
  
   Immutable Page    Comments    Info    Attachments   

 
     More Actions: 
     

     MoinMoin Powered    Python Powered    GPL licensed    Valid HTML 4.01  
  </body> 