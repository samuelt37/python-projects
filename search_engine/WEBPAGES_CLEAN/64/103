 Mechanism:<body> Mechanism: Aspect Oriented Programming  Intent           Also Known As       AOP.   Motivation        A scenario that illustrates a problem and how the    different elements of the mechanism solve the problem. The    scenario will help you understand the more abstract    description of the mechanism below.     Applicability        What are the situations in which the mechanism can be    applied? What are examples of poor designs that the mechansim    can address? How can you recognize these situations?          An applicable situation          Participants       The elements participating in the mechanism and their    responsibilities.        Participant Name: Responsibility for what         Collaborations       How the participants collaborate to carry out their    responsibilities.        [Collaboration]         Consequences       AOP has the following benefits:       They maintain application modularity.          They separate the specifications of aspects.       AOP has the following limitations:       Interactions between aspects          They can complicate debugging. Debugging an            application that contains complex interactions            between aspects arise can be difficult.        Implementation        What pitfalls, hints, or techniques should you be    aware of when implementing the mechanism? Are there    language-specific issues?          Description of Bullet          Known Uses       Xerox PARC's  AOP     project has built AspectJ for Java.   Related Mechanisms        What mechanisms are closely related to this one? What    are the important differences? With which other mechanisms    should this one be used?        Backto the Adaptation home page   . This page maintained byPeyman Oreizy  ( peymano at ics.uci.edu ).Last updated on . </body> �  