 #ifndef DRIVER_PRIORITYQUEUE_HPP_
#define DRIVER_PRIORITYQUEUE_HPP_

#include 
#include 
#include 
#include "ics46goody.hpp"
#include "ics_exceptions.hpp"
#include "array_priority_queue.hpp"


namespace ics {

bool regular_gt(const std::string&amp; a, const std::string&amp; b) {return a  b;}

typedef ics::ArrayPriorityQueue PriorityQueueType;

class DriverPriorityQueue {
  public:
    DriverPriorityQueue() : q(regular_gt){
      std::string allowable[] = {"r","R",""};
      bool (*gt)(const std::string&amp; a, const std::string&amp; b);
      gt = (ics::prompt_string("Enter comparison for Priority Queue: r[egular] or R[everse]\n  regular means smaller values have higher priority","r",allowable) =="r" ? regular_gt : reverse_gt);
      q = PriorityQueueType(gt);
      process_commands("");
    };

  private:
    PriorityQueueType q;

    PriorityQueueType prompt_queue(std::string preface, std::string message = "  Enter element for q2") {
      PriorityQueueType q2(regular_gt);
      std::string allowable[] = {"r","R",""};
      bool (*gt)(const std::string&amp; a, const std::string&amp; b);
      gt = (ics::prompt_string("Enter comparison for Priority Queue: r[egular] or R[everse]\n  regular means smaller values have higher priority","r",allowable) =="r" ? regular_gt : reverse_gt);
      q2 = PriorityQueueType(gt);
      for (;;) {
        std::string e = ics::prompt_string(preface + message + "(QUIT to quit)");
        if (e == "QUIT")
          break;
        q2.enqueue(e);
      }
      return q2;
    }

    std::string menu_prompt (std::string preface) {
      std::cout  