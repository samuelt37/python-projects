 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;                                         ;;;
;;;  file init.scm                          ;;;
;;;  ICS 22 Scheme lab assignment file      ;;;
;;;                                         ;;;
;;;  Revised and tested for Windows NT by   ;;;
;;;    Li-Wei (Gary) Chen                   ;;;
;;;                          Summer 1998    ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Redefine "car" and "cdr" for clarity
(define first car)
(define rest cdr)

;; Define atom? in terms of pair?
(define atom?
    (lambda (x)
      (not (pair? x))))
      
;; Define some math functions for fun
(define (fact n)
    (cond
     ((string.
       ;;
       ;; (2) Otherwise, determine the sign, separate the integer
       ;; part of the number's absolute value from its fractional
       ;; part, multiply the fractional part by the power of ten
       ;; that will push the required number of decimal places to
       ;; the left-hand side of the decimal point, and round it
       ;; off.  Check whether this generates a carry; if so, the
       ;; integer part should be one larger and the digits after
       ;; the decimal point should be 0.  Call the empoint
       ;; procedure to put the pieces of the numeral together and
       ;; attach the sign.

       (define (rounded-numeral num fraction-length)
         (if (zero? fraction-length)
             (number-&gt;string (inexact-&gt;exact (round num)))
             (let* ((sign (if (negative? num) "-" ""))
                    (abs-num (abs num))
                    (integer-part
                     (inexact-&gt;exact (truncate abs-num)))
                    (fractional-part
                     (- abs-num integer-part))
                    (frac-multiplier
                     (expt 10 fraction-length))
                    (postpoint
                     (inexact-&gt;exact 
                      (round (* fractional-part
                                frac-multiplier)))))
               (string-append
                sign
                (if (= postpoint frac-multiplier)
                   (empoint (+ integer-part 1) 0 fraction-length)
                   (empoint integer-part postpoint fraction-length))))))

       ;; Given an integer to print to the left of a decimal point
       ;; and an integer representing a decimal fraction to print
       ;; to the right of a decimal point, convert both to strings
       ;; and pad the latter on the left with enough zeroes to
       ;; bring it up to the specified fraction-length, then
       ;; concatenate the strings, inserting a decimal point
       ;; between them.

       (define (empoint int frac fraction-length)
         (string-append (number-&gt;string int)
                        "."
                        (pad-on-left (number-&gt;string frac)
                                     #\0
                                     fraction-length)))

       ;; To pad a string on the left with copies of a specified
       ;; character in order to bring it up to a specified minimum
       ;; length, check whether any padding is needed, and if it
       ;; is, prepend a string consisting of copies of the pad
       ;; character and equal in length to the difference between
       ;; the specified minimum length and the current length.

       (define (pad-on-left str pad-char desired-length)
         (let ((len (string-length str)))
           (if ( 