 //  
// $Id: node.cpp 1106 2007-04-16 23:20:29Z chenli $
//
//  Copyright (C) 2004 - 2007 by The Regents of the University of
//  California
//
// Redistribution of this file is permitted under the terms of the GNU
// Public License (GPL).
//
// Date: October, 2004
//
// Author: 
//          Liang Jin (liangj@ics.uci.edu)
//

#include "stdafx.h"
#include 
#include 
#include "assert.h"
#include "index.h"
//#include "card.h"


// Initialize one branch cell in a node.
//
static void RTreeInitBranch(struct Branch *b)
{
	RTreeInitRect(&amp;(b-&gt;rect));
	b-&gt;child = NULL;
}



// Initialize a Node structure.
//
void RTreeInitNode(struct Node *N)
{
	register struct Node *n = N;
	register int i;
	n-&gt;count = 0;
	n-&gt;level = -1;
	n-&gt;isLeaf = false;
	for (i = 0; i branch[i]));
	for (i = 0; i records[i] = NULL;
}



// Make a new node and initialize to have all branch cells empty.
//
struct Node * RTreeNewNode()
{
	register struct Node *n;

	//n = new Node;
	n = (struct Node*)malloc(sizeof(struct Node));
	assert(n);
	RTreeInitNode(n);
	return n;
}


void RTreeFreeNode(struct Node *p)
{
	assert(p);
	
	for(int i=0; ibranch[i].rect);
	}

	free(p);
}

void RTreeFreeLeafNode(struct Node *p)
{
	assert(p);
	free(p);
}



/*static void RTreePrintBranch(struct Branch *b, int depth)
{
	RTreePrintRect(&amp;(b-&gt;rect), depth);
	RTreePrintNode(b-&gt;child, depth);
}*/


extern void RTreeTabIn(int depth)
{
	int i;
	for(i=0; ilevel == 0)
		printf(" LEAF");
	else if (n-&gt;level &gt; 0)
		printf(" NONLEAF");
	else
		printf(" TYPE=?");
	printf("  level=%d  count=%d  address=%o\n", n-&gt;level, n-&gt;count, n);

	for (i=0; icount; i++)
	{
		if(n-&gt;level == 0) {
			// RTreeTabIn(depth);
			// printf("\t%d: data = %d\n", i, n-&gt;branch[i].child);
		}
		else {
			RTreeTabIn(depth);
			printf("branch %d\n", i);
			RTreePrintBranch(&amp;n-&gt;branch[i], depth+1);
			//recursion here? print the whole sub-tree?
		}
	}
}*/



// Find the smallest rectangle that includes all rectangles in
// branches of a node.
//
/*struct Rect RTreeNodeCover(struct Node *N)
{
	register struct Node *n = N;
	register int i, first_time=1;
	struct Rect r;
	assert(n);

	RTreeInitRect(&amp;r);
	for (i = 0; i branch[i].child)
		{
			if (first_time)
			{
				r = n-&gt;branch[i].rect;
				first_time = 0;
			}
			else
				r = RTreeCombineRect(&amp;r, &amp;(n-&gt;branch[i].rect));
		}
	return r;
}*/



// Pick a branch.  Pick the one that will need the smallest increase
// in area to accomodate the new rectangle.  This will result in the
// least total area for the covering rectangles in the current node.
// In case of a tie, pick the one which was smaller before, to get
// the best resolution when searching.
//
/*int RTreePickBranch(struct Rect *R, struct Node *N)
{
	register struct Rect *r = R;
	register struct Node *n = N;
	register struct Rect *rr;
	register int i, first_time=1;
	RectReal increase, bestIncr=(RectReal)-1, area, bestArea;
	int best;
	struct Rect tmp_rect;
	assert(r &amp;&amp; n);

	for (i=0; ibranch[i].child)
		{
			rr = &amp;n-&gt;branch[i].rect;
			area = RTreeRectVolume(rr);
			tmp_rect = RTreeCombineRect(r, rr);
			increase = RTreeRectVolume(&amp;tmp_rect) - area;
			if (increase count branch[i].child == NULL)
			{
				n-&gt;branch[i] = *b;
				n-&gt;count++;
				break;
			}
		}
		return 0;
	}
	else
	{
		assert(new_node);
		RTreeSplitNode(n, b, new_node);
		return 1;
	}
}*/



// Disconnect a dependent node.
//
/*void RTreeDisconnectBranch(struct Node *n, int i)
{
	assert(n &amp;&amp; i&gt;=0 &amp;&amp; ibranch[i].child);

	RTreeInitBranch(&amp;(n-&gt;branch[i]));
	n-&gt;count--;
}*/
 