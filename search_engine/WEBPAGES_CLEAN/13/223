 Publications<body>

 

 
Publications
 



 




 
Acceptance rates are given where known,
calculated from the number of full (F) and short (S) papers accepted
and the total number of submissions (T). 
For full papers, the rate given is F/T, and
for short papers, the rate given is (F+S)/T. 
 
 
PDF files are provided as a convenience for fair use by other researchers; 
rights are owned by the relevant publishers. 
   






 Current 

 
Thomas A. Alspaugh, Hazeline U. Asuncion, and Walt Scacchi. 
Using Arguments to Visualize Virtual License Conflicts
in Heterogeneously-Licensed Systems. 
Submitted to
 ACM Symposium on Software Visualization
(SoftVis 2010) . 
 

 
Walt Scacchi and Thomas A. Alspaugh. 
Understanding the Role of Licenses and Evolution
in Open Architecture Software Ecosystems. 
Submitted to
 Journal of Systems and Software ,
special issue on Software Ecosystems. 
 




 2010 




 
Thomas A. Alspaugh, Hazeline U. Asuncion, and Walt Scacchi. 
The Challenge of Heterogeneously Licensed Systems in Open Architecture Software Ecosystems. 
In  7th Acquisition Research Symposium , 
12–13 May 2010. 
 
  Abstract   The role of software ecosystems in the development and evolution of open architecture systems has received insufficient consideration. Such systems are composed of heterogeneously-licensed components, open source or proprietary or both, in an architecture in which evolution can occur by evolving existing components or by replacing them. But this may result in possible license conflicts and organizational liability for failure to fulfill license obligations. We have developed an approach for understanding and modeling software licenses, as well as for analyzing conflicts among groups of licenses in realistic system contexts and for guiding the acquisition, integration, or development of systems with open source components in such an environment. This work is based on empirical analysis of representative software licenses and heterogeneously-licensed systems, and collaboration with researchers in the legal world. Our approach provides guidance for achieving a ‘‘best-of-breed’’ component strategy while obtaining desired license rights in exchange for acceptable obligations.  
  BibTeX    
    @InProceedings(Alspaugh+Asuncion+Scacchi2010-chls,
      author =       {Alspaugh, Thomas A. and Asuncion, Hazeline U. and
                     Scacchi, Walt},
      title =        {The Challenge of Heterogeneously Licensed Systems in
                     Open Architecture Software Ecosystems},
      booktitle =    {7th Acquisition Research Symposium},
      year =         {2010},
      month =        may,
    )
   
 
 



 2009 


 
Thomas A. Alspaugh, Hazeline U. Asuncion, and Walt Scacchi. 
The Role of Software Licenses in Open Architecture Ecosystems. 
In  First International Workshop on Software Ecosystems (IWSECO-2009) , pages 4–18, 
27 Sept. 2009. 
 
  Abstract   The role of software ecosystems in the development and evolution of open architecture systems has received insufficient consideration. Such systems are composed of heterogeneously-licensed components, open source or proprietary or both, in an architecture in which evolution can occur by evolving existing components or by replacing them. The software licenses of the components both facilitate and constrain the system’s ecosystem, and the rights and duties of the licenses are crucial in producing an acceptable system. We discuss software ecosystems of open architecture systems from the perspective of an architect or an acquisition organization, and outline how our automated tool and environment help address their challenges, support reuse, and assist in managing coevolution and component interdependence.  
  BibTeX    
    @InProceedings(Alspaugh+Asuncion+Scacchi2009-rslo,
      author =       {Alspaugh, Thomas A. and Asuncion, Hazeline U. and
                     Scacchi, Walt},
      title =        {The Role of Software Licenses in Open Architecture
                     Ecosystems},
      booktitle =    {First International Workshop on Software Ecosystems
                     (IWSECO-2009)},
      pages =        {4--18},
      year =         {2009},
      month =        sep,
    )
   
 
 



 
Thomas A. Alspaugh and Walt Scacchi. 
Heterogeneously-Licensed System Requirements, Acquisition, and Governance. 
In  Second International Workshop on Requirements Engineering and Law (RELAW’09) , pages 1–2, 
1 Sept. 2009. 
 
  Abstract   Increasingly, software-intensive systems are being constructed from components subject to different licenses. As software reuse, component-based software development, and open source software components come into more widespread use during system development, developers and consumers are faced with a complex array of legal rights and obligations that they have difficulty tracking, yet alone comprehending. We outline aspects of this problem and an approach for managing it from the points of view of architects, analysts, acquisition managers, and regulators.  
  BibTeX    
    @InProceedings(Alspaugh+Scacchi2009-hlsr,
      author =       {Alspaugh, Thomas A. and Scacchi, Walt},
      title =        {Heterogeneously-Licensed System Requirements,
                     Acquisition, and Governance},
      pages =        {1--2},
      booktitle =    {Second International Workshop on Requirements
                     Engineering and Law ({RELAW}'09)},
      year =         {2009},
      month =        sep,
    )
   
 
 



 
Thomas A. Alspaugh, Hazeline U. Asuncion, and Walt Scacchi. 
Intellectual Property Rights Requirements for Heterogeneously-Licensed Systems. 
In  17th IEEE International Requirements Engineering Conference (RE’09) , pages 24–33, 
Aug. 31–Sept. 4 2009. 
 
  Abstract   Heterogeneously-licensed systems pose new challenges to analysts and system architects. Appropriate intellectual property rights must be available for the installed system, but without unnecessarily restricting the system’s other requirements, the system architecture, and the choice of components both initially and as it evolves. Such systems are increasingly common and important in e-business, game development, and other domains. Our semantic parameterization analysis of open-source licenses confirms that while most licenses present few roadblocks, reciprocal licenses such as the GNU General Public License produce knotty constraints that cannot be effectively managed without analysis of the system’s license architecture. Our automated tool supports intellectual property requirements management and evolution of license architectures. We validate our approach on an existing heterogeneously-licensed system.  
  BibTeX    
    @InProceedings(Alspaugh+Asuncion+Scacchi2009-iprr,
      author =       {Alspaugh, Thomas A. and Asuncion, Hazeline U. and
                     Scacchi, Walt},
      title =        {Intellectual Property Rights Requirements for
                     Heterogeneously-Licensed Systems},
      pages =        {24--33},
      booktitle =    {17th IEEE International Requirements Engineering
                     Conference ({RE}'09)},
      year =         {2009},
      month =        aug # { 31--} # sep # { 4},
    )
   
  doi:  10.1109/RE.2009.22  
 
 



 
Thomas A. Alspaugh, Hazeline U. Asuncion, and Walt Scacchi. 
Analyzing Software Licenses in Open Architecture Software Systems. 
In  2nd International Workshop on Emerging Trends in FLOSS Research and Development (FLOSS) , pages 1–4, 
18 May 2009. 
 
  Abstract   A substantial number of enterprises and independent software vendors are adopting a strategy in which software-intensive systems are developed with an open architecture (OA) that may contain open source software (OSS) components or components with open APIs. The emerging challenge is to realize the benefits of openness when components are subject to different copyright or property licenses. In this position paper, we identify key properties of OSS licenses, present a license analysis scheme, and discuss our approach for automatically analyzing license interactions.  
  BibTeX    
    @InProceedings(Alspaugh+Asuncion+Scacchi2009-aslo,
      author =       {Alspaugh, Thomas A. and Asuncion, Hazeline U. and
                     Scacchi, Walt},
      title =        {Analyzing Software Licenses in Open Architecture
                     Software Systems},
      booktitle =    {2nd International Workshop on Emerging Trends in
                     FLOSS Research and Development (FLOSS)},
      pages =        {1--4},
      year =         {2009},
      month =        may,
    )
   
  doi:  10.1109/FLOSS.2009.5071361  
 
 




 
Thomas A. Alspaugh, Hazeline U. Asuncion, and Walt Scacchi. 
Software Licenses, Open Source Components, and Open Architectures. 
In  6th Acquisition Research Symposium , 
13–14 May 2009. 
 
  Abstract   A substantial number of enterprises and independent software vendors are adopting a strategy in which software-intensive systems are developed with an open architecture (OA) that may contain open source software (OSS) components or components with open APIs. The emerging challenge is to realize the benefits of openness when components are subject to different copyright or property licenses. In this paper we identify key properties of OSS licenses, present a license analysis scheme to identify license conflicts arising from composed software elements, and apply it to provide guidance for software architectural design choices whose goal is to enable specific licensed component configurations. Our scheme has been implemented in an operational environment and demonstrates a practical, automated solution to the problem of determining overall rights and obligations for alternative OAs.  
  BibTeX    
    @InProceedings(Alspaugh+Asuncion+Scacchi2009-slos,
      author =       {Alspaugh, Thomas A. and Asuncion, Hazeline U. and
                     Scacchi, Walt},
      title =        {Software Licenses, Open Source Components, and Open
                     Architectures},
      booktitle =    {6th Acquisition Research Symposium},
      year =         {2009},
      month =        may,
    )
   
 
 



 2008 


 
Susan Elliott Sim, Thomas A. Alspaugh, and Ban Al-Ani. 
Marginal Notes on Amethodical Requirements Engineering: What experts learned from experience. 
In  16th IEEE International Requirements Engineering Conference (RE’08) , pages 105–114, 
8–12 Sept. 2008. 
 
  Abstract   Requirements engineers with many years of experience have a distinct perspective on the field. To sample this knowledge, we interviewed 34 requirements researchers and practitioners with up to 42 years of experience. We used open-ended structured interviews in which we asked them to reflect on their experiences and professional development as requirements engineers over their careers. Several themes emerged: requirements engineers act as bridges between the different worlds, good communication is key, good process can help but isn’t everything, shorter requirements documents can be better, and good requirements are driven by customer value not technical elegance. All of these pertain to  amethodical requirements engineering . Amethodical concepts are not rejections of method, but rather those concepts that are marginalized and left out of methods presented as prescriptions for carrying out a procedure. We discuss these results and their implications.  
  BibTeX    
    @InProceedings(Sim+Alspaugh+Al-Ani2008-mnar,
      author =       {Sim, Susan Elliott and Alspaugh, Thomas A. and
                     Al-Ani, Ban},
      title =        {Marginal Notes on Amethodical Requirements
                     Engineering: What experts learned from experience},
      pages =        {105--114},
      booktitle =    {16th IEEE International Requirements Engineering
                     Conference ({RE}'08)},
      year =         {2008},
      month =        sep,
    )
   
  doi:  10.1109/RE.2008.52  
 
 




 
Amanda M. Williams and Thomas A. Alspaugh. 
Articulating software requirements comic book style. 
In  Third International Workshop on Multimedia and Enjoyable Requirements Engineering (MERE’08) , pages 1–5, 
9 Sept. 2008. 
 
  Abstract   It is almost a truism that system stakeholders do not fully understand and communicate what they want, often until a system is produced and they see it isn’t right. Such an outcome is wasteful, expensive, and unsatisfactory. Working with requirements in comic book style provides affordances, absent or weaker in other requirements forms, that may assist stakeholders in surfacing and expressing desires sooner and developers in understanding them and each other. Appropriate incorporation of comic book style artifacts into requirements work, in addition to making it more playful and enjoyable, can contribute to greater stakeholder satisfaction and more effective software development.  
  BibTeX    
    @InProceedings(Williams+Alspaugh2008-asrc,
      author =       {Williams, Amanda M. and Alspaugh, Thomas A.},
      title =        {Articulating software requirements comic book style},
      booktitle =    {Third International Workshop on Multimedia and
                     Enjoyable Requirements Engineering (MERE'08)},
      pages =        {1--5},
      year =         {2008},
      month =        sep,
    )
   
  doi:  10.1109/MERE.2008.3  
 
 



 
Mamadou Diallo, Leila Naslavsky, Thomas A. Alspaugh, Hadar Ziv, and Debra J. Richardson. 
Toward Architecture Evaluation Through Ontology-based Requirements-level Scenarios. 
In R. de Lemos, F. Di Giandomenico, C. Gacek, H. Muccini, and M. Vieira, editors,
 Architecting Dependable Systems V , 
Springer, 2008. 
 
  Abstract   We describe an approach for evaluating whether a candidate architecture dependably satisfies stakeholder requirements expressed in requirements-level scenarios. We map scenarios to architectural elements through an ontology of requirements-level event classes and domain entities. The scenarios express both functional requirements and quality attributes of the system; for quality attributes, the scenarios either operationalize the quality or show how the quality can be verified. Our approach provides a connection between requirements a stakeholder can understand directly, and architectures developed to satisfy those requirements. The requirements-level ontology simplifies the mapping, acts as the focus for maintaining the mapping as both scenarios and architecture evolve, and provides a foundation for evaluating scenarios and architecture individually and jointly. In this paper, we focus on the mapping through event classes and demonstrate our approach with two examples.  
  BibTeX    
    @InCollection(Diallo+Naslavsky+2008-taet,
      author =       {Diallo, Mamadou and Naslavsky, Leila and Alspaugh,
                     Thomas A. and Ziv, Hadar and Richardson, Debra J.},
      title =        {Toward Architecture Evaluation Through Ontology-based
                     Requirements-level Scenarios},
      booktitle =    {Architecting Dependable Systems V},
      editor =       {de Lemos, R. and Di Giandomenico, F. and Gacek, C.
                     and Muccini, H. and Vieira, M.},
      publisher =    {Springer},
      year =         {2008},
    )
   
  doi:  10.1007/978-3-540-85571-2_10  
 
 




 
Walt Scacchi and Thomas A. Alspaugh. 
Emerging Issues in the Acquisition of Open Source Software within the U.S. Department of Defense. 
In  5th Annual Acquisition Research Symposium , 
14–15 May 2008. 
 
  Abstract   In the past five or so years, it has become clear that the U.S. Air Force, Army, and Navy have all committed to a strategy of acquiring software-intensive systems that require or utilize an ‘‘open architecture’’ (OA) and ‘‘open technology’’ (OT) which may incorporate OSS technology or OSS development processes. There are many perceived benefits and anticipated cost savings associated with an OA strategy. However, the challenge for acquisition program managers is how to realize the savings and benefits through requirements that can be brought into system development practice. As such, the central problem we examine in this paper is to identify principles of software architecture and OSS copyright licenses that facilitate or inhibit the success of an OA strategy when OSS and open APIs are required or otherwise employed. By examining and analyzing this problem we can begin to identify what additional requirements may be needed to fulfill an OA strategy during program acquisition.  
  BibTeX    
    @InProceedings(Scacchi+Alspaugh2008-eiao,
      author =       {Scacchi, Walt and Alspaugh, Thomas A.},
      title =        {Emerging Issues in the Acquisition of Open Source
                     Software within the {U.S. Department of Defense}},
      booktitle =    {5th Annual Acquisition Research Symposium},
      year =         {2008},
      month =        may,
    )
   
 
 



 
Thomas A. Alspaugh and Annie I. Antón. 
Scenario support for effective requirements. 
 Information and Software Technology , 50(3):198–220,
Feb. 2008. 
 
  Abstract   Scenarios are widely used as requirements, and the quality of requirements is an important factor in the efficiency and success of a development project. The informal nature of scenarios requires that analysts do much manual work with them, and much tedious and detailed effort is needed to make a collection of scenarios well-defined, relatively complete, minimal, and coherent. We discuss six aspects of scenarios having inherent structure on which automated support may be based, and the results of using such support. This automated support frees analysts to concentrate on tasks requiring human intelligence, resulting in higher-quality scenarios for better system requirements. Two studies validating the work are presented.  
  BibTeX    
    @Article(Alspaugh+Anton2008-sser,
      author =       {Alspaugh, Thomas A. and Ant{\'o}n, Annie I.},
      title =        {Scenario support for effective requirements},
      volume =       {50},
      number =       {3},
      pages =        {198--220},
      year =         {2008},
      month =        feb,
      journal =      {Information and Software Technology},
    )
   
  doi:  10.1016/j.infsof.2006.12.003  
 
 



 2007 


 
Mamadou Diallo, Susan Elliott Sim, and Thomas A. Alspaugh. 
Case Study, Interrupted: The Paucity of Subject Systems that Span the Requirements-Architecture Gap. 
In  First Workshop on Empirical Assessment of Software Engineering Languages and Technologies (WEASELTech’07) , 
5 Nov. 2007. 
 
  Abstract   A number of approaches for spanning the requirements-architecture gap have been published in recent years, and we sought to rigorously characterize the gap and to conduct a comparative evaluation of approaches to span the gap using a case study method on a realistic problem. However, our intentions were impeded by the problem of finding appropriate subject systems that included sufficient information in both requirements and architecture document. Most subject systems that we found contained either detailed requirements or detailed architecture description, but not both. In this paper, we report on our search and the seventeen most suitable subject systems with the hope of aiding others undertaking a similar study. We speculate on the reasons for the paucity of suitable subject systems and invite contributions and suggestions for our ongoing work.  
  BibTeX    
    @InProceedings(Diallo+Sim+Alspaugh2007-csip,
      author =       {Diallo, Mamadou and Sim, Susan Elliott and Alspaugh,
                     Thomas A.},
      title =        {Case Study, Interrupted: The Paucity of Subject
                     Systems that Span the Requirements-Architecture Gap},
      booktitle =    {First Workshop on Empirical Assessment of Software
                     Engineering Languages and Technologies (WEASELTech'07)},
      year =         {2007},
      month =        nov,
    )
   
 
 



 
Thomas A. Alspaugh, Susan Elliott Sim, Kristina Winbladh, Mamadou Diallo, Hadar Ziv, and Debra J. Richardson. 
Clarity for Stakeholders: Empirical Evaluation of ScenarioML, Use Cases, and Sequence Diagrams. 
In  Fifth International Workshop on Comparative Evaluation in Requirements Engineering (CERE’07) , pages 1–10, 
16 Oct. 2007. 
 
  Abstract   We studied the clarity of three requirements forms, operationalized as ease of problem detection, freedom from obstructions to understanding, and understandability by a variety of stakeholders. A set of use cases for an industrial system was translated into ScenarioML scenarios and into sequence diagrams; problems identified during each translation were noted; and all three forms were presented to a range of system stakeholders, who were interviewed before and after performing tasks using the forms. The data was analyzed, and convergent results were triangulated across data sources and methods. The data indicated that ScenarioML scenarios best support requirements clarity, then sequence diagrams but only for stakeholders experienced with them, and finally use cases as the least clear form.  
  BibTeX    
    @InProceedings(Alspaugh+Sim+2007-csee,
      author =       {Alspaugh, Thomas A. and Sim, Susan Elliott and
                     Winbladh, Kristina and Diallo, Mamadou and Ziv, Hadar
                     and Richardson, Debra J.},
      title =        {Clarity for Stakeholders: Empirical Evaluation of
                     ScenarioML, Use Cases, and Sequence Diagrams},
      pages =        {1--10},
      booktitle =    {{Fifth International Workshop on Comparative
                     Evaluation in Requirements Engineering (CERE'07)}},
      year =         {2007},
      month =        oct,
    )
   
 
 



 
Mamadou H. Diallo, Leila Naslavsky, Hadar Ziv, Thomas A. Alspaugh, and Debra J. Richardson. 
Evaluating Software Architectures Against Requirements-level Scenarios. 
In  Third International Workshop on the Role of Software Architecture for Testing and Analysis (ROSATEA’07) , 
10–11 July 2007. 
 
  Abstract   Scenarios have been used to express requirements and system behavior throughout software development. Scenarios are used with different representation and semantics across software phases, and these can be related. This paper argues for exploring scenarios as one means for mapping requirements to architecture as well as evaluating architectures against requirements-level scenarios. Additionally, our approach facilitates consistency-checking between requirements and architectures. In our approach, software requirements take the form of ontology-based scenarios, while architectures are described using both structural and behavioral models. Mapping from requirements to architectures is modeled explicitly, then the mapping-model is used to evaluate architectures against original requirements-level scenarios.  
  BibTeX    
    @InProceedings(Diallo+Naslavsky+2007-esaa,
      author =       {Diallo, Mamadou H. and Naslavsky, Leila and Ziv,
                     Hadar and Alspaugh, Thomas A. and Richardson, Debra J.},
      title =        {Evaluating Software Architectures Against
                     Requirements-level Scenarios},
      booktitle =    {Third International Workshop on the Role of Software
                     Architecture for Testing and Analysis (ROSATEA'07)},
      year =         {2007},
      month =        jul,
    )
   
 
 



 
Rand Waltzman, Kristina Winbladh, Thomas A. Alspaugh, and Debra J. Richardson. 
In the Requirements Lies the Power. 
In  International Conference on Software Engineering and Knowledge Engineering (SEKE’07) , 
9–11 July 2007. 
 
  Abstract   To produce better quality software at reasonable cost, we propose requirements-based testing, in which testing is driven directly from the requirements and faults that prevent the product from meeting its requirements are detected. Our approach makes use of requirements in the form of goals and scenarios. From these we generate test scenarios that drive the system under test through particular paths of the scenarios, and a test harness that verifies the system follows the particular path and meets its conditions. Because our test scenarios are derived directly from the requirements, a major benefit of the process of writing test scenarios is the identification of poorly formulated requirements. We applied our approach to a sample software system and to mutants of it generated by MuJava. Our approach was effective at finding implementation faults that caused the system to diverge from the requirements.  
  BibTeX    
    @InProceedings(Waltzman+Winbladh+2007-rlp,
      author =       {Waltzman, Rand and Winbladh, Kristina and Alspaugh,
                     Thomas A. and Richardson, Debra J.},
      title =        {In the Requirements Lies the Power},
      booktitle =    {International Conference on Software Engineering and
                     Knowledge Engineering (SEKE'07)},
      year =         {2007},
      month =        jul,
    )
   
 
 




 2006 


 
Lihua Xu, Hadar Ziv, Thomas A. Alspaugh, and Debra J. Richardson. 
An architectural pattern for non-functional dependability requirements. 
 Journal of Systems and Software , 79(10):1370–1378,
Oct. 2006. 
 
  Abstract   We address the research question of transforming dependability requirements into corresponding software architecture constructs, by proposing first that dependability needs can be classified into three types of requirements and second, an architectural pattern that allows requirements engineers and architects to map the three types of dependability requirements into three corresponding types of architectural components. The proposed pattern is general enough to work with existing requirements techniques and existing software architectural styles, including enterprise and product-line architectures.  
  BibTeX    
    @Article(Xu+Ziv+2006-apnf,
      author =       {Xu, Lihua and Ziv, Hadar and Alspaugh, Thomas A. and
                     Richardson, Debra J.},
      title =        {An architectural pattern for non-functional
                     dependability requirements},
      volume =       {79},
      number =       {10},
      pages =        {1370--1378},
      year =         {2006},
      month =        oct,
      journal =      {Journal of Systems and Software},
    )
   
  doi:  10.1016/j.jss.2006.02.061  
 
 



 
Kristina Winbladh, Thomas A. Alspaugh, Hadar Ziv, and Debra J. Richardson. 
An Automated Approach for Goal-driven, Specification-based Testing. 
In  21st International Conference on Automated Software Engineering (ASE 2006) , pages 289–292, 
18–22 Sept. 2006. 
 
  Abstract   This paper presents a specification-based approach that addresses several known challenges including false positives and domain knowledge errors. Our approach begins with a goal graph and plans. Source code is annotated with goals and events and precompiled to emit those at run time. Plans are automatically translated into a rule-based recognizer. An oracle is produced from the pre- and postconditions associated with the plan’s goals. When the program is executed, goals and events are emitted and automatically tested against plans and oracles. The concept is demonstrated on a small example and a larger publicly available case study.  
  BibTeX    
    @InProceedings(Winbladh+Alspaugh+2006-aagd,
      author =       {Winbladh, Kristina and Alspaugh, Thomas A. and Ziv,
                     Hadar and Richardson, Debra J.},
      title =        {An Automated Approach for Goal-driven,
                     Specification-based Testing},
      pages =        {289--292},
      booktitle =    {21st International Conference on Automated Software
                     Engineering (ASE 2006)},
      year =         {2006},
      month =        sep,
    )
   
  doi:  10.1109/ASE.2006.11  
 
 




 
Thomas A. Alspaugh, Eric Baumer, and Bill Tomlinson. 
On a Mixed-Methods Evaluation of a Social-Agent Scenario Visualization. 
In  Fourth International Workshop on Comparative Evaluation in Requirements Engineering (CERE’06) , pages 60–65, 
11 Sept. 2006. 
 
  Abstract   Scenarios are a well-explored technique for working with and understanding a system’s requirements. However, comprehending a large group of scenarios for a system can be difficult, especially for non-experts. Our previous work proposed that visualizing scenarios using social animated characters could assist this process. However, assessing the efficacy of visualization techniques can be challenging. This paper proposes that a mixed-method study combining qualitative and quantitative analysis can be effective for evaluating a social visualization of a group of scenarios. Specifically, we found that the quantitative data addressed focused hypotheses, while the qualitative data gave us insight into the nature of scenarios in requirements, the goals of scenario visualization, and how the technology can support these goals more effectively. Both forms of analysis can be valuable and mutually reinforcing in developing and evaluating effective social visualizations of scenarios, and by extension for other work in RE as well.  
  BibTeX    
    @InProceedings(Alspaugh+Baumer+Tomlinson2006-mmes,
      author =       {Alspaugh, Thomas A. and Baumer, Eric and Tomlinson,
                     Bill},
      title =        {On a Mixed-Methods Evaluation of a Social-Agent
                     Scenario Visualization},
      pages =        {60--65},
      booktitle =    {{Fourth International Workshop on Comparative
                     Evaluation in Requirements Engineering (CERE'06)}},
      year =         {2006},
      month =        sep,
    )
   
  doi:  10.1109/CERE.2006.7  
 
 




 
Thomas A. Alspaugh, Bill Tomlinson, and Eric Baumer. 
Using Social Agents to Visualize Software Scenarios. 
In  ACM Symposium on Software Visualization (SOFTVIS’06) , pages 87–94, 
4–5 Sept. 2006. 
 
  Abstract   Enabling nonexperts to understand a software system and the scenarios of usage of that system can be challenging. Visually modeling a collection of scenarios as social interactions can provide quicker and more intuitive understanding of the system described by those scenarios. This project combines a scenario language with formal structure and automated tool support (ScenarioML) and an interactive graphical game engine featuring social autonomous characters and text-to-speech capabilities. We map scenarios to social interactions by assigning a character to each actor and entity in the scenarios, and animate the interactions among these as social interactions among the corresponding characters. The social interactions can help bring out these important aspects: interactions of multiple agents, pattern and timing of interactions, non-local inconsistencies within and among scenarios, and gaps and missing information in the scenario collection. An exploratory study of this modeling’s effectiveness is presented.  
  BibTeX    
    @InProceedings(Alspaugh+Tomlinson+Baumer2006-usav,
      author =       {Alspaugh, Thomas A. and Tomlinson, Bill and Baumer,
                     Eric},
      title =        {Using Social Agents to Visualize Software Scenarios},
      booktitle =    {ACM Symposium on Software Visualization (SOFTVIS'06)},
      pages =        {87--94},
      year =         {2006},
      month =        sep,
    )
   
  doi:  10.1145/1148493.1148507  
    movie  
 
 




 
Kristina Winbladh, Thomas A. Alspaugh, Hadar Ziv, and Debra J. Richardson. 
Architecture-based Testing Using Goals and Plans. 
In  Second International Workshop on the Role of Software Architecture for Testing and Analysis (ROSATEA’06) , 
17 July 2006. 
 
  Abstract   This paper presents a specification-based testing approach that compares software specifications defined at different levels of abstraction, e.g. architecture and implementation, against specified system goals. We believe that a goal-driven approach that connects several development artifacts through verification of specified goals provides useful traceability links between those artifacts as well as an efficient testing technique. Our approach begins with a system goal graph in which high-level goals are step-wise refined into low-level functional goals that can be realized as code components. Each of the architectural components is associated with a plan that describes the component’s functional behavior. Source code is annotated with goals from plans and events that achieve the goals; code is then precompiled to emit those goals and events at run time. Plans are automatically translated into a rule-based recognizer. An oracle is produced from the pre- and post-conditions associated with the plan’s goals. When the program executes, the goals and events emitted are automatically tested against the plans and expected results. As components achieve their component-level plans, a higher-level plan recognizer, concerned with the integration of components, can verify correct system behavior over the interaction trace of a collection of lower-level plans. A small example illustrates the concept.  
  BibTeX    
    @InProceedings(Winbladh+Alspaugh+2006-abtu,
      author =       {Winbladh, Kristina and Alspaugh, Thomas A. and Ziv,
                     Hadar and Richardson, Debra J.},
      title =        {Architecture-based Testing Using Goals and Plans},
      booktitle =    {Second International Workshop on the Role of Software
                     Architecture for Testing and Analysis (ROSATEA'06)},
      year =         {2006},
      month =        jul,
    )
   
 
 



 
Eric Baumer, Bill Tomlinson, Man Lok Yau, and Thomas A. Alspaugh. 
Normative Echoes: use and manipulation of player generated content by communities of NPCs. 
In  Artificial Intelligence and Interactive Digital Entertainment (AIIDE-06) , 
20–23 June 2006. 
 
  Abstract   Normative Echoes is an interactive installation that explores ways to combine player-created content with procedural content. Animated autonomous agents inhabit virtual islands on stationary computers; a tablet PC is used as a virtual raft to transfer agents between the islands. The agents on each island communicate with one another and form scenario-based computational representations of their social interactions. These scenarios represent emergent social patterns and norms within the society. Humans can communicate with the animated autonomous agents through the use of a microphone. Utterances spoken by participants are parsed, repeated, and learned by agents, then used by the agents in communications with their social partners. When transferred between islands, agents bring with themselves the utterances and norms they have learned, thus spreading those norms throughout the various communities in the installation. In this way, agents can meaningfully perform procedural operations on player-created content, allowing for a dynamic and engaging experience.  
  BibTeX    
    @InProceedings(Baumer+Tomlinson+2006-neum,
      author =       {Baumer, Eric and Tomlinson, Bill and Yau, Man Lok and
                     Alspaugh, Thomas A.},
      title =        {Normative Echoes: use and manipulation of player
                     generated content by communities of {NPC}s},
      booktitle =    {Artificial Intelligence and Interactive Digital
                     Entertainment (AIIDE-06)},
      year =         {2006},
      month =        jun,
    )
   
    movie  
 
 




 
Mamadou H. Diallo, Jose Romero-Mariona, Susan Elliot Sim, Thomas A. Alspaugh, and Debra J. Richardson. 
A Comparative Evaluation of Three Approaches to Specifying Security Requirements. 
In  12th International Working Conference on Requirements Engineering: Foundation for Software Quality (REFSQ’06) , 
5–6 June 2006. 
 
  Abstract   As software systems and networks continue to evolve, so do threats to their security. Unfortunately, most security issues come to light only after completion of the system because security is often managed in an ad hoc fashion late in the software lifecycle. There are many advantages to incorporating security specification into the requirements phase and a number of approaches have been proposed. In this paper, we present a comparative evaluation of three such approaches: The Common Criteria, Misuse Cases, and Attack Trees. We applied each of these approaches to a common problem, a wireless hotspot, and evaluated them for learnability, usability, solution inclusiveness, clarity of output, and analyzability. We found that each approach has strengths and weaknesses, and that they can be complimentary when combined. The Common Criteria are difficult to learn and use, but are easy to analyze. Misuse Cases are easy to learn and use, but produces output that is hard to read. In contrast, Attack Trees produce clear output, but are difficult to analyze.  
  BibTeX    
    @InProceedings(Diallo+Romero-Mariona+2006-ceta,
      author =       {Diallo, Mamadou H. and Romero-Mariona, Jose and Sim,
                     Susan Elliot and Alspaugh, Thomas A. and Richardson,
                     Debra J.},
      title =        {A Comparative Evaluation of Three Approaches to
                     Specifying Security Requirements},
      booktitle =    {12th International Working Conference on Requirements
                     Engineering: Foundation for Software Quality
                     ({REFSQ}'06)},
      year =         {2006},
      month =        jun,
    )
   
 
 




 2005 


 
Leila Naslavsky, Thomas A. Alspaugh, Debra J. Richardson, and Hadar Ziv. 
Using Scenarios to Support Traceability. 
In  3rd International Workshop on Traceability in Emerging Forms of Software Engineering (TEFSE’05) , 
Nov. 2005. 
 
  Abstract   Software traceability is a recognized problem in software development that can be alleviated with requirements management tools. Traceability information can be used in a number of different software engineering activities such as software change impact analysis and testing. One main challenge to automation of software testing is mapping modeling to code concepts. The level of granularity and the semantics supported by available requirements management tools does not, however, fully support such mapping, nor more sophisticated requirement change impact analysis. Scenarios have been used as an alternative (and sometimes complementary) way to express requirements and system behavior throughout the software phases. Their use has different representation and semantics across software phases, which can be related. This paper argues for exploring scenarios as one means for tracing requirements to code, and using this information to leverage automation of activities that benefit from traceability such as change impact analysis and software testing.  
  BibTeX    
    @InProceedings(Naslavsky+Alspaugh+2005-usst,
      author =       {Naslavsky, Leila and Alspaugh, Thomas A. and
                     Richardson, Debra J. and Ziv, Hadar},
      title =        {Using Scenarios to Support Traceability},
      booktitle =    {3rd International Workshop on Traceability in
                     Emerging Forms of Software Engineering (TEFSE'05)},
      year =         {2005},
      month =        nov,
    )
   
  doi:  10.1145/1107656.1107663  
 
 



 
Lihua Xu, Hadar Ziv, Debra Richardson, and Thomas A. Alspaugh. 
An architectural pattern for non-functional dependability requirements. 
In  ICSE 2005 Workshop on Architecting Dependable Systems (WADS 2005) , pages 1–6, 
15–17 Aug. 2005. 
 
  Abstract   We address the research question of transforming dependability requirements into corresponding software architecture constructs. by proposing first that dependability needs can be classified into three types of requirements and second, an architectural pattern that allows requirements engineers and architects to map dependability requirements into three corresponding types of architectural components. The proposed pattern is general enough to work with existing requirements techniques and existing software architectural styles, including enterprise and product-line architectures.  
  BibTeX    
    @InProceedings(Xu+Ziv+2005-apnf,
      author =       {Xu, Lihua and Ziv, Hadar and Richardson, Debra and
                     Alspaugh, Thomas A.},
      title =        {An architectural pattern for non-functional
                     dependability requirements},
      booktitle =    {ICSE 2005 Workshop on Architecting Dependable Systems
                     (WADS 2005)},
      pages =        {1--6},
      year =         {2005},
      month =        aug,
    )
   
  doi:  10.1145/1083217.1083219  
 
 



 
Thomas A. Alspaugh, Debra J. Richardson, Thomas A. Standish, and Hadar Ziv. 
Scenario-driven Specification-based Testing against Goals and Requirements. 
In  11th International Workshop on Requirements Engineering: Foundation for Software Quality (REFSQ’05) , pages 201–216, 
13–14 June 2005. 
 
  Abstract   We describe a new verification and validation (V&amp;V) approach based on comparing actual system behavior in the form of captured goal-annotated event traces with expected behavior expressed by requirements scenarios that are tied to system requirements goals. We believe our V&amp;V approach can leverage requirements engineering work in a fruitful manner that leads to improved software quality because it offers six potential benefits in the form of improved capabilities for: (1) higher-yield testing, (2) distinguishing false positives, (3) defining test coverage metrics, (4) detecting domain-analysis errors, (5) validating top-level requirements, and (6) efficiently controlling the degree of retesting. We use examples to explain how our method can attain these six potential benefits. If our goal/requirements-based V&amp;V techniques can succeed in realizing these six potential benefits, we believe they will lead to improved requirements practices that, in turn, can successfully attain improved software quality.  
  BibTeX    
    @InProceedings(Alspaugh+Richardson+2005-sdsb,
      author =       {Alspaugh, Thomas A. and Richardson, Debra J. and
                     Standish, Thomas A. and Ziv, Hadar},
      title =        {Scenario-driven Specification-based Testing against
                     Goals and Requirements},
      pages =        {201--216},
      booktitle =    {11th International Workshop on Requirements
                     Engineering: Foundation for Software Quality
                     ({REFSQ}'05)},
      year =         {2005},
      month =        jun,
    )
   
 
 



 
Thomas A. Alspaugh, Debra J. Richardson, and Thomas A. Standish. 
Scenarios, State Machines, and Purpose-Driven Testing. 
In  4th International Workshop on Scenarios and State Machines: Models, Algorithms and Tools (SCESM’05) , pages 1–5, 
21 May 2005. 
 
  Abstract   Testing is a necessary but frequently expensive activity that is needed to ensure software quality. For large, complex systems, testing based on covering all control flow or all data flow paths is intractable. But focusing on tests that are purpose-driven, namely on tests that are derived from system requirements and that test whether requirements goals are met, significantly reduces the size of a ‘‘complete’’ test suite for the system while simultaneously increasing confidence that the system performs as expected. Scenarios and state machines provide a useful framework for modeling and analysis of purpose-driven testing. Scenarios are sequences of events that represent purposeful uses of a system (or of its components, to any desired degree of detail). State machines, in the form of recursive transition diagrams, can model the successive refinement of requirements goals into architectures and implementations, and testing them using purpose-driven scenario-based tests provides early validation of that refinement. Formulating sets of scenarios that capture and represent a complete-enough set of requirements ensures that a test suite covering them explores all important regions of a system’s state space. The scenario-based tests will predict with high confidence which system goals have been met, and, certainly, which have not. This position paper sketches elements of our approach to purpose-driven testing using scenarios and state machines.  
  BibTeX    
    @InProceedings(Alspaugh+Richardson+Standish2005-ssmp,
      author =       {Alspaugh, Thomas A. and Richardson, Debra J. and
                     Standish, Thomas A.},
      title =        {Scenarios, State Machines, and Purpose-Driven Testing},
      booktitle =    {4th International Workshop on Scenarios and State
                     Machines: Models, Algorithms and Tools (SCESM'05)},
      pages =        {1--5},
      year =         {2005},
      month =        may,
    )
   
  doi:  10.1145/1083183.1083185  
 
 



 2004 

 2003 


 
Thomas A. Alspaugh and Annie I. Antón. 
Contrasting Use Case, Goal, and Scenario Analysis of the Euronet System. 
In  11th IEEE Joint International Conference on Requirements Engineering (RE’03) , pages 355–356, 
8–12 Sept. 2003. 
 
  Abstract   In this research, we compare three related requirements engineering efforts: an industrial effort based on use cases; a case study analyzing these use cases by means of goal analysis; and a case study analyzing the same use cases with an integrated scenario analysis approach.  
  BibTeX    
    @InProceedings(Alspaugh+Anton2003-cucg,
      author =       {Alspaugh, Thomas A. and Ant{\'o}n, Annie I.},
      title =        {Contrasting Use Case, Goal, and Scenario Analysis of
                     the {Euronet} System},
      booktitle =    {11th {IEEE} Joint International Conference on
                     Requirements Engineering ({RE}'03)},
      pages =        {355--356},
      year =         {2003},
      month =        sep,
    )
   
  doi:  10.1109/ICRE.2003.1232784  
 
 



 
William Stufflebeam, Annie I. Antón, and Thomas A. Alspaugh. 
SMaRT — Scenario Management and Requirements Tool. 
In  11th IEEE Joint International Conference on Requirements Engineering (RE’03) , page 351, 
8–12 Sept. 2003. 
 
  Abstract   Requirements elicitation, derivation, refinement, and specification are all very time and effort intensive activities. With effective tool support, the time and effort required for these activities can be significantly reduced. The right tool will also reduce the learning curve for individuals new to Requirements Engineering by simplifying the requirements phase in its entirety. To this end, we will demonstrate the Scenario Management and Requirements Tool (SMaRT). It provides an intuitive web-based interface that supports analysts as they input, manage, view, analyze, and work with scenarios and their associated episodes, requirements, goals, obstacles, and pre- and postconditions. The tool also supports project management functions, and over the course of the next few years it will grow to encompass greater functionality through the implementation of: similarity measures to aid in the automatic identification of probable duplication, syntactic indicators of scenario dependencies, notifiers of probable coverage gaps, procedural guidance for analysts, as well as revision and evolution tracking mechanisms.  
  BibTeX    
    @InProceedings(Stufflebeam+Anton+Alspaugh2003-ssmr,
      author =       {Stufflebeam, William and Ant{\'o}n, Annie I. and
                     Alspaugh, Thomas A.},
      title =        {{SMaRT} --- Scenario Management and Requirements Tool},
      pages =        {351},
      booktitle =    {11th {IEEE} Joint International Conference on
                     Requirements Engineering ({RE}'03)},
      year =         {2003},
      month =        sep,
    )
   
  doi:  10.1109/ICRE.2003.1232782  
 
 



 2002 


 
Thomas A. Alspaugh. 
Scenario networks and formalization for scenario management. 
PhD thesis, North Carolina State University, 23 Sept. 2002. 
 
  Abstract   Scenarios are widely used to specify the behavior of software due to their informality and accessibility. However, their informality makes them difficult to analyze and manage. We address these difficulties with two complementary approaches, one syntactic and one semantic, that add a small amount of structure to scenarios to allow automated analyses and support. The syntactic approach represents a scenario as a set of attribute-value pairs, some of which may also be viewed as events, each of which is an actor-action pair, that are arranged in a sequence. This representation supports the use of episodes (shared subsequences of events) to show dependency relationships between scenarios and to help maintain those relationships as the scenarios evolve. The representation also supports automated measures of similarity between scenarios, to find duplicates or near-duplicates, searching in a collection of scenarios, and assess requirements coverage and completeness of the collection. The representation can be analyzed for consistency of various attributes within individual scenarios. The semantic approach integrates the scenarios that describe a system into a network that expresses which scenarios can follow each other. The network expresses the context expected by the events of each scenario and the temporal relationships between the scenarios. This information is either implicit or incomplete for an ordinary collection of scenarios. Construction of a scenario network provides process guidance for assessing and improving completeness and consistency of the scenario collection. A scenario network represents equivalence relationships between scenarios, and these relationships can be used to organize and classify the scenarios and to maintain the temporal relationships between scenarios as the scenarios evolve. A scenario network can be analyzed to evaluate completeness of the scenario collection and several kinds of consistency between scenarios in the collection. Together the syntactic and semantic approaches form an effective approach for addressing the scenario management problem, which has not been effectively addresses heretofore.  
  BibTeX    
    @PhDThesis(Alspaugh2002-snfs,
      author =       {Alspaugh, Thomas A.},
      title =        {Scenario networks and formalization for scenario
                     management},
      school =       {North Carolina State University},
      address =      {Raleigh, NC},
      year =         {2002},
      month =        sep,
    )
   
 
 



 2001 


 
Annie I. Antón, Julia B. Earp, Colin Potts, and Thomas A. Alspaugh. 
The Role of Policy and Stakeholder Privacy Values in Requirements Engineering. 
In  Fifth IEEE International Symposium on Requirements Engineering (RE’01) , pages 138–145, 
27–31 Aug. 2001. 
 
  Abstract   Diverse uses of information technology (IT) in organizations affect privacy. Developers of electronic commerce, database management, security mechanisms, telecommunication and collaborative systems should be aware of these effects and acknowledge the need for early privacy planning during the requirements definition activity. Public concerns about the collection of personal information by consumer-based Web sites have led most organizations running such sites to establish and publish privacy policies. However, these policies often fail to align with prevalent societal values on one hand and the operational functioning of web-based applications on the other. Assuming that such misalignments stem from imperfect appreciation of consequences and not an intent to deceive, we discuss concepts, tools and techniques to help requirements engineers and IT policy makers bring policies and system requirements into better alignment. Our objective is to encourage RE researchers and practitioners to adopt a more holistic view of application and system specification, in which a system or application is seen as an engine of policy enforcement and values attainment.  
  BibTeX    
    @InProceedings(Anton+Earp+2001-rpsp,
      author =       {Ant{\'o}n, Annie I. and Earp, Julia B. and Potts,
                     Colin and Alspaugh, Thomas A.},
      title =        {The Role of Policy and Stakeholder Privacy Values in
                     Requirements Engineering},
      pages =        {138--145},
      booktitle =    {Fifth IEEE International Symposium on Requirements
                     Engineering ({RE}'01)},
      year =         {2001},
      month =        aug,
    )
   
  doi:  10.1109/ISRE.2001.948553  
 
 




 
Thomas A. Alspaugh and Annie I. Antón. 
Scenario Networks: A case study of the Enhanced Messaging System. 
In  7th International Workshop on Requirements Engineering: Foundation for Software Quality (REFSQ’01) , pages 113–124, 
4–5 June 2001. 
 
  Abstract   Scenarios are widely used to specify desired system behavior. In this paper, we discuss a case study of an enhanced voice messaging system, in which the scenarios describing it were assembled into a scenario network. In a scenario network, each scenario is connected to those that may follow it. The resulting scenario network provides a specification of the entire system. The process of creating the scenario network improved the quality of the resulting specification by enabling us to identify gaps and inconsistencies that reviews and walkthroughs had not uncovered. Production of a scenario network compels analysts to improve the coverage and correctness of a set of scenarios, thereby improving the requirements engineering process and the resulting documentation.  
  BibTeX    
    @InProceedings(Alspaugh+Anton2001-sncs,
      author =       {Alspaugh, Thomas A. and Ant{\'o}n, Annie I.},
      title =        {Scenario Networks: {A} case study of the Enhanced
                     Messaging System},
      pages =        {113--124},
      booktitle =    {7th International Workshop on Requirements
                     Engineering: Foundation for Software Quality
                     ({REFSQ}'01)},
      year =         {2001},
      month =        jun,
    )
   
 
 



 2000 


 1999 


 
Thomas A. Alspaugh, Annie I. Antón, Tiffany Barnes, and Bradford W. Mott. 
An Integrated Scenario Management Strategy. 
In  Fourth IEEE International Symposium on Requirements Engineering (RE’99) , pages 142–149, 
7–11 June 1999. 
 
  Abstract   Scenarios have proven effective for eliciting, describing and validating software requirements; however, scenario management continues to be a significant challenge to practitioners. One reason for this difficulty is that the number of possible relations among scenarios grows exponentially with the number of scenarios. If these relations are formalized, they can be more easily identified and supported. To provide this support, we extend the benefits of project-wide glossaries with two complementary approaches. The first approach employs shared scenario elements to identify and maintain common episodes among scenarios. The resulting episodes impose consistency across related scenarios and provide a way to visualize their interdependencies. The second approach quantifies similarity between scenarios. The resulting similarity measures serve as heuristics for finding duplicate scenarios, scenarios needing further elaboration, and scenarios which have not yet been identified yielding valuable information about how well the scenarios provide coverage of the requirements. These two approaches, integrated with a scenario database, project glossaries, configuration management, and coverage analysis, form the basis of a useful and effective strategy for scenario management and evolution.  
  BibTeX    
    @InProceedings(Alspaugh+Anton+1999-isms,
      author =       {Alspaugh, Thomas A. and Ant{\'o}n, Annie I. and
                     Barnes, Tiffany and Mott, Bradford W.},
      title =        {An Integrated Scenario Management Strategy},
      pages =        {142--149},
      booktitle =    {Fourth {IEEE} International Symposium on Requirements
                     Engineering ({RE}'99)},
      year =         {1999},
      month =        jun,
    )
   
  doi:  10.1109/ISRE.1999.777994  
 
 




 1992 


 
Thomas A. Alspaugh, Stuart R. Faulk, Kathryn Heninger Britton, R. Alan Parker, David L. Parnas, and John E. Shore. Software Requirements for the A-7E Aircraft. 
NRL Memorandum Report 3876. 
Naval Research Laboratory, Washington, DC. 
31 Aug., 1992. 
 
  Abstract   This document is the second published release of the Software Requirements of the A-7E Aircraft [ref NRL Memorandum Report 3876]. The first release, published in November 1978, introduced a new approach to specifying requirements for real-time embedded systems in the form of an engineering model. That document has been perhaps the most successful of the publications of NRL’s Software Cost Reduction project in terms of the interest generated and the number of copies requested since its introduction.   In spite of its success (in a sense, because of it) the specification has changed in many details over the years. This is not the result of flaws in its design, but the fulfillment of its creators’ vision that the requirements should be a ‘‘living document;’’ i.e., that it would serve as the primary reference document for system designers, as well as the authoritative ‘‘test to’’ document for program validation, and be useful throughout the system development process. Because the document has served these purposes as well, it has changed over the years as requirements became better understood. Further, since the document is intended to serve as a model document, we have felt free to change it as better specifications techniques have been developed. This release represents the accumulation of those changes from the original publication in November 1978 to the end of the SCR project in December 1988.    In spite of many changes in its particulars, the reader will find the document remarkably unchanged in its overall structure and approach. One of the principles guiding the original design was that because requirements change, the requirements specification should be easy to change. As a result, incremental changes and improvements have been easy to accommodate over the years without disrupting the essential document structure.[Chmu82]    This remainder of this preface gives a brief overview of the software requirements specification methodology developed as part of the Software Cost Reduction (SCR) project at the Naval Research Laboratory. A good description of the role of requirements specification in the development process is given in [Heni80] and [Hest81].   
  BibTeX    
    @TechReport(Alspaugh+Faulk+1992-sra7,
      author =       {Alspaugh, Thomas A. and Faulk, Stuart R. and Heninger
                     Britton, Kathryn and Parker, R. Alan and Parnas, David
                     L. and Shore, John E.},
      title =        {Software Requirements for the {A-7E} Aircraft},
      type =         {NRL Memorandum Report},
      number =       {3876},
      institution =  {Naval Research Laboratory},
      address =      {Washington, DC},
      year =         {1992},
      month =        aug,
    )
   
  doi:  100.2/ADA255746  
 
 













 

 

 
 
     
      
 
 2010May16Su21:42 
 
 Thomas A. Alspaugh 
  alspaugh 
     at  · ics · uci · edu 
      
 
 


</body> 