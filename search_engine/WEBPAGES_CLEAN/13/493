 // MainFrame - run an Applet as an application
//
// Copyright (C) 1996 by Jef Poskanzer .  All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE.
//
// Visit the ACME Labs Java page for up-to-date versions of this and other
// fine Java utilities: http://www.acme.com/java/
//
// PS DON'T COPY THIS VERSION - TAKE JEF'S INSTEAD.
// I HACKED IT TO NOT REQUIRE sun.* CLASSES THAT DON'T EXIST ON MY MACHINE
// BUT LOST AUDIO FUNCTIONALITY IN THE PROCESS.
// D. Eppstein, UC Irvine, http://www.ics.uci.edu/~eppstein/, 25 Jun 1997

package Acme;

import java.applet.*;
import java.awt.*;
import java.awt.image.*;
import java.net.*;
import java.io.*;
import java.util.*;

/// Run an Applet as an application.
//  
// Using this class you can add a trivial main program to any Applet
// and run it directly, as well as from a browser or the appletviewer.
// And unlike some versions of this concept, MainFrame implements both
// images and sound.
//   
// Sample main program:
//    
// public static void main( String[] args )
//     {
//     new Acme.MainFrame( new ThisApplet(), args, 400, 400 );
//     }
//   
// The only methods you need to know about are the constructors.
//  
// You can specify Applet parameters on the command line, as name=value.
// For instance, the equivalent of:
//    
// &lt;PARAM NAME="pause" VALUE="200"&gt;
//   
// would just be:
//   
// pause=200
//   
// You can also specify three special parameters:
//   
// width=N          Width of the Applet.
// height=N         Height of the Applet.
// barebones=true   Leave off the menu bar and status area.
//   
//  
//  Fetch the software.  
//  Fetch the entire Acme package. 

public class MainFrame extends Frame

    implements Runnable, AppletStub, AppletContext
    {

    private String[] args = null;
    private static int instances = 0;
    private String name;
    private boolean barebones = false;
    private Applet applet;
    private Label label = null;
    private Dimension appletSize;

    private static final String PARAM_PROP_PREFIX = "parameter.";

    /// Constructor with everything specified.
    public MainFrame(
	Applet applet, String[] args, int width, int height )
	{
	build( applet, args, width, height );
	}

    /// Constructor with no default width/height.
    public MainFrame( Applet applet, String[] args )
	{
	build( applet, args, -1, -1 );
	}

    /// Constructor with no arg parsing.
    public MainFrame( Applet applet, int width, int height )
	{
	build( applet, null, width, height );
	}

// Use menu item not name, allow caller to change strings -- DE
public static MenuItem quitItem = null;
public static MenuItem closeItem = null;
public static MenuItem newItem = null;
public static MenuItem undoItem = null;
public static MenuItem cloneItem = null;

    // Internal constructor routine.
    private void build(
	Applet applet, String[] args, int width, int height )
	{
	++instances;
	this.applet = applet;
	this.args = args;
	applet.setStub( this );
	name = applet.getClass().getName();
	setTitle( name );

	// Set up properties.
	Properties props = System.getProperties();
	props.put( "browser", "Acme.MainFrame" );
	props.put( "browser.version", "11jul96" );
	props.put( "browser.vendor", "Acme Laboratories" );
	props.put( "browser.vendor.url", "http://www.acme.com/" );

	// Turn args into parameters by way of the properties list.
	if ( args != null )
	    parseArgs( args, props );

	// If width and height are specified in the parameters, override
	// the compiled-in values.
	String widthStr = getParameter( "width" );
	if ( widthStr != null )
	    width = Integer.parseInt( widthStr );
	String heightStr = getParameter( "height" );
	if ( heightStr != null )
	    height = Integer.parseInt( heightStr );

	// Were width and height specified somewhere?
	if ( width == -1 || height == -1 )
	    {
	    System.err.println( "Width and height must be specified." );
	    return;
	    }

	// Do we want to run bare-bones?
	String bonesStr = getParameter( "barebones" );
	if ( bonesStr != null &amp;&amp; bonesStr.equals( "true" ) )
	    barebones = true;

	if ( ! barebones )
	    {
	    // Make menu bar.
	    MenuBar mb = new MenuBar();
// Make more maclike -- DE
//	    Menu m = new Menu( "Applet" );
//	    m.add( new MenuItem( "Restart" ) );
//	    m.add( new MenuItem( "Clone" ) );
//	    m.add( new MenuItem( "Close" ) );
//	    m.add( new MenuItem( "Quit" ) );
Menu m = new Menu("File");
if (quitItem == null) quitItem = new MenuItem("Quit");
//if (closeItem == null) closeItem = new MenuItem("Close");
//if (cloneItem == null) cloneItem = new MenuItem("Clone");
if (newItem == null) newItem = new MenuItem("Restart");
m.add(quitItem);
//m.add(closeItem);
//m.add(cloneItem);
m.add(newItem);
mb.add(m);
m = new Menu("Edit");
if (undoItem == null) undoItem = new MenuItem("Undo");
m.add(undoItem);
	    mb.add( m );
	    setMenuBar( mb );
	    }

	// Lay out components.
	setLayout( new BorderLayout() );
	add( "Center", applet );
	if ( ! barebones )
	    {
	    Panel borderPanel =
		new Acme.Widgets.BorderPanel( Acme.Widgets.BorderPanel.RAISED );
	    borderPanel.setLayout( new BorderLayout() );
	    label = new Label( "" );
	    borderPanel.add( "Center", label );
	    add( "South", borderPanel );
	    }

	// Set up size.
	pack();
	validate();
	appletSize = applet.size();
	applet.resize( width, height );
	show();

	// Start a separate thread to call the applet's init() and start()
	// methods, in case they take a long time.
	(new Thread( this )).start();
	}
    
    // Turn command-line arguments into Applet parameters, by way of the
    // properties list.
    private static void parseArgs( String[] args, Properties props )
	{
	for ( int i = 0; i   