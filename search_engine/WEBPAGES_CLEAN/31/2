 Outline<body>

 
 Outline for ICS-21 Written Midterm Exam 
 
  
  

I have collected together in this one handout the list of topics that we
  have covered in the first half of ICS-21.
This list is quite extensive (it is quite astounding how much material we
  have covered), and there is no way that I can ask questions covering all
  of it; likewise, there is  no way that you can learn all this material
  starting now (I'm assuming that you've been learning it during the entire
  quarter).
  
Therefore, you should concentrate on reviewing the most important analysis
  and synthesis skills that we have studied.
Use the quizzes (and to a lesser extent the programming assignments and daily
  homework assignments) as a guide for what material is of primary importance.
Understand the material on its own terms, and how to use this material when
  writing code.
  
My written exams are not designed to determine if you understand obscure
  material; instead, they are designed to determine if you understand
  important material, and can use your knowledge to understand and answer
  questions  quickly .
My exams are long (some students will not finish them): it you don't
  immediately know the answer to a question, skip it, and come back to it
  later, if you have time (sometimes working problems later in the exam will
  remind you of something relevant to the answer to earlier questions).
  

  Outline of Lecture Topics 


  Software  General Aspects of Software: Development &amp; Costs
      EBNF  Understanding EBNF rules and descriptions: sequence, option, alternative repetition
    Reading EBNF rules and classifying symbols
    Determining whether EBNF descriptions are equivalent
    Examining exemplars and writing EBNF rules that classify them accordingly
    Translating between EBNF rules and EBNF diagrams
      Tokens  Understanding how Java reads and tokenizes programs
    Tokens: Identifiers, Keywords, Separators, Operators, Literals, Comments
    The syntax of literals: int, double, boolean, char, String
      Variables and Operators  Understanding variable declarations (drawing pictures)
    Reading and writing prototypes; operator terminology
    The prototypes and semantics of common Java operators
      (arithmetic, textual, relational, logical, state-change)
    Implicit conversion
    Methods for mathematical functions and standard input/output
      Expressions  Understanding how to form and evaluate expressions
    Analyzing expressions for correctness and meaning with oval diagrams
    Operator Precedence and Association Rules
    Casting (explicit conversion)
    Translating formulas (or English descriptions) to expressions 
        (with no redundant parentheses)
      Statements I  Local variable declaration statements
    Expression statements
    Block statements (and the scope of local variable declarations)
    Understanding statements with boxing
    Trace tables to illustrate state changes in statement sequences
      Statements II  if statements
    for statements
    break statements
    General for, while, and do/while statements
    Understanding statements with boxing
    Compact trace tables to illustrate execution of statements
    try-catch statements (simple uses; for prompting, with TypedBufferReader)
      Program Composition and Debugging  Program synthesis via iterative enhancement
    Testing
    Debugging syntax errors
    Debugging execution errors
    Using the Eclipse debugger: viewing state, execution via 
         single stepping/[conditional] breakpoints
      More Java/Coding Style  Constants via final
    Conditional Operators
    Short-Circuit Operators
    Good Names, Alignment, Locality, Comments
      Simplification  Equivalence vs. Simplification
    Proving boolean expression equivalence and truth tables
    DeMorgan's law (and negating relational operators)
    Proving Arithmetical/Relational expressions equivalent and the law of trichotomy
    Changing the order of statements: proofs (stores/examines)
    if equivalences (test-reversal, bottom/top factoring): proofs (modified truth tables)
    Simple loop equivalences
      Class and Object Concepts  Illustrating reference variables (drawing pictures)
    Dual-State: state of variable and state of object referred to
    The semantics of the = , == , and != operators on references
    The == operator vs. the .equals method 
    Calling methods using variables referring to objects
      Reading Classes  Class members: constructors, methods (accessors/mutators), and fields
    Definitions and access modifiers: public/private, static
    Using constructors
    Calling methods
    Why using instance variables is not important (most are private)
    Reading Javadoc
    Packages: how to import/use classes defined in packages
    Classes with have studied and used:  Math ,  Prompt ,
       String ,  BigInteger ,  DiceEnsemble ,
       StringTokenizer ,  Timer , 
      File I/O Classes  TypedBufferReader/Writer constructors and methods
    Patterns for file reading (for and try/catch) and writing
    Error detection (exception handling)
    Error correction
     
    </body> 