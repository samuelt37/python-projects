 # These names are meant to be imported like:
#   from goody import irange
# or
#   import goody
#     which would be used as goody.irange


def type_as_str(x):
    """
    Returns the type of x as a nice string
    For example: type(a) returns "; this function extracts the
      'xxxxxxx' part: the first ' is at index 8; the last ' is at index -2
    """
    return str(type(x))[8:-2]


class ProtocolError(Exception):
    pass

def implements_protocol(entity : 'object or class', protocol : [str]) -&gt; bool:
    """
    Checks whether an object or a class implements all the methods in a protocol
    Each method must be callable (a predicated applied to the retrieved attribute)
    """
    try:
        return all(callable(getattr(entity,attr)) for attr in protocol)
    except:
        return False # getattr raised exception: attr not found


def irange(*args):
    """
    Returns an inclusive range: e.g., for i in range(1,10): print(i)
      prints the numbers 1 through 10 inclusive
    Use it like range (with 1, 2, or 3 arguments), but with irange the stop
      value is in the range
    """
    if len(args) == 1:
        return range(1,args[0]+1)
    if len(args) == 2:
        return range(args[0],args[1]+1)
    if len(args) == 3:
        return range(args[0],args[1]+(1 if args[2]&gt;0 else -1),args[2])
    raise TypeError('irange expected 1-3 arguments, got ' + str(len(args)))
 
 
def frange(*args):
    """
    Returns a float range: e.g., for i in range(0.1, 1.0, 0.1): print(i)
      prints the numbers .1, .2, .3, ... .9, 1.: 0.1 through 1.0 inclusive
    Use it like range/irange (with 1, 2, or 3 arguments).
    """
    start = 0.
    step  = 1.
    if len(args) == 1:
        stop = args[0]
    elif len(args) == 2:
        start,stop = args[0],args[1]
    elif len(args) == 3:
        start,stop,step = args[0],args[1],args[2]
    else:
        raise TypeError('frange expected 1-3 arguments, got ' + str(len(args)))
    if step == 0.:
        raise ValueError('frange step cannot be 0.')
    i = 0
    while True:
        curr = start + i*step
        if (step &gt; 0. and curr &gt; stop+.1*step) or (step  