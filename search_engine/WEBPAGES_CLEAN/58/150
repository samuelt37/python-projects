 22.8 Composition Functors in OEChem<body>
 
       
     
        
 OEChem - C++ Theory Manual
 
Version 1.3.1      
     
   
   
   Previous:   22.7 Using your own 
 Up:   22. Predicate Functors 
 Next:   22.9 Predicates as a 
   


  
22.8 Composition Functors in OEChem 
 

 
Occasionally, one may want to use a logical operator to join two or more
functors.  While it is certainly possible to write a quick functor which
wraps two or more functors, with the "magic" of templates this is not
necessary.  The functors  OEAnd ,  OEOr  and  OENot  are
already defined.  The each have constructors which take the appropriate
number of predicates as arguments and generate a single unary predicate.
Often these functors can be constructed inline.

  
The following example demonstrates use of the  OEAnd  and  OENot 
composition predicates with two of the predefined atom predicates

  
    #include "oechem.h"
#include "oesystem.h"

#include &lt;iostream&gt;

using namespace OESystem;
using namespace OEChem;
using namespace std;

unsigned int Count(const OEUnaryPredicate&lt;OEAtomBase&gt; &amp;fcn,
                   const OEMolBase &amp;mol)
{
  unsigned int count = 0;
  OEIter&lt;OEAtomBase&gt; atom;
  for(atom = mol.GetAtoms();atom;++atom)
    if(fcn(*atom))
      ++count;

  return count;
}

int main()
{
  OEGraphMol mol;
  OEParseSmiles(mol, "c1c(O)c(O)c(Cl)cc1CCCBr");

  cerr &lt;&lt; "Number of Aromatic Oxygens = " &lt;&lt;
          Count(OEAnd&lt;OEAtomBase&gt;(OEIsOxygen(),OEIsAromaticAtom()),mol) &lt;&lt; endl;

  cerr &lt;&lt; "Number of Non-Carbons = " &lt;&lt;
          Count(OENot&lt;OEAtomBase&gt;(OEHasAtomicNum(6)),mol) &lt;&lt; endl;

  return 0;
}
 
 
 Download as text. 
 
   
The example above is an extension of listing 18.2 above.  It shows the use
of OEChem's composition functors to build expressions from OEChem's
predefined atom predicates.  Thought the explicit template type
instantiation isn't strictly necessary, in practice it is required to help
several parsers make it through the expression.

  
As a convenience to programmers, three related template free functions have
been defined.  These are  operator &amp;&amp; ,  operator ||  and
 operator !  which take one or more OEUnaryPredicates as arguments and
return the appropriate composition predicate.  Not only do these make code much
easier to read, but in our experience, they also make the code easier for C++
parsers to parse.

  
The following example is identical to the previous composition listing except
that the composition predicates have been replaced by the operator
free-functions.

  
    #include "oechem.h"
#include "oesystem.h"

#include &lt;iostream&gt;

using namespace OESystem;
using namespace OEChem;
using namespace std;

unsigned int Count(const OEUnaryPredicate&lt;OEAtomBase&gt; &amp;fcn,
                   const OEMolBase &amp;mol)
{
  unsigned int count = 0;
  OEIter&lt;OEAtomBase&gt; atom;
  for(atom = mol.GetAtoms();atom;++atom)
    if(fcn(*atom))
      ++count;

  return count;
}

int main()
{
  OEGraphMol mol;
  OEParseSmiles(mol, "c1c(O)c(O)c(Cl)cc1CCCBr");

  cerr &lt;&lt; "Number of Aromatic Oxygens = " &lt;&lt;
          Count(OEIsOxygen() &amp;&amp; OEIsAromaticAtom(),mol) &lt;&lt; endl;

  cerr &lt;&lt; "Number of Non-Carbons = " &lt;&lt;
          Count(!OEHasAtomicNum(6),mol) &lt;&lt; endl;

  return 0;
}
 
 
 Download as text. 
 
   

  
          
     
        
 OEChem - C++ Theory Manual
 
Version 1.3.1      
     
   
   
   Previous:   22.7 Using your own 
 Up:   22. Predicate Functors 
 Next:   22.9 Predicates as a 
  Documentation released on July 30, 2004. 
 


</body> 