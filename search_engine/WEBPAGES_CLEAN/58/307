 Homework, due Tuesday 14 Oct: exercise 20.2-5; probs 10-2, 11-2, 20-2


Potential function method of amortization [17.3]

    define potential function Phi, Phi&gt;=0, initially zero
    e.g. for growing vector data structure, Phi = #filled - #unfilled

    define "amortized cost" = actual time + c DeltaPhi
	(choose c carefully later)
     insert w/o rebuild: c DeltaPhi = 2c = O(1)
     rebuild: DeltaPhi = -n, offsets O(n) time for rebuilding
     so amortized cost always O(1)

    telescopes, so
    sum(amort) = sum(actual) + Phi_final - Phi_initial &gt;= sum(actual)



Fibonacci heaps [ch.20]:
    heap allowing insert, delete-min (not arbitrary delete),
    decrease-key (not arbitrary change-key), merge
    
    all operations O(1) time (amortized for decrease-key)
    except delete O(log n) (amortized)
    so Dijkstra time becomes O(m + n log n)

    arbitrary delete and change-key could be handled
    by lazy deletion, O(log n) amortized each

    structure:
        forest of rooted non-binary trees
        heap-ordered (key[parent] = i-2

pf: i'th child was added when degrees were equal
    (so node had at least i-1 children already)
    then at most one child could be taken away (if child is marked)

lemma 2: node with degree k has &gt;= F_k nodes in subtree
F_0 = 1, F_1 = 2,  F_i = F_{i-1} + F_{i-2}

pf: children have degrees &gt;= 0, 0, 1, 2, 3, ...
    so by induction they have at least F_0, F_0, F_1, F_2, ... nodes

    more generally: node itself + sum of first x children's subtrees &gt;= F_x
    base case: x=0, node itself=1
    induction: node + x-1 children = F_{x-1} + F_{x-2} = F_x

    lemma follows with x=k

F_k &gt; (1+sqrt(5)/2)^k

can't have more than n nodes in a subtree
so max degree  