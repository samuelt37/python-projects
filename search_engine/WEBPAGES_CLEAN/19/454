 Python: module FINGER<body>

           FINGER</strong>       index   /home/dock/programs/MOL2/FINGER.py       
 
         Modules</strong>                  
     MOL2   math     os   sets     sys   tempfile           
         Classes</strong>                  
     sets.Set ( sets.BaseSet )
   
    fingerprint 
    
   __builtin__.dict ( __builtin__.object )
   
    fingerprint_counter 
    
   fingerprint_bayes 
    
        class  fingerprint</strong> ( sets.Set )              
   Method resolution order: 
  fingerprint  
  sets.Set  
  sets.BaseSet  
  __builtin__.object  
  
Methods defined here:     __init__</strong> (self, data =[] )      __repr__</strong> (self, NBITS =6 , FINGER_TABLE ='-0123456789abcdefghijklmnpqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ+*' )      __str__</strong> (self, NBITS =6 , FINGER_TABLE ='-0123456789abcdefghijklmnpqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ+*' )      fold</strong> (self, nbits)      from_str</strong> (self, str, NBITS =6 , FINGER_TABLE ='-0123456789abcdefghijklmnpqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ+*' )      max</strong> (self)      shift</strong> (self, shift)      tanimoto</strong> (self, other)      tversky</strong> (self, other, alpha =1.0 , beta =1.0 )   
Data and other attributes defined here:    __dict__</strong> = &lt;dictproxy object&gt;   dictionary for instance variables (if defined)      __weakref__</strong> = &lt;attribute '__weakref__' of 'fingerprint' objects&gt;   list of weak references to the object (if defined)    
Methods inherited from  sets.Set :     __as_immutable__</strong> (self)      __as_temporarily_immutable__</strong> (self)      __getstate__</strong> (self)      __hash__</strong> (self)   A  Set  cannot be hashed.       __iand__</strong> (self, other)   Update a set with the intersection of itself and another.       __ior__</strong> (self, other)   Update a set with the union of itself and another.       __isub__</strong> (self, other)   Remove all elements of another set from this set.       __ixor__</strong> (self, other)   Update a set with the symmetric difference of itself and another.       __setstate__</strong> (self, data)      add</strong> (self, element)   Add an element to a set. 
  
This has no effect if the element is already present.       clear</strong> (self)   Remove all elements from this set.       difference_update</strong> (self, other)   Remove all elements of another set from this set.       discard</strong> (self, element)   Remove an element from a set if it is a member. 
  
If the element is not a member, do nothing.       intersection_update</strong> (self, other)   Update a set with the intersection of itself and another.       pop</strong> (self)   Remove and return an arbitrary set element.       remove</strong> (self, element)   Remove an element from a set; it must be a member. 
  
If the element is not a member, raise a KeyError.       symmetric_difference_update</strong> (self, other)   Update a set with the symmetric difference of itself and another.       union_update</strong> (self, other)   Update a set with the union of itself and another.       update</strong> (self, iterable)   Add all values from an iterable (such as a list or file).    
Data and other attributes inherited from  sets.Set :    __slots__</strong> = []   
Methods inherited from  sets.BaseSet :     __and__</strong> (self, other)   Return the intersection of two sets as a new set. 
  
(I.e. all elements that are in both sets.)       __cmp__</strong> (self, other)      __contains__</strong> (self, element)   Report whether an element is a member of a set. 
  
(Called in response to the expression `element in self'.)       __copy__</strong>  = copy(self)   Return a shallow copy of a set.       __deepcopy__</strong> (self, memo)   Return a deep copy of a set; used by copy module.       __eq__</strong> (self, other)      __ge__</strong>  = issuperset(self, other)   Report whether this set contains another set.       __gt__</strong> (self, other)      __iter__</strong> (self)   Return an iterator over the elements or a set. 
  
This is the keys iterator for the underlying  dict .       __le__</strong>  = issubset(self, other)   Report whether another set contains this set.       __len__</strong> (self)   Return the number of elements of a set.       __lt__</strong> (self, other)      __ne__</strong> (self, other)      __or__</strong> (self, other)   Return the union of two sets as a new set. 
  
(I.e. all elements that are in either set.)       __sub__</strong> (self, other)   Return the difference of two sets as a new  Set . 
  
(I.e. all elements that are in this set and not in the other.)       __xor__</strong> (self, other)   Return the symmetric difference of two sets as a new set. 
  
(I.e. all elements that are in exactly one of the sets.)       copy</strong> (self)   Return a shallow copy of a set.       difference</strong> (self, other)   Return the difference of two sets as a new  Set . 
  
(I.e. all elements that are in this set and not in the other.)       intersection</strong> (self, other)   Return the intersection of two sets as a new set. 
  
(I.e. all elements that are in both sets.)       issubset</strong> (self, other)   Report whether another set contains this set.       issuperset</strong> (self, other)   Report whether this set contains another set.       symmetric_difference</strong> (self, other)   Return the symmetric difference of two sets as a new set. 
  
(I.e. all elements that are in exactly one of the sets.)       union</strong> (self, other)   Return the union of two sets as a new set. 
  
(I.e. all elements that are in either set.)       
        class  fingerprint_bayes</strong>            
  Classify fingerprints based on simple naive bayes model.         
 Methods defined here:     __init__</strong> (self, pos =[] , neg =[] )      clear</strong> (self)      score</strong> (self, fing)   Return the -Log(P) that the example  fingerprint  is in the positive class, defined by self. pos</strong>. 
  
This is a standard naive bayes calculation. The lower the score, 
the more likely it is to be part of the positive class.       
        class  fingerprint_counter</strong> ( __builtin__.dict )           
  Perform basic bean counting of bits in groups of fingerprints         
   Method resolution order: 
  fingerprint_counter  
  __builtin__.dict  
  __builtin__.object  
  
Methods defined here:     __getitem__</strong> (self, key)      __init__</strong> (self)      add</strong> (self, finger)      add_all</strong> (self, fingers)      clear</strong> (self)      max</strong> (self)   
Data and other attributes defined here:    __dict__</strong> = &lt;dictproxy object&gt;   dictionary for instance variables (if defined)      __weakref__</strong> = &lt;attribute '__weakref__' of 'fingerprint_counter' objects&gt;   list of weak references to the object (if defined)    
Methods inherited from  __builtin__.dict :     __cmp__</strong> (...)   x. __cmp__ (y) &lt;==&gt; cmp(x,y)       __contains__</strong> (...)   x. __contains__ (y) &lt;==&gt; y in x       __delitem__</strong> (...)   x. __delitem__ (y) &lt;==&gt; del x[y]       __eq__</strong> (...)   x. __eq__ (y) &lt;==&gt; x==y       __ge__</strong> (...)   x. __ge__ (y) &lt;==&gt; x&gt;=y       __getattribute__</strong> (...)   x. __getattribute__ ('name') &lt;==&gt; x.name       __gt__</strong> (...)   x. __gt__ (y) &lt;==&gt; x&gt;y       __hash__</strong> (...)   x. __hash__ () &lt;==&gt; hash(x)       __iter__</strong> (...)   x. __iter__ () &lt;==&gt; iter(x)       __le__</strong> (...)   x. __le__ (y) &lt;==&gt; x&lt;=y       __len__</strong> (...)   x. __len__ () &lt;==&gt; len(x)       __lt__</strong> (...)   x. __lt__ (y) &lt;==&gt; x&lt;y       __ne__</strong> (...)   x. __ne__ (y) &lt;==&gt; x!=y       __repr__</strong> (...)   x. __repr__ () &lt;==&gt; repr(x)       __setitem__</strong> (...)   x. __setitem__ (i, y) &lt;==&gt; x[i]=y       copy</strong> (...)   D. copy () -&gt; a shallow copy of D       get</strong> (...)   D. get (k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None.       has_key</strong> (...)   D. has_key (k) -&gt; True if D has a key k, else False       items</strong> (...)   D. items () -&gt; list of D's (key, value) pairs, as 2-tuples       iteritems</strong> (...)   D. iteritems () -&gt; an iterator over the (key, value) items of D       iterkeys</strong> (...)   D. iterkeys () -&gt; an iterator over the keys of D       itervalues</strong> (...)   D. itervalues () -&gt; an iterator over the values of D       keys</strong> (...)   D. keys () -&gt; list of D's keys       pop</strong> (...)   D. pop (k[,d]) -&gt; v, remove specified key and return the corresponding value 
If key is not found, d is returned if given, otherwise KeyError is raised       popitem</strong> (...)   D. popitem () -&gt; (k, v), remove and return some (key, value) pair as a 
2-tuple; but raise KeyError if D is empty       setdefault</strong> (...)   D. setdefault (k[,d]) -&gt; D. get (k,d), also set D[k]=d if k not in D       update</strong> (...)   D. update (E) -&gt; None.  Update D from E: for k in E. keys (): D[k] = E[k]       values</strong> (...)   D. values () -&gt; list of D's values    
Data and other attributes inherited from  __builtin__.dict :    __new__</strong> = &lt;built-in method __new__ of type object&gt;   T. __new__ (S, ...) -&gt; a new object with type S, a subtype of T      fromkeys</strong> = &lt;built-in method fromkeys of type object&gt;    dict . fromkeys (S[,v]) -&gt; New  dict  with keys from S and values equal to v. 
v defaults to None.          
         Data</strong>                  
  StringTypes</strong> = (&lt;type 'str'&gt;, &lt;type 'unicode'&gt;)   </body> 