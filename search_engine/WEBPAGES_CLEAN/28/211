 Anton Burtsev's Homepage<body>
	    
			  
	   
			
			  
		 
		  
		 
			
			  

		 
			   
				 Anton Burtsev 
				 
			   
				 
				   University of California Irvine  
				  Dept. of Computer Science  
				 3019 Bren Hall 
				 Irvine, California 92617-3435 				
					
					 E-mail: aburtsev (at) uci (dot) edu 
					  Vitae  
				
				 
			    
				  
			   
	    
			  	
	   
		
		 
		  I am an Assistant Adjunct Professor at the   Department of Computer Science , 
			 University of California Irvine . 
			I design, and build novel operating systems. My work spans a broad variety of topics 
                        from novel low-latency datacenters to secure and formally verified kernels. 
		 

		 	
		   Research interests  
		
		 
		   Operating systems:  novel abstractions for structuring operating systems, microkernels, virtualization,
decomposed and library kernels, security and verification of the kernel stack. 
                  Security and access control:  capability access control, practical least authority for virtualized environments
and commodity operating systems, access control in datacenter and enterprise networks, access control in cloud. 
                  Operating system support for datacenter environments:  low-latency system stacks, library operating
systems, fast inter-process communication, software stacks for non-uniform high-density memory machines.
		 
                

		 	
		   Prospective students  
		

		 
		  I am looking for students interested in operating systems at all levels from undergraduate to PhD, if you have relevant skills send me an email. 


	
		 	
		   Teaching  
		
		  
		   143A Principles of Operating Systems  (Winter 2017) 


		 
		   Low-Level System Reading Group  with Ryan Stutsman (Spring 2016)
		 
		
                 
		   cs5460/6460 Operating Systems  (Spring 2014)  Original class 
		 

                 	
		   Current research  
		

		 
		   LCDs: Disaggregated System Services
				Through Lightweight Capability
				Domains. 

			For several decades the operating system community has
			accepted that the only way of minimizing the trusted
			computing base, and constructing more secure, least
			authority systems, is to reimplement monolithic kernel
			functionality as a set of isolated microkernel servers.
			Instead of splitting the core functionality of a
			traditional operating system into multiple servers, we
			develop a mechanism that can securely isolate
			individual kernel components right inside the address
			space of the monolithic operating system kernel.
			Effectively, we build a capability machine for the
			Linux kernel. 
		 
		 
                         LCDs source code and documentation 
		  
		 
                         XCap project page 
		  
		 
                         Deker project page 
		  

		 

		 
		   XCap: Practical Capabilities and Least Authority		
				for Virtualized Environments.  
			XCap is a secure environment for least-authority
			execution of applications and system services.
			Unmodified, untrusted, off-the-shelf applications,
			running on untrusted operating systems, are isolated by
			a virtual machine monitor. XCap's default -- a share
			nothing environment -- is augmented by a capability
			access control model: a clean and general abstraction,
			enabling fine-grained delegation of rights in a
			flexible and manageable way.   

		 
                         XCap project page 
		  
		

                  CapNet: Capability-Enabled Networks and Clouds. 
			Building on the principles of capability access control, CapNet
			represents system resources as a graph of objects connected
			with edges that represent rights, or capabilities. By controlling
			the distribution of capabilities, CapNet (i) implements
			strong, fine-grained isolation of network hosts; (ii) develops
			mechanisms for decentralized, application-driven dynamic
			management of connectivity; and (iii) provides a formal foundation
			for establishing secure collaboration in face of dynamic,
			mistrusting principals and insecure end-hosts.
		 

		 
                         CapNet project page 
		  
		


		    Deker: Decomposing Commodity Kernels for Verification. 
		Deker is a framework for decomposing and verifying commodity operating system kernels. 
		Deker turns a de-facto standard commodity operating system kernel into a 
		collection of strongly isolated subsystems suitable for verification. 
		Despite multiple decades of evolution and improvements in software verification 
		tools, almost none of them made their way into regular industry practice. 
		Deker aims to amend this using a holistic approach unifying modular redesign 
		of legacy components with customized verification techniques. While 
		decomposing the kernel and providing complete isolation of subsystems, 
		Deker remains practical: retains source-level compatibility with the 
		non-decomposed kernel, enables incremental adoption, and remains fast. 
		
	   	 
		 
                         Deker project page 
		 
		 

                 
		   RAMStore: Fast cross-core communicaiton for virtual machines. 

			RAMStore designs a new efficient communication mechanisms aimed at decoupling 
			application and storage stacks in a convergent store architecture. 
                 
		

		  	
		   Past projects  
		


		

	

		 
		   XenTT: Deterministic system analysis. 
		
			XenTT is full-system deterministic replay engine for Xen capable of capturing and 
			replaying execution of Xen VMs. XenTT creates a 
			foundation for a deterministic replay analysis platform aimed at automatic debugging, and 
			analysis of complex software systems. XenTT comes with a powerful virtual machine 
			introspection (VMI) library, and a streaming language, Weir, both of which create 
			a convenient programming environment for monitoring execution of the guest system, 
			accessing its state through convenient symbol names, and implementing reusable 
			analysis algorithms. 
		 
		 
                         XenTT source code and documentation 
		 
		 

	    
	   
        
		 	
		   Selected publications  
		 
				     Anton Burtsev, David Johnson, Mike Hibler, Eric Eide, John Regehr.
				      Abstractions for Practical Virtual Machine Replay. .
				     In Proceedings of the  12th ACM SIGPLAN/SIGOPS International Conference on Virtual Execution Environments (VEE'16) , April 2016. 
				     [ PDF ]. 

	         

		 
				     Charles Jacobsen, Muktesh Khole, Sarah Spall, Scotty Bauer, and Anton Burtsev.
				      Lightweight Capability Domains: Towards Decomposing the Linux Kernel. .
				     In Proceedings of the  8th Workshop on Programming Languages and Operating Systems
					     (PLOS 2015) , October 2015.
				     [ PDF ]. 

	         

		 Anton Burtsev, Nikhil Mishrikoti, Eric Eide, and Robert Ricci.
				      Weir: A Streaming Language for Performance Analysis .
				     In Proceedings of the  7th Workshop on Programming Languages and Operating Systems
					     (PLOS 2013) , November 2013.
				     [ PDF ]. 

	         

		  Anton Burtsev, Kiran Srinivasan, 
			             Prashanth Radhakrishnan, 
			             Lakshmi N. Bairavasundaram, Kaladhar Voruganti, 
				     and Garth R. Goodson.
				      Fido: Fast Inter-Virtual-Machine Communication for Enterprise Appliances .
				     In Proceedings of the   2009 USENIX Annual Technical Conference , 
				     San Diego, June 2009
				     [ PDF ] (Slides [ PDF ]). 

	         

		  Anton Burtsev, Prashanth Radhakrishnan, 
			             Mike Hibler, and Jay Lepreau. 
				      Transparent Checkpoints of Closed Distributed Systems in Emulab .
				     In Proceedings of the   Fourth ACM SIGOPS/EuroSys 
					     European Conference on Computer Systems , 
				     Nuremberg, Germany, April 2009
				     [ PDF ] (Slides [ PDF ]).

	         
 

		
	         
		   Full list  
		

		 	
		   Curriculum Vitae  [ PDF ]. 
			Some  personal information . 
			Complete  work experience .
	         
		
	

		 	
		   Other interests  
		 Skiing, tennis, biking, taking pictures, travel, music, time with family ( a long list ). 
		
	 			
	    
			  
	   
	 Updated: August, 2016 
	 
	  </body> 