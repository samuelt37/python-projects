 Implementing Collection Template Classes in the ITL


Introduction:

In this lecture we will discuss the details of the implementation of one data
type, Set, which is one of the five standard generic data types/collection
classes that we have discussed (Stack, Queue, Priority Queue, Set, and Map).

The implementation that we will discuss in detail uses an array data structure,
in a simple way, to store all the values in the Set. There are strong
similarities between this implementation of Set and the array implementations
of the other data types; also, Set is of middling complexity compared to Stack,
Queue, and Priority Queue (lower) and Map (higher), so it is a good class to
examine in detail.

Please feel free to examine the array implementations of the other data types;
you can find these implementations in the courselib project, by looking in its
src folder. In Programming Assignments 2-4, you will write more complicated
(but still similar) implementations of many of these templated classes. Note
that the queue implemention is also complicated, because it treats its array as
a circular structure, to ensure most operations are O(1) (especially enqueue
and dequeue).

In a code walk-through, a team of programmers listen to another programmer
talk about his/her code. While looking at the code and hearing a discussion of
it, they probe for errors, try to uncover why certain design decisions were
made, and generally discuss the code. You need to lose your ego when you lead a
code walk-through. Consider this lecture a code walk- through: I encourage
questions about the code or criticisms of it.

You should examine array_set.hpp and ics_exceptions.hpp files while reading
this lecture note.

Note that you should not edit/change any file in the courselib folder (unless
told to by the instructor). If you want to experiment with a class, copy it
into a project folder and change the copy there: when we #include files
in a project, C++ will first look for/find a file with that name IN the project
folder; if it cannot, only then will it try to find a file with the same name
in a library.

-------------------------

ArraySet:

The array_set.hpp file defines a class templated by a single type, which
also defines a nested Iterator class.

template class ArraySet {
...

  class Iterator {
  ....
  }

}

In the previous lecture we discussed the declarations of most of the public
constructors, methods, and operators in ArraySet. Here we will focus first on
the private data declararations used to store data in these classes, and then
study the definitions of the constructors, methods, and operators that
manipulate them to implement the required semantics/meanings of the data type

-------------------------


ArraySet instance variables (private):

For a start, let's examine the private: part of this class. It declares the
following 4 instance variables.

  private:
    T*  set;           //Unordered contiguous array
    int length    = 0; //Physical length of array
    int used      = 0; //Amount of array used: invariant: 0 
ArraySet::~ArraySet() {
  delete[] set;
}


(1) ArraySet() - default constructor:  allocate an array of length 0. The
insert method always calls ensure_length to ensure that an array will be long
enough to store a newly inserted value (and the erase method always calls
ensure_length_low to shrink the array if it is overly long). So its length will
be increased to 1 before storing the first value. Some implementations would
allocate a non-zero minimal-sized arrray: not a bad idea because we problably
wouldn't declare the Set if we weren't going to put at least one value in it.
Of course, can do that explicitly, by using the next constructor.

template
ArraySet::ArraySet() {
  set = new T[length];
}


(2) ArraySet(int initial_length): use inital_length as the initial length for
the array to allocate (although negative lengths are disallowed: it uses length
0 if the argument is negative, instead of throwing an exception). Note that
this constructor is called a conversion constructor, which we don't want to be
called automatically, so we declare it (earlier in the class declaration) with
the keyword "explicit": by using "explicit", ArraySet s = 1; will not compile;
without "explicit" it would have the same meaning as writing ArraySet s(1);
which does NOT create a set storing the value 1, but instead creates a set
whose array is length 1.

template
ArraySet::ArraySet(int initial_length)
: length(initial_length) {
  if (length &amp; to_copy) - copy constructor: use the to_copy
ArraySet to supply the length and used instance variables, then allocate an
appropriate sized array and copy the required values into it. We could instead
write: length(to_copy.used), which would create a minimal length copy (but big
enough for used values).

template
ArraySet::ArraySet(const ArraySet&amp; to_copy)
: length(to_copy.length), used(to_copy.used) {
  set = new T[length];
  for (int i=0; i&amp; il)) - initializer constructor
(new in C++11): iterate through all the values in the initializer_list,
inserting each into the ArraySet. This constructor allows us to write:

  ArraySet s({1,2,3,4,5});

This statement declares the ArraySet s and stores into it the values 1 through
5 inclusive.

Note that the following will not work, because the constructor is explicit.

  ArraySet s = {1,2,3,4,5};

But, using the = operator and two constructors, we could write the following
code (which redundantly constructs and destructs a temporary ArraySet).

  ArraySet s = ArraySet({1,2,3,4,5});

template
ArraySet::ArraySet(const std::initializer_list&amp; il)
: length(il.size()) {
  set = new T[length];
  for (const T&amp; s_elem : il)  //Can use for-each to iterate of intializer_list
    insert(s_elem);
}

(5) template ArraySet(const Iterable&amp; i) - iterator constructor:
iterate through all the values in i, inserting each into the ArraySet. Each of
the five standard data types supports size/begin/end/prefix ++, which are
needed for the for-each loop in this method to work correctly. Thus, we can
easily construct a data type from one class by iterating over the data stored in
another class: e.g., construct a Set with all the values in a Queue.

template
template
ArraySet::ArraySet(const Iterable&amp; i)
: length(i.size()) {
  set = new T[length];
  for (const T&amp; v : i)
    insert(v);
}


I will now include a description of the private helper methods (a) ensure_length
and (b) ensure_length_low here, because they also relate to reallocation of the
"set" instance variable. These methods, which appear similarly in the array
implementations of all the data types, ensure that set's array length is
"reasonble": big enough when "inserting" and not too big when "erasing".

(a) For ensure_length, it ensures the array can store new_length values; if it
cannot, ensure_length makes set's length either new_length or double the old
length (whichever is bigger) and copies all the set's values there; finally it
deletes the old array, reclaiming all its space. The code here is delicate: we
need to keep track of the old information while creating the new information.

When we talk about Analysis of Algorithms we will see that this doubling
strategy requires only O(N) copies when creating a Set of N new values. If
we increased the size by 1 for each new value, that strategy would require
O(N^2) copies.

template
void ArraySet::ensure_length(int new_length) {
  if (length &gt;= new_length)
    return;
  T* old_set = set;
  length = std::max(new_length,2*length);
  set = new T[length];
  for (int i=0; i
void ArraySet::ensure_length_low(int new_length) {
  if (length size() == 0, and we would if the size() function was
truly computed in a complicated function, but here we check the used instance
variable directly. (See the relationship in the ArrayQueue class between the
empty and size functions for something more complicated).

template
inline bool ArraySet::empty() const {
  return used == 0;
}


(2) size: returns the number of values the Set stores. The set's values are
stored in indexes 0 to used-1, for a total of used values. When used is 5, the
values are stored in indexes 0, 1, 2, 3, and 4.

template
int ArraySet::size() const {
  return used;
}


(3) contains: determines whether an element is in the Set. It performs a linear
search of the array (whose values are unordered), returning true immediately
when the value element is found in any used index in the array; and returning
false (after/outside the loop) if element is not found in any used index in the
array.

template
bool ArraySet::contains (const T&amp; element) const {
  for (int i=0; i
std::string ArraySet::str() const {
  std::ostringstream answer;
  answer 
template
bool ArraySet::contains_all (const Iterable&amp; i) const {
  for (const T&amp; v : i)
    if (!contains(v))
        return false;
  
    return true;
}

------------------------------------------------------------------------------

Commands/Mutators (public, also covering erase_at which is private):

Notice that none of these methods say "const" after the parameter list, because
all change (or at least can change, if necessary) the data structure. Each
change is  accompanied by incrementing the mod_count (modification count)
instance variable. If we wrote "const" with these methods, the compiler would
report an error because it knows when we are changing instance variables.


(1) insert: adds an element into the Set if it is not already in the Set,
returning 1 if it was not in the Set and 0 if it is was. It performs a linear
search through the array, returning 0 immediately if it finds the element; if it
doesn't find the element anywhere, it calls ensure_length to ensure the length
of the array is big enough to store a new element (initially going from
length = 0 to length = 1, otherwise doubling the length); then it puts the
element in the array one beyond the last element previously stored, and notes
the modification by incrementing mod_count, and returning 1.

This method is the most critical in the class; we should hand simulate a few
insertions, including calls to ensure_length. Note that if used = 5, then
indexes 0 through 4 are occupied, so writing set[used++] = element; increments
used by 1, but uses its old value (5) as the index to store the new element,
which is correct: it is 1 beyond the index of the previously last value, stored
in index 4.

Note that Sets are not ordered in any special way, so we can put the element
anywhere, but it is most convenient to store it at an index one higher than the
last. I'm also assuming that you know the exact meanings and differences between
used++ and ++used: both increment used, but the value returned by the postfix
operator (yes, this operator returns a values, just as a+b returns a value) is
the original value in used (before incrementing it) while the value returned by
the prefix operator is the new  value in used (after incrementing it).

int ArraySet::insert(const T&amp; element) {
  for (int i=0; iensure_length(used+1);
  set[used++] = element;
  ++mod_count;
  return 1;
}

We could call the contains method here instead of writing the for loop.


(2) erase: removes (the opposite of insert) the element from the Set if it is
already in the Set, returning 1 if it is in the Set and 0 if it is not. It
performs a linear search through the array, returning the value that private
helper method erase_at(i) returns (it always returns 1; erase_at is described
at the end of this secion) if it finds element; if it doesn't find the element,
it just returns 0 without calling erase_at. The erase_at method may reallocate
the array to be smaller, and always updates mod_count too; this same method is
also called by the Iterator's erase method (discussed later).

template
int ArraySet::erase(const T&amp; element) {
  for (int i=0; i
void ArraySet::clear() {
  used = 0;
  this-&gt;ensure_length_low(0);
  ++mod_count;
}


(4) insert_all: inserts all the values in the iterable into the Set, returning
a count of the number of values actually inserted (unique values not originally
in the Set). It uses a for-each loop to iterate over the parameter i, using
insert (see above) to actually insert the value into the Set; each call to
insert updates mod_count, so mod_count can increase by more than 1 in a call to
insert_all.

template
template
int ArraySet::insert_all(const Iterable&amp; i) {
  int count = 0;
  for (const T&amp; v : i)
     count += insert(v);
  return count;
}


(5) erase_all: erases all the values in the iterable from the Set, returning a
count of the number actually erased (unique values originally in the Set). It
uses a for-each loop to iterate over the parameter i, using erase (see above)
to actually erase the value into the Set; each call to erase updates  mod_count,
so mod_count can increase by more than 1 in a call to erase_all.

template
template
int ArraySet::erase_all(const Iterable&amp; i) {
  int count = 0;
  for (const T&amp; v : i)
     count += erase(v);

  return count;
}


(6) retain_all: retains all the values in the iterable in the Set, returning a
count of the number actually erased (unique values originally in the Set). It
uses the iterable constructor to create an ArraySet s containing all the values
in the iterable; then it examines every element in the Set and checks s to
decide whether or not it should be erased, using erase (see above) to actually
erase the value into the Set; each call to erase updates  mod_count, so
mod_count can increase by more than 1 in a call to retain_all.

Key point (see erase_at below): if it erases the value at index i, a new value
is put into index i (the value formerly at the end of the array), so that value
must be checked too; but because i will be incremented at the bottom of the
loop, we must decrement i explicitly whenever we erase a value. Hand simulate
an example (including the call to erase_at) where a Set contains two values and
the iterable creates an empty set s (so neither value should be retained):
without decrementing i, this code would skip (and therefore retain) the second
value!

template
template
int ArraySet::retain_all(const Iterable&amp; i) {
  ArraySet s(i);
  int count = 0;
  for (int i=0; i
int ArraySet::erase_at(int i) {
  set[i] = set[--used];
  this-&gt;ensure_length_low(used);
  ++mod_count;
  return 1;
}


It might have been useful to write a private index_of method that either
returns the index at which a value is stored in the array or -1 if it is not
stored there (since -1 is never a legal arrray index). Note that because we are
storing a Set of values, the same value cannot occur twice. Such code would
simplify a few methods by removing their looping code. Here are examples of how
such code would work, if it were in the class:

template
int ArraySet::index_of(const T&amp; element) {
  for (int i=0; i
bool ArraySet::contains (const T&amp; element) const {
  return index_of(element) != -1;
}

int ArraySet::insert(const T&amp; element) {
  int i = index_of(element);
  if (i != -1)
    return 0;

  this-&gt;ensure_length(used+1);
  set[used++] = element;
  ++mod_count;
  return 1;
}

template
int ArraySet::erase(const T&amp; element) {
  int i = index_of(element);
  return (i == -1 ? 0 : erase_at(i));
}

------------------------------------------------------------------------------

Overloaded Operators (public):

(1) operator =: assign the value of the Set rhs to this Set so they compare ==
(see below). Note if x and y are Sets, then x = y calls operator= on the left
Set (so "this" refers to the Set x) while the parameter name rhs refers to
the Set y. It first checks if the two Sets are the same object (meaning the
assignment statement was of the form x = x) and if so does nothing; otherwise
it ensures this Set has an array big enough to store all the values stored in
rhs Set, sets used correctly, fills the array with values for the rhs,
increments mod_count, and returns this (for use in code like x = y = z; which
assigns z to y, returning y, which it assigns to x.

template
ArraySet&amp; ArraySet::operator = (const ArraySet&amp; rhs) {
  if (this == &amp;rhs)
    return *this;
  this-&gt;ensure_length(rhs.used);
  used = rhs.used;
  for (int i=0; i
bool ArraySet::operator == (const ArraySet&amp; rhs) const {
  if (this == &amp;rhs)
    return true;

  if (used != rhs.size())
    return false;

  for (int i=0; i
bool ArraySet::operator != (const Set&amp; rhs) const {
  return !(*this == rhs);
}


(4) operator used to be 
bool ArraySet::operator &amp; rhs) const {
  if (this == &amp;rhs)
    return true;

  if (used &gt; rhs.size())
    return false;

  for (int i=0; iused to be 
bool ArraySet::operator &amp; rhs) const {
  if (this == &amp;rhs)
    return false;

  if (used &gt;= rhs.size())
    return false;

  for (int i=0; i=: determines whether this Set is a superset (or the same Set) as
rhs Set. Uses the rule x &gt;= y iff y 
bool ArraySet::operator &gt;= (const Set&amp; rhs) const {
  return rhs : determines whether this Set is a strict superset (not the same
Set as hrs Set. Uses the rule x &gt; y iff y 
bool ArraySet::operator &gt; (const Set&amp; rhs) const {
  return rhs   by negating  y iff !(x  x
  &gt;= by changing sides: x &gt;= y iff y 
std::ostream&amp; operator &amp; s) {
  outs 
std::ostream&amp; operator &amp; s) {
  outs ::Iterator if we need to.
We can use an Iterator to erase a value from the Set, compute a .str()
representation of the Iterator, increment an Iterator (both ways: prefix ++i
and postfix i++), check for equality/inequality among Iterators, and finally
dereference an  Iterator to get at the value it refers to or get a pointer to
the value it refers to.

We will discuss these methods below. But first we discuss the private instance
variables. Note that there is a simple but delicate relationship between the
erase method and ++ operators.

    class Iterator {
      public:
        //Private constructor called in begin/end, which are friends of ArraySet
        ~Iterator();
        T           erase();
        std::string str  () const;
        ArraySet::Iterator&amp; operator ++ ();
        ArraySet::Iterator  operator ++ (int);
        bool operator == (const ArraySet::Iterator&amp; rhs) const;
        bool operator != (const ArraySet::Iterator&amp; rhs) const;
        T&amp; operator *  () const;
        T* operator -&gt; () const;
        friend std::ostream&amp; operator ::Iterator&amp; i) {
          outs ::begin () const;
        friend Iterator ArraySet::end   () const;

      private:
        //If can_erase is false, current indexes the "next" value (must ++ to reach it)
        int          current;  //if can_erase is false, this value is unusable
        ArraySet* ref_set;
        int          expected_mod_count;
        bool         can_erase = true;

        //Called in friends begin/end and postfix ++
        Iterator(ArraySet* iterate_over, int initial);
    };

------------------------------------------------------------------------------

ArraySet::Iterator instance variables (private):

 (1) current: an index into a Set's array: where the iterator is in an ArraySet.
     It should always be &gt;= 0 and mod_count;
     it is checked in every operation and if these values are unequal, it means
     that the array was mutated (by something other than erase in the
     iterator, which is discussed below), so the ConcurrentModificationError
     exception is thrown.

 (4) can_erase: ensures we cannot call .erase() on the iterator twice in a row,
     without calling ++ to advance the iterator. When the value in some index
     is erased, it is replaced by the value appearing at the end of the array;
     in this case, the next call to a ++ operator actually does not increment
     current (discussed more below) because it already indexes the next value 
     (one value beyond the most recently erased value).

Note: The can_erase instance variable always starts true (all the others need
to be given values in the constructor).

The code shown for the Iterator methods/operators will clarify what the last
two instance variables mean, by discussing how they are used.

------------------------------------------------------------------------------

Methods producing Iterators (public)

Note that the only constructor for Iterator is private. But, this class friends
the begin/end methods declared in the ArraySet class, directly after it declares
the Iterator class. These begin/end methods construct and return Iterators. Both
methods require their return type to be specified as auto, but then explicitly
added the actual return type after the -&gt;.

In all cases we have to cast away constness of "this" because we need to be able
to call .erase() on an Iterator which means it can change the state of the
ArraySet it refers to. Alex recommended declaring ref_set as mutable, which
would not required the cast. I'm not sure which I like better.

(1) begin: return an Iterator whose current index is where the first value in
the ArraySet is stored (index 0).

template
auto ArraySet::begin () const -&gt; ArraySet::Iterator {
  return Iterator(const_cast*&gt;(this),0);
}


(2) end: return an Iterator whose current index is ONE BEYOND where the last
value in the ArraySet is stored (index used).

template
auto ArraySet::end () const -&gt; ArraySet::Iterator {
  return Iterator(const_cast*&gt;(this),used);
}

------------------------------------------------------------------------------

Iterators constructors/methods/operators (private and public)

(1) Iterator constructor: fills in ref_set (which ArraySet this iterator is
iterating over) and initializes to what index in ref_set's array the iterator
is referring.

CRITICAL: The expected_mod_count instance variable copies the mod_count of the
ref_set to which it refers. If the mod_count of this ref_set ever changes
(because it is mutated) and an operation is called on the iterator, the
iterator will be able to discover the modification (its expected_mod_count will
be wrong) and fail (as it is required to do) by throwing the
CurrentModificationError exception.

To save space, we will use CME to abbreviate ConcurrentModificationError.


emplate
ArraySet::Iterator::Iterator(ArraySet* iterate_over, int initial)
: current(initial), ref_set(iterate_over), expected_mod_count(ref_set-&gt;mod_count) {
}


(2) Iterator destructor: it allocates no dynamic storage with new, so it
deallocates none with delete.

template
ArraySet::Iterator::~Iterator()
{}


(3) erase: erase from the ArraySet the value the iterator indexes. It must
first check that the mod_count is unchanged and that can_erase is true
(throwing special exceptions for either error); likewise, it also checks that
the iterator really refers to a legal position in ref_set's array. If so, it
does the erase:

  (a) setting can_erase to false means that we must call ++ on the iterator
      before it can erase the next value (see ++ code for resetting can_erase),

  (b) it saves the value it is removing to return,

  (c) it calls the erase_at helper method using ref_set to erase the value at
      the current index (note that erase_at changes ref_set's mod_count and
      might even reallocate the set array to be smaller),

  (d) it resets the expected_mod_count: when an iterator erases a value, that
      iterator (but no others) can still correctly continue iterating through
      the data structure; if multiple iterators are active on the data
      structure, all the others will fail because their expected_mod_count will
      remain the same and thus become incorrect,

  (e) the removed value is returned

template
T ArraySet::Iterator::erase() {
  if (expected_mod_count != ref_set-&gt;mod_count)
    throw ConcurrentModificationError("ArraySet::Iterator::erase");
  if (!can_erase)
    throw CannotEraseError("ArraySet::Iterator::erase Iterator cursor already erased");
  if (current = ref_set-&gt;used)
    throw CannotEraseError("ArraySet::Iterator::erase Iterator cursor beyond data structure");

  can_erase = false;
  T to_return = ref_set-&gt;set[current];
  ref_set-&gt;erase_at(current);
  expected_mod_count = ref_set-&gt;mod_count;
  return to_return;
}


(4) str: returns interesting information about the iterator's implementation:
starting with ref_set--&gt;str(), it includes the values in the ArraySet it is
iterating over and the instance variables used in the ArraySet implementation;
these are followed by the instance variables of the iterator.

template
std::string ArraySet::Iterator::str() const {
  std::ostringstream answer;
  answer str() = used). It is incremented if
can_erase == true but NOT incremented if can_erase == false (because that means
the previous value was erased, so current indexes the value it was replaced by,
which is still the next value to be iterated over); in this case it resets
can_erase to true. Finally, it returns a reference to the newly incremented
iterator object.

template
auto ArraySet::Iterator::operator&amp; ++ () -&gt; ArraySet::Iterator {
  if (expected_mod_count != ref_set-&gt;mod_count)
    throw ConcurrentModificationError("ArraySet::Iterator::operator ++");

  if (current &gt;= ref_set-&gt;used)
    return *this;

  if (can_erase)
    ++current;
  else
    can_erase = true;  //current already indexes "one beyond" deleted value

  return *this;
}


(6) postfix ++: advances the iterator so that it indexes the next value,
returning the OLD state of this iterator. It checks for CME. The cursor is NOT
incremented if it is already ONE BEYOND the last index (used). Otherwise it
saves the previous current value of the Iterator, so it can return it. As with
the prefix ++ operator, both the current value and the current value in
to_return are incremented if can_erase == true but NEITHER is incremented if
can_erase == false;  in this case it resets can_erase to true. Finally, it
returns the orginal iterator.

template
auto ArraySet::Iterator::operator ++ (int) -&gt; ArraySet::Iterator {
  if (expected_mod_count != ref_set-&gt;mod_count)
    throw ConcurrentModificationError("ArraySet::Iterator::operator ++(int)");

  if (current &gt;= ref_set-&gt;used)
    return *this;

  Iterator to_return(this-&gt;ref_set,current-1);

  if (can_erase)
    ++current;
  else
    can_erase = true;  //current already indexes "one beyond" deleted value

  return to_return;
}

Generally it is a bad idea to try to do anything with the value of the returned
Iterator (reference). It is best to increment iterators in statements, not
using their values: ++i; or i++;

Prefer prefix ++ because it does not have to create an object to return; instead
it just returns a reference to the iterator object that has been incremented,
which saves time/space (sometimes a lot, for complicated implementations).


(7) operator ==: determines whether two Iterators have the same values: they
must be the same type of Iterator (checked via dynamic_cast), the mod_count
must not have have changed, and the ref_set pointers must be the same too.
Finally (and most importantly) they must index the same value (current).

template
bool ArraySet::Iterator::operator == (const ics::Iterator&amp; rhs) const {
  const Iterator* rhsASI = dynamic_cast(&amp;rhs);
  if (rhsASI == 0)
    throw IteratorTypeError("ArraySet::Iterator::operator ==");
  if (expected_mod_count != ref_set-&gt;mod_count)
    throw ConcurrentModificationError("ArraySet::Iterator::operator ==");
  if (ref_set != rhsASI-&gt;ref_set)
    throw ComparingDifferentIteratorsError("ArraySet::Iterator::operator ==");

  return current == rhsASI-&gt;current;
}


(8) operator !=: determines whether two Iteraors have different values: all
the early checks must be OK, but the last check is done oppositely.

template
bool ArraySet::Iterator::operator != (const ics::Iterator&amp; rhs) const {
  const Iterator* rhsASI = dynamic_cast(&amp;rhs);
  if (rhsASI == 0)
    throw IteratorTypeError("ArraySet::Iterator::operator !=");
  if (expected_mod_count != ref_set-&gt;mod_count)
    throw ConcurrentModificationError("ArraySet::Iterator::operator !=");
  if (ref_set != rhsASI-&gt;ref_set)
    throw ComparingDifferentIteratorsError("ArraySet::Iterator::operator !=");

  return current != rhsASI-&gt;current;
}

(9) operator *: dereference (get the value the iterator indexes); checks for CME
and checks that current has not been erased (cannot * an erased value until
after ++) and is legal [0,used); return the value at the index it refers to.

template
T&amp; ArraySet::Iterator::operator *() const {
  if (expected_mod_count != ref_set-&gt;mod_count)
    throw ConcurrentModificationError("ArraySet::Iterator::operator *");
  if (!can_erase || current = ref_set-&gt;used) {
    std::ostringstream where;
    where size();
    throw IteratorPositionIllegal("ArraySet::Iterator::operator * Iterator illegal: "+where.str());
  }

  return ref_set-&gt;set[current];
}


(9) operator -&gt;: dereference and select local instance/method (using the value
the iterator indexes); checks for CME and checks that current has not been
erased (cannot -&gt; an erased value until after ++) and is legal [0,used); return
a pointer to the value at the index it refers to.

Note that for an iterator i, (*i).foo is equivalent to i-&gt;foo.

template
T* ArraySet::Iterator::operator -&gt;() const {
  if (expected_mod_count != ref_set-&gt;mod_count)
    throw ConcurrentModificationError("ArraySet::Iterator::operator -&gt;");

  if (!can_erase || current = ref_set-&gt;used) {
    std::ostringstream where;
    where size();
    throw IteratorPositionIllegal("ArraySet::Iterator::operator -&gt; Iterator illegal: "+where.str());
  }

  return &amp;ref_set-&gt;set[current];
}


It would be instructive to hand simulate the following code as a program; or
execute its equivalent in the set_driver using the regular menu and then the
"it" submenu; or even execute the code in a project. It produces the results

----------
a
e
d
b
c
set[d,c] 
----------

#include 
#include 
#include "array_set.hpp"


int main() {
  try {

    //Example: simple iterator test for Sets

    ics::ArraySet s({std::string("a"), std::string("b"), std::string("c"), std::string("d"), std::string("e")});

    ics::ArraySet::Iterator i = s.begin();
    std::cout ::Iterator i = c.begin(); i != c.end(); ++i)
    ...

The one belows caches the value of c.end()

  ArraySet::Iterator end = c.end();
  for (ArraySet::Iterator i = c.begin(); i != end; ++i)
    ...

which can change if i.erase() is called; so do not use this form if you are
calling i.erase().

We have now taken the complete tour through the .hpp file storing the ArraySet
implementation of Set. Feel free to examine any/all of the array implementations
of the four other data types. Each will have some unique code, but there will
also be much similar code as well.

ArrayStack is very simple.

ArrayQueue is implemented using the array as a circular structure: improving
its performance (dequeque is O(1)) but making all the code more complicated to
understand. The code in LinearArrayQueue, from Programming Assignment #0, is
simpler to understand but is slower: e.g., dequeue is O(N), because it shifts
to the left by one index all values that remain in the Queue.

ArrayPriorityQueue is simple, except it introduces/uses the concept of a
function pointer: a pointer to a function that computes whether a &gt; b for
the prioritization. This function pointer can be supplied as an argument to the
template or a constructor.

ArrayMap is simple, except it introduces/uses the pair class, which itself is
very simple, to associate keys with their values in each location of the array.

In Programming Assignment #2 you will write linked list implementations of
various templated classes: each will implement its data type by using a simple
linear linked list or a variant. Much of the code will mirror what is written
here (converting array access to linked list accesses). Especially interesting
is the code relating to Iterators (where hints will be given).
 